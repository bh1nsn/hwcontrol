
usbser1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08007f34  08007f34  00017f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080dc  080080dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080080dc  080080dc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080dc  080080dc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e0  080080e0  000180e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080080e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001414  200001e0  080082c4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015f4  080082c4  000215f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136df  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003402  00000000  00000000  000338e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00036cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  00037848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2bf  00000000  00000000  00038218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa0a  00000000  00000000  000524d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008533a  00000000  00000000  00061ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e721b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ea0  00000000  00000000  000e7270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08007f1c 	.word	0x08007f1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08007f1c 	.word	0x08007f1c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa63 	bl	800061c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f875 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8cf 	bl	80002fc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015e:	f006 fdb1 	bl	8006cc4 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 2 */
    result = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	617b      	str	r3, [r7, #20]

	// initialize the pushbutton handler with mask byte.
	PushButton_Init(0x01);
 8000166:	2001      	movs	r0, #1
 8000168:	f006 fa8c 	bl	8006684 <PushButton_Init>
	// start a timer routine: 10msec period, perpetual
	//result = UsrTimer_Set(10, 0, UartRxTask);
	// UART output test
	UartPrintf("\r\n\t\tSystem Started: %d\r\n", result);
 800016c:	6979      	ldr	r1, [r7, #20]
 800016e:	482c      	ldr	r0, [pc, #176]	; (8000220 <main+0xd4>)
 8000170:	f000 f92a 	bl	80003c8 <UartPrintf>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// check event queue
		if (Evt_DeQueue(event)) {
 8000174:	1d3b      	adds	r3, r7, #4
 8000176:	4618      	mov	r0, r3
 8000178:	f006 fa40 	bl	80065fc <Evt_DeQueue>
 800017c:	4603      	mov	r3, r0
 800017e:	2b00      	cmp	r3, #0
 8000180:	d046      	beq.n	8000210 <main+0xc4>
			switch (event[0]) {
 8000182:	793b      	ldrb	r3, [r7, #4]
 8000184:	2b10      	cmp	r3, #16
 8000186:	d147      	bne.n	8000218 <main+0xcc>
			// pushbutton event ================================================
			// event[1]: button id
			// event[2]: PBTN_SCLK, _DCLK, _TCLK, _LCLK, _DOWN, _ENDN
			case EVT_PBTN_INPUT:

				if (event[2] == PBTN_SCLK) {
 8000188:	79bb      	ldrb	r3, [r7, #6]
 800018a:	2b01      	cmp	r3, #1
 800018c:	d105      	bne.n	800019a <main+0x4e>
					UartPrintf("\r\nButton %d: single click.", event[1]);
 800018e:	797b      	ldrb	r3, [r7, #5]
 8000190:	4619      	mov	r1, r3
 8000192:	4824      	ldr	r0, [pc, #144]	; (8000224 <main+0xd8>)
 8000194:	f000 f918 	bl	80003c8 <UartPrintf>
				} else if (event[2] == PBTN_ENDN) {
					UartPrintf("\r\nButton %d: has been released.", event[1]);
					PushButton_SetMode(PUSHBTN_MODE_CLICK, true);
					UartPrintf("\r\n --> Switch to click mode.");
				}
				break;
 8000198:	e040      	b.n	800021c <main+0xd0>
				} else if (event[2] == PBTN_LCLK) {
 800019a:	79bb      	ldrb	r3, [r7, #6]
 800019c:	2b02      	cmp	r3, #2
 800019e:	d105      	bne.n	80001ac <main+0x60>
					UartPrintf("\r\nButton %d: long click.", event[1]);
 80001a0:	797b      	ldrb	r3, [r7, #5]
 80001a2:	4619      	mov	r1, r3
 80001a4:	4820      	ldr	r0, [pc, #128]	; (8000228 <main+0xdc>)
 80001a6:	f000 f90f 	bl	80003c8 <UartPrintf>
				break;
 80001aa:	e037      	b.n	800021c <main+0xd0>
				} else if (event[2] == PBTN_DCLK) {
 80001ac:	79bb      	ldrb	r3, [r7, #6]
 80001ae:	2b03      	cmp	r3, #3
 80001b0:	d105      	bne.n	80001be <main+0x72>
					UartPrintf("\r\nButton %d: double click.", event[1]);
 80001b2:	797b      	ldrb	r3, [r7, #5]
 80001b4:	4619      	mov	r1, r3
 80001b6:	481d      	ldr	r0, [pc, #116]	; (800022c <main+0xe0>)
 80001b8:	f000 f906 	bl	80003c8 <UartPrintf>
				break;
 80001bc:	e02e      	b.n	800021c <main+0xd0>
				} else if (event[2] == PBTN_TCLK) {
 80001be:	79bb      	ldrb	r3, [r7, #6]
 80001c0:	2b04      	cmp	r3, #4
 80001c2:	d10c      	bne.n	80001de <main+0x92>
					UartPrintf("\r\nButton %d: triple click.", event[1]);
 80001c4:	797b      	ldrb	r3, [r7, #5]
 80001c6:	4619      	mov	r1, r3
 80001c8:	4819      	ldr	r0, [pc, #100]	; (8000230 <main+0xe4>)
 80001ca:	f000 f8fd 	bl	80003c8 <UartPrintf>
					PushButton_SetMode(PUSHBTN_MODE_UDOWN, true);
 80001ce:	2101      	movs	r1, #1
 80001d0:	2001      	movs	r0, #1
 80001d2:	f006 fa87 	bl	80066e4 <PushButton_SetMode>
					UartPrintf("\r\n --> Switch to up-down mode.");
 80001d6:	4817      	ldr	r0, [pc, #92]	; (8000234 <main+0xe8>)
 80001d8:	f000 f8f6 	bl	80003c8 <UartPrintf>
				break;
 80001dc:	e01e      	b.n	800021c <main+0xd0>
				} else if (event[2] == PBTN_DOWN) {
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	2b05      	cmp	r3, #5
 80001e2:	d105      	bne.n	80001f0 <main+0xa4>
					UartPrintf("\r\nButton %d: is being pressed.", event[1]);
 80001e4:	797b      	ldrb	r3, [r7, #5]
 80001e6:	4619      	mov	r1, r3
 80001e8:	4813      	ldr	r0, [pc, #76]	; (8000238 <main+0xec>)
 80001ea:	f000 f8ed 	bl	80003c8 <UartPrintf>
				break;
 80001ee:	e015      	b.n	800021c <main+0xd0>
				} else if (event[2] == PBTN_ENDN) {
 80001f0:	79bb      	ldrb	r3, [r7, #6]
 80001f2:	2b06      	cmp	r3, #6
 80001f4:	d112      	bne.n	800021c <main+0xd0>
					UartPrintf("\r\nButton %d: has been released.", event[1]);
 80001f6:	797b      	ldrb	r3, [r7, #5]
 80001f8:	4619      	mov	r1, r3
 80001fa:	4810      	ldr	r0, [pc, #64]	; (800023c <main+0xf0>)
 80001fc:	f000 f8e4 	bl	80003c8 <UartPrintf>
					PushButton_SetMode(PUSHBTN_MODE_CLICK, true);
 8000200:	2101      	movs	r1, #1
 8000202:	2000      	movs	r0, #0
 8000204:	f006 fa6e 	bl	80066e4 <PushButton_SetMode>
					UartPrintf("\r\n --> Switch to click mode.");
 8000208:	480d      	ldr	r0, [pc, #52]	; (8000240 <main+0xf4>)
 800020a:	f000 f8dd 	bl	80003c8 <UartPrintf>
				break;
 800020e:	e005      	b.n	800021c <main+0xd0>
			default:
				break;
			}
		} else {
			// delay here is recommended not to call Evt_DeQueue too frequently
			HAL_Delay(10);
 8000210:	200a      	movs	r0, #10
 8000212:	f000 fa65 	bl	80006e0 <HAL_Delay>
 8000216:	e7ad      	b.n	8000174 <main+0x28>
				break;
 8000218:	bf00      	nop
 800021a:	e7ab      	b.n	8000174 <main+0x28>
				break;
 800021c:	bf00      	nop
		if (Evt_DeQueue(event)) {
 800021e:	e7a9      	b.n	8000174 <main+0x28>
 8000220:	08007f34 	.word	0x08007f34
 8000224:	08007f50 	.word	0x08007f50
 8000228:	08007f6c 	.word	0x08007f6c
 800022c:	08007f88 	.word	0x08007f88
 8000230:	08007fa4 	.word	0x08007fa4
 8000234:	08007fc0 	.word	0x08007fc0
 8000238:	08007fe0 	.word	0x08007fe0
 800023c:	08008000 	.word	0x08008000
 8000240:	08008020 	.word	0x08008020

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b094      	sub	sp, #80	; 0x50
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f007 fa20 	bl	8007698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000274:	2301      	movs	r3, #1
 8000276:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000286:	2302      	movs	r3, #2
 8000288:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000290:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000294:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800029a:	4618      	mov	r0, r3
 800029c:	f002 f8b0 	bl	8002400 <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002a6:	f000 f8dd 	bl	8000464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	2101      	movs	r1, #1
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 fb1a 	bl	8002900 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002d2:	f000 f8c7 	bl	8000464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002d6:	2310      	movs	r3, #16
 80002d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002de:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 fc74 	bl	8002bd0 <HAL_RCCEx_PeriphCLKConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002ee:	f000 f8b9 	bl	8000464 <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3750      	adds	r7, #80	; 0x50
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b088      	sub	sp, #32
 8000300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000310:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <MX_GPIO_Init+0xc0>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a29      	ldr	r2, [pc, #164]	; (80003bc <MX_GPIO_Init+0xc0>)
 8000316:	f043 0310 	orr.w	r3, r3, #16
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b27      	ldr	r3, [pc, #156]	; (80003bc <MX_GPIO_Init+0xc0>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0310 	and.w	r3, r3, #16
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000328:	4b24      	ldr	r3, [pc, #144]	; (80003bc <MX_GPIO_Init+0xc0>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a23      	ldr	r2, [pc, #140]	; (80003bc <MX_GPIO_Init+0xc0>)
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b21      	ldr	r3, [pc, #132]	; (80003bc <MX_GPIO_Init+0xc0>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0320 	and.w	r3, r3, #32
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_GPIO_Init+0xc0>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a1d      	ldr	r2, [pc, #116]	; (80003bc <MX_GPIO_Init+0xc0>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_GPIO_Init+0xc0>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_GPIO_Init+0xc0>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a17      	ldr	r2, [pc, #92]	; (80003bc <MX_GPIO_Init+0xc0>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_GPIO_Init+0xc0>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0304 	and.w	r3, r3, #4
 800036c:	603b      	str	r3, [r7, #0]
 800036e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000376:	4812      	ldr	r0, [pc, #72]	; (80003c0 <MX_GPIO_Init+0xc4>)
 8000378:	f000 fc7f 	bl	8000c7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800037c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000382:	2301      	movs	r3, #1
 8000384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038a:	2302      	movs	r3, #2
 800038c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	4619      	mov	r1, r3
 8000394:	480a      	ldr	r0, [pc, #40]	; (80003c0 <MX_GPIO_Init+0xc4>)
 8000396:	f000 fad5 	bl	8000944 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_BTN_Pin */
  GPIO_InitStruct.Pin = TEST_BTN_Pin;
 800039a:	2302      	movs	r3, #2
 800039c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEST_BTN_GPIO_Port, &GPIO_InitStruct);
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	4619      	mov	r1, r3
 80003ac:	4805      	ldr	r0, [pc, #20]	; (80003c4 <MX_GPIO_Init+0xc8>)
 80003ae:	f000 fac9 	bl	8000944 <HAL_GPIO_Init>

}
 80003b2:	bf00      	nop
 80003b4:	3720      	adds	r7, #32
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40011000 	.word	0x40011000
 80003c4:	40010c00 	.word	0x40010c00

080003c8 <UartPrintf>:
/* USER CODE BEGIN 4 */
/** Printf() style UART output. Check the standard c library that comes
 * with the compiler for the scope of the format string it supports.
 */
void UartPrintf(const char *format, ...)
{
 80003c8:	b40f      	push	{r0, r1, r2, r3}
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b0a2      	sub	sp, #136	; 0x88
 80003ce:	af00      	add	r7, sp, #0
	char buffer[128];
	uint16_t size;
	va_list args;

	va_start(args, format);
 80003d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80003d4:	603b      	str	r3, [r7, #0]
	size = vsprintf(buffer, format, args);
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	683a      	ldr	r2, [r7, #0]
 80003da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80003de:	4618      	mov	r0, r3
 80003e0:	f007 f978 	bl	80076d4 <vsiprintf>
 80003e4:	4603      	mov	r3, r0
 80003e6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	va_end(args);
	CDC_Transmit_FS((uint8_t*)buffer, size);
 80003ea:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	4611      	mov	r1, r2
 80003f2:	4618      	mov	r0, r3
 80003f4:	f006 fd48 	bl	8006e88 <CDC_Transmit_FS>
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, size, 1000);
}
 80003f8:	bf00      	nop
 80003fa:	3788      	adds	r7, #136	; 0x88
 80003fc:	46bd      	mov	sp, r7
 80003fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000402:	b004      	add	sp, #16
 8000404:	4770      	bx	lr
	...

08000408 <PushButton_Read>:
 * button is released.
 *
 * \return	pushbutton state packed in a uint8_t.
 */
uint8_t PushButton_Read()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	// button released
	if(HAL_GPIO_ReadPin(TEST_BTN_GPIO_Port, TEST_BTN_Pin))
 800040c:	2102      	movs	r1, #2
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <PushButton_Read+0x1c>)
 8000410:	f000 fc1c 	bl	8000c4c <HAL_GPIO_ReadPin>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <PushButton_Read+0x16>
	{
		return 0x00;
 800041a:	2300      	movs	r3, #0
 800041c:	e000      	b.n	8000420 <PushButton_Read+0x18>
	}
	// button pressed
	else
	{
		return 0x01;
 800041e:	2301      	movs	r3, #1
	}
}
 8000420:	4618      	mov	r0, r3
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40010c00 	.word	0x40010c00

08000428 <SysTick_Handler_1ms>:

/** SysTick callback function override.
 */
void SysTick_Handler_1ms()
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	// UsrTimer_Routine will have 1msec resolution
	UsrTimer_Routine();
 800042c:	f006 fb86 	bl	8006b3c <UsrTimer_Routine>
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}

08000434 <SysTick_Handler_5ms>:

void SysTick_Handler_5ms()
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	// blink the LED
	static int counter_5ms = 0;
	if (counter_5ms++ > 200) {
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <SysTick_Handler_5ms+0x28>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	1c5a      	adds	r2, r3, #1
 800043e:	4907      	ldr	r1, [pc, #28]	; (800045c <SysTick_Handler_5ms+0x28>)
 8000440:	600a      	str	r2, [r1, #0]
 8000442:	2bc8      	cmp	r3, #200	; 0xc8
 8000444:	dd07      	ble.n	8000456 <SysTick_Handler_5ms+0x22>
		counter_5ms = 0;
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <SysTick_Handler_5ms+0x28>)
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800044c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000450:	4803      	ldr	r0, [pc, #12]	; (8000460 <SysTick_Handler_5ms+0x2c>)
 8000452:	f000 fc2a 	bl	8000caa <HAL_GPIO_TogglePin>
	}
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	200001fc 	.word	0x200001fc
 8000460:	40011000 	.word	0x40011000

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800046c:	e7fe      	b.n	800046c <Error_Handler+0x8>
	...

08000470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <HAL_MspInit+0x5c>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	4a14      	ldr	r2, [pc, #80]	; (80004cc <HAL_MspInit+0x5c>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6193      	str	r3, [r2, #24]
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <HAL_MspInit+0x5c>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <HAL_MspInit+0x5c>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <HAL_MspInit+0x5c>)
 8000494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <HAL_MspInit+0x5c>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <HAL_MspInit+0x60>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <HAL_MspInit+0x60>)
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010000 	.word	0x40010000

080004d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <NMI_Handler+0x4>

080004da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004de:	e7fe      	b.n	80004de <HardFault_Handler+0x4>

080004e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <MemManage_Handler+0x4>

080004e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <BusFault_Handler+0x4>

080004ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <UsageFault_Handler+0x4>

080004f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr

080004fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr

0800050a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
	...

08000518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  static int tick5x = 0;
  if (tick5x++ == 5) {
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <SysTick_Handler+0x28>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	1c5a      	adds	r2, r3, #1
 8000522:	4907      	ldr	r1, [pc, #28]	; (8000540 <SysTick_Handler+0x28>)
 8000524:	600a      	str	r2, [r1, #0]
 8000526:	2b05      	cmp	r3, #5
 8000528:	d104      	bne.n	8000534 <SysTick_Handler+0x1c>
	  tick5x = 0;
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <SysTick_Handler+0x28>)
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
	  SysTick_Handler_5ms();
 8000530:	f7ff ff80 	bl	8000434 <SysTick_Handler_5ms>
  }
  SysTick_Handler_1ms();
 8000534:	f7ff ff78 	bl	8000428 <SysTick_Handler_1ms>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000538:	f000 f8b6 	bl	80006a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000200 	.word	0x20000200

08000544 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800054a:	f000 fcf8 	bl	8000f3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200012f8 	.word	0x200012f8

08000558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <_sbrk+0x5c>)
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <_sbrk+0x60>)
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <_sbrk+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d102      	bne.n	800057a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <_sbrk+0x64>)
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <_sbrk+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	429a      	cmp	r2, r3
 8000586:	d207      	bcs.n	8000598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000588:	f007 f85c 	bl	8007644 <__errno>
 800058c:	4603      	mov	r3, r0
 800058e:	220c      	movs	r2, #12
 8000590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e009      	b.n	80005ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <_sbrk+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <_sbrk+0x64>)
 80005a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20005000 	.word	0x20005000
 80005b8:	00000400 	.word	0x00000400
 80005bc:	20000204 	.word	0x20000204
 80005c0:	200015f8 	.word	0x200015f8

080005c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005d2:	e003      	b.n	80005dc <LoopCopyDataInit>

080005d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005da:	3104      	adds	r1, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005dc:	480a      	ldr	r0, [pc, #40]	; (8000608 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005e4:	d3f6      	bcc.n	80005d4 <CopyDataInit>
  ldr r2, =_sbss
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005e8:	e002      	b.n	80005f0 <LoopFillZerobss>

080005ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005ec:	f842 3b04 	str.w	r3, [r2], #4

080005f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005f4:	d3f9      	bcc.n	80005ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005f6:	f7ff ffe5 	bl	80005c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005fa:	f007 f829 	bl	8007650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fe:	f7ff fda5 	bl	800014c <main>
  bx lr
 8000602:	4770      	bx	lr
  ldr r3, =_sidata
 8000604:	080080e4 	.word	0x080080e4
  ldr r0, =_sdata
 8000608:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800060c:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000610:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000614:	200015f4 	.word	0x200015f4

08000618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000618:	e7fe      	b.n	8000618 <ADC1_2_IRQHandler>
	...

0800061c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_Init+0x28>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <HAL_Init+0x28>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 f947 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f808 	bl	8000648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000638:	f7ff ff1a 	bl	8000470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_InitTick+0x54>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_InitTick+0x58>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000662:	fbb2 f3f3 	udiv	r3, r2, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f95f 	bl	800092a <HAL_SYSTICK_Config>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	e00e      	b.n	8000694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d80a      	bhi.n	8000692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067c:	2200      	movs	r2, #0
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	f04f 30ff 	mov.w	r0, #4294967295
 8000684:	f000 f927 	bl	80008d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000688:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <HAL_InitTick+0x5c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	e000      	b.n	8000694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_IncTick+0x1c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_IncTick+0x20>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4413      	add	r3, r2
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <HAL_IncTick+0x20>)
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	20000008 	.word	0x20000008
 80006c8:	20000648 	.word	0x20000648

080006cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return uwTick;
 80006d0:	4b02      	ldr	r3, [pc, #8]	; (80006dc <HAL_GetTick+0x10>)
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	20000648 	.word	0x20000648

080006e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e8:	f7ff fff0 	bl	80006cc <HAL_GetTick>
 80006ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f8:	d005      	beq.n	8000706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_Delay+0x44>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	461a      	mov	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000706:	bf00      	nop
 8000708:	f7ff ffe0 	bl	80006cc <HAL_GetTick>
 800070c:	4602      	mov	r2, r0
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	429a      	cmp	r2, r3
 8000716:	d8f7      	bhi.n	8000708 <HAL_Delay+0x28>
  {
  }
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000008 	.word	0x20000008

08000728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075a:	4a04      	ldr	r2, [pc, #16]	; (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	60d3      	str	r3, [r2, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <__NVIC_GetPriorityGrouping+0x18>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	f003 0307 	and.w	r3, r3, #7
}
 800077e:	4618      	mov	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	2b00      	cmp	r3, #0
 800079c:	db0b      	blt.n	80007b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f003 021f 	and.w	r2, r3, #31
 80007a4:	4906      	ldr	r1, [pc, #24]	; (80007c0 <__NVIC_EnableIRQ+0x34>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	095b      	lsrs	r3, r3, #5
 80007ac:	2001      	movs	r0, #1
 80007ae:	fa00 f202 	lsl.w	r2, r0, r2
 80007b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100

080007c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	db0a      	blt.n	80007ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	490c      	ldr	r1, [pc, #48]	; (8000810 <__NVIC_SetPriority+0x4c>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	0112      	lsls	r2, r2, #4
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	440b      	add	r3, r1
 80007e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ec:	e00a      	b.n	8000804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4908      	ldr	r1, [pc, #32]	; (8000814 <__NVIC_SetPriority+0x50>)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	f003 030f 	and.w	r3, r3, #15
 80007fa:	3b04      	subs	r3, #4
 80007fc:	0112      	lsls	r2, r2, #4
 80007fe:	b2d2      	uxtb	r2, r2
 8000800:	440b      	add	r3, r1
 8000802:	761a      	strb	r2, [r3, #24]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e100 	.word	0xe000e100
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	f1c3 0307 	rsb	r3, r3, #7
 8000832:	2b04      	cmp	r3, #4
 8000834:	bf28      	it	cs
 8000836:	2304      	movcs	r3, #4
 8000838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3304      	adds	r3, #4
 800083e:	2b06      	cmp	r3, #6
 8000840:	d902      	bls.n	8000848 <NVIC_EncodePriority+0x30>
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3b03      	subs	r3, #3
 8000846:	e000      	b.n	800084a <NVIC_EncodePriority+0x32>
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	f04f 32ff 	mov.w	r2, #4294967295
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43da      	mvns	r2, r3
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	401a      	ands	r2, r3
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000860:	f04f 31ff 	mov.w	r1, #4294967295
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	fa01 f303 	lsl.w	r3, r1, r3
 800086a:	43d9      	mvns	r1, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000870:	4313      	orrs	r3, r2
         );
}
 8000872:	4618      	mov	r0, r3
 8000874:	3724      	adds	r7, #36	; 0x24
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800088c:	d301      	bcc.n	8000892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088e:	2301      	movs	r3, #1
 8000890:	e00f      	b.n	80008b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <SysTick_Config+0x40>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089a:	210f      	movs	r1, #15
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f7ff ff90 	bl	80007c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <SysTick_Config+0x40>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <SysTick_Config+0x40>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff2d 	bl	8000728 <__NVIC_SetPriorityGrouping>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e8:	f7ff ff42 	bl	8000770 <__NVIC_GetPriorityGrouping>
 80008ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	68b9      	ldr	r1, [r7, #8]
 80008f2:	6978      	ldr	r0, [r7, #20]
 80008f4:	f7ff ff90 	bl	8000818 <NVIC_EncodePriority>
 80008f8:	4602      	mov	r2, r0
 80008fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff5f 	bl	80007c4 <__NVIC_SetPriority>
}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff35 	bl	800078c <__NVIC_EnableIRQ>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff ffa2 	bl	800087c <SysTick_Config>
 8000938:	4603      	mov	r3, r0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000944:	b480      	push	{r7}
 8000946:	b08b      	sub	sp, #44	; 0x2c
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000956:	e169      	b.n	8000c2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000958:	2201      	movs	r2, #1
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	69fa      	ldr	r2, [r7, #28]
 8000968:	4013      	ands	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	429a      	cmp	r2, r3
 8000972:	f040 8158 	bne.w	8000c26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	4a9a      	ldr	r2, [pc, #616]	; (8000be4 <HAL_GPIO_Init+0x2a0>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d05e      	beq.n	8000a3e <HAL_GPIO_Init+0xfa>
 8000980:	4a98      	ldr	r2, [pc, #608]	; (8000be4 <HAL_GPIO_Init+0x2a0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d875      	bhi.n	8000a72 <HAL_GPIO_Init+0x12e>
 8000986:	4a98      	ldr	r2, [pc, #608]	; (8000be8 <HAL_GPIO_Init+0x2a4>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d058      	beq.n	8000a3e <HAL_GPIO_Init+0xfa>
 800098c:	4a96      	ldr	r2, [pc, #600]	; (8000be8 <HAL_GPIO_Init+0x2a4>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d86f      	bhi.n	8000a72 <HAL_GPIO_Init+0x12e>
 8000992:	4a96      	ldr	r2, [pc, #600]	; (8000bec <HAL_GPIO_Init+0x2a8>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d052      	beq.n	8000a3e <HAL_GPIO_Init+0xfa>
 8000998:	4a94      	ldr	r2, [pc, #592]	; (8000bec <HAL_GPIO_Init+0x2a8>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d869      	bhi.n	8000a72 <HAL_GPIO_Init+0x12e>
 800099e:	4a94      	ldr	r2, [pc, #592]	; (8000bf0 <HAL_GPIO_Init+0x2ac>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d04c      	beq.n	8000a3e <HAL_GPIO_Init+0xfa>
 80009a4:	4a92      	ldr	r2, [pc, #584]	; (8000bf0 <HAL_GPIO_Init+0x2ac>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d863      	bhi.n	8000a72 <HAL_GPIO_Init+0x12e>
 80009aa:	4a92      	ldr	r2, [pc, #584]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d046      	beq.n	8000a3e <HAL_GPIO_Init+0xfa>
 80009b0:	4a90      	ldr	r2, [pc, #576]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d85d      	bhi.n	8000a72 <HAL_GPIO_Init+0x12e>
 80009b6:	2b12      	cmp	r3, #18
 80009b8:	d82a      	bhi.n	8000a10 <HAL_GPIO_Init+0xcc>
 80009ba:	2b12      	cmp	r3, #18
 80009bc:	d859      	bhi.n	8000a72 <HAL_GPIO_Init+0x12e>
 80009be:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <HAL_GPIO_Init+0x80>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	08000a3f 	.word	0x08000a3f
 80009c8:	08000a19 	.word	0x08000a19
 80009cc:	08000a2b 	.word	0x08000a2b
 80009d0:	08000a6d 	.word	0x08000a6d
 80009d4:	08000a73 	.word	0x08000a73
 80009d8:	08000a73 	.word	0x08000a73
 80009dc:	08000a73 	.word	0x08000a73
 80009e0:	08000a73 	.word	0x08000a73
 80009e4:	08000a73 	.word	0x08000a73
 80009e8:	08000a73 	.word	0x08000a73
 80009ec:	08000a73 	.word	0x08000a73
 80009f0:	08000a73 	.word	0x08000a73
 80009f4:	08000a73 	.word	0x08000a73
 80009f8:	08000a73 	.word	0x08000a73
 80009fc:	08000a73 	.word	0x08000a73
 8000a00:	08000a73 	.word	0x08000a73
 8000a04:	08000a73 	.word	0x08000a73
 8000a08:	08000a21 	.word	0x08000a21
 8000a0c:	08000a35 	.word	0x08000a35
 8000a10:	4a79      	ldr	r2, [pc, #484]	; (8000bf8 <HAL_GPIO_Init+0x2b4>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d013      	beq.n	8000a3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a16:	e02c      	b.n	8000a72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	623b      	str	r3, [r7, #32]
          break;
 8000a1e:	e029      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	3304      	adds	r3, #4
 8000a26:	623b      	str	r3, [r7, #32]
          break;
 8000a28:	e024      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	3308      	adds	r3, #8
 8000a30:	623b      	str	r3, [r7, #32]
          break;
 8000a32:	e01f      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	330c      	adds	r3, #12
 8000a3a:	623b      	str	r3, [r7, #32]
          break;
 8000a3c:	e01a      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d102      	bne.n	8000a4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a46:	2304      	movs	r3, #4
 8000a48:	623b      	str	r3, [r7, #32]
          break;
 8000a4a:	e013      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d105      	bne.n	8000a60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a54:	2308      	movs	r3, #8
 8000a56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	611a      	str	r2, [r3, #16]
          break;
 8000a5e:	e009      	b.n	8000a74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a60:	2308      	movs	r3, #8
 8000a62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	615a      	str	r2, [r3, #20]
          break;
 8000a6a:	e003      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
          break;
 8000a70:	e000      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          break;
 8000a72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	2bff      	cmp	r3, #255	; 0xff
 8000a78:	d801      	bhi.n	8000a7e <HAL_GPIO_Init+0x13a>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	e001      	b.n	8000a82 <HAL_GPIO_Init+0x13e>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3304      	adds	r3, #4
 8000a82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	2bff      	cmp	r3, #255	; 0xff
 8000a88:	d802      	bhi.n	8000a90 <HAL_GPIO_Init+0x14c>
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	e002      	b.n	8000a96 <HAL_GPIO_Init+0x152>
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	3b08      	subs	r3, #8
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	6a39      	ldr	r1, [r7, #32]
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 80b1 	beq.w	8000c26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac4:	4b4d      	ldr	r3, [pc, #308]	; (8000bfc <HAL_GPIO_Init+0x2b8>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a4c      	ldr	r2, [pc, #304]	; (8000bfc <HAL_GPIO_Init+0x2b8>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b4a      	ldr	r3, [pc, #296]	; (8000bfc <HAL_GPIO_Init+0x2b8>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000adc:	4a48      	ldr	r2, [pc, #288]	; (8000c00 <HAL_GPIO_Init+0x2bc>)
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	220f      	movs	r2, #15
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	4013      	ands	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a40      	ldr	r2, [pc, #256]	; (8000c04 <HAL_GPIO_Init+0x2c0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d013      	beq.n	8000b30 <HAL_GPIO_Init+0x1ec>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a3f      	ldr	r2, [pc, #252]	; (8000c08 <HAL_GPIO_Init+0x2c4>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d00d      	beq.n	8000b2c <HAL_GPIO_Init+0x1e8>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a3e      	ldr	r2, [pc, #248]	; (8000c0c <HAL_GPIO_Init+0x2c8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d007      	beq.n	8000b28 <HAL_GPIO_Init+0x1e4>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a3d      	ldr	r2, [pc, #244]	; (8000c10 <HAL_GPIO_Init+0x2cc>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d101      	bne.n	8000b24 <HAL_GPIO_Init+0x1e0>
 8000b20:	2303      	movs	r3, #3
 8000b22:	e006      	b.n	8000b32 <HAL_GPIO_Init+0x1ee>
 8000b24:	2304      	movs	r3, #4
 8000b26:	e004      	b.n	8000b32 <HAL_GPIO_Init+0x1ee>
 8000b28:	2302      	movs	r3, #2
 8000b2a:	e002      	b.n	8000b32 <HAL_GPIO_Init+0x1ee>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <HAL_GPIO_Init+0x1ee>
 8000b30:	2300      	movs	r3, #0
 8000b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b34:	f002 0203 	and.w	r2, r2, #3
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	4093      	lsls	r3, r2
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b42:	492f      	ldr	r1, [pc, #188]	; (8000c00 <HAL_GPIO_Init+0x2bc>)
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	3302      	adds	r3, #2
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d006      	beq.n	8000b6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b5c:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	492c      	ldr	r1, [pc, #176]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	600b      	str	r3, [r1, #0]
 8000b68:	e006      	b.n	8000b78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	4928      	ldr	r1, [pc, #160]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d006      	beq.n	8000b92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	4922      	ldr	r1, [pc, #136]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	604b      	str	r3, [r1, #4]
 8000b90:	e006      	b.n	8000ba0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	491e      	ldr	r1, [pc, #120]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d006      	beq.n	8000bba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	4918      	ldr	r1, [pc, #96]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	608b      	str	r3, [r1, #8]
 8000bb8:	e006      	b.n	8000bc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	4914      	ldr	r1, [pc, #80]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d021      	beq.n	8000c18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	490e      	ldr	r1, [pc, #56]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	60cb      	str	r3, [r1, #12]
 8000be0:	e021      	b.n	8000c26 <HAL_GPIO_Init+0x2e2>
 8000be2:	bf00      	nop
 8000be4:	10320000 	.word	0x10320000
 8000be8:	10310000 	.word	0x10310000
 8000bec:	10220000 	.word	0x10220000
 8000bf0:	10210000 	.word	0x10210000
 8000bf4:	10120000 	.word	0x10120000
 8000bf8:	10110000 	.word	0x10110000
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010000 	.word	0x40010000
 8000c04:	40010800 	.word	0x40010800
 8000c08:	40010c00 	.word	0x40010c00
 8000c0c:	40011000 	.word	0x40011000
 8000c10:	40011400 	.word	0x40011400
 8000c14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_GPIO_Init+0x304>)
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	4909      	ldr	r1, [pc, #36]	; (8000c48 <HAL_GPIO_Init+0x304>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	3301      	adds	r3, #1
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	fa22 f303 	lsr.w	r3, r2, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f47f ae8e 	bne.w	8000958 <HAL_GPIO_Init+0x14>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	372c      	adds	r7, #44	; 0x2c
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	40010400 	.word	0x40010400

08000c4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	887b      	ldrh	r3, [r7, #2]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e001      	b.n	8000c6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	460b      	mov	r3, r1
 8000c84:	807b      	strh	r3, [r7, #2]
 8000c86:	4613      	mov	r3, r2
 8000c88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c8a:	787b      	ldrb	r3, [r7, #1]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c90:	887a      	ldrh	r2, [r7, #2]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c96:	e003      	b.n	8000ca0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	041a      	lsls	r2, r3, #16
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	611a      	str	r2, [r3, #16]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cbc:	887a      	ldrh	r2, [r7, #2]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	041a      	lsls	r2, r3, #16
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	400b      	ands	r3, r1
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	611a      	str	r2, [r3, #16]
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cde:	b08b      	sub	sp, #44	; 0x2c
 8000ce0:	af06      	add	r7, sp, #24
 8000ce2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e0fd      	b.n	8000eea <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d106      	bne.n	8000d08 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f006 f9f4 	bl	80070f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 f837 	bl	8002d88 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	687e      	ldr	r6, [r7, #4]
 8000d22:	466d      	mov	r5, sp
 8000d24:	f106 0410 	add.w	r4, r6, #16
 8000d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d2c:	6823      	ldr	r3, [r4, #0]
 8000d2e:	602b      	str	r3, [r5, #0]
 8000d30:	1d33      	adds	r3, r6, #4
 8000d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d34:	6838      	ldr	r0, [r7, #0]
 8000d36:	f002 f801 	bl	8002d3c <USB_CoreInit>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2202      	movs	r2, #2
 8000d44:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e0ce      	b.n	8000eea <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f002 f832 	bl	8002dbc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e04c      	b.n	8000df8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3301      	adds	r3, #1
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	1c5a      	adds	r2, r3, #1
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	440b      	add	r3, r1
 8000d84:	7bfa      	ldrb	r2, [r7, #15]
 8000d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d88:	7bfa      	ldrb	r2, [r7, #15]
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	b298      	uxth	r0, r3
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	3336      	adds	r3, #54	; 0x36
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	3303      	adds	r3, #3
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000db6:	7bfa      	ldrb	r2, [r7, #15]
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3338      	adds	r3, #56	; 0x38
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000dca:	7bfa      	ldrb	r2, [r7, #15]
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	333c      	adds	r3, #60	; 0x3c
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000dde:	7bfa      	ldrb	r2, [r7, #15]
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	440b      	add	r3, r1
 8000dec:	3340      	adds	r3, #64	; 0x40
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	3301      	adds	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d3ad      	bcc.n	8000d5e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e044      	b.n	8000e92 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e08:	7bfa      	ldrb	r2, [r7, #15]
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	440b      	add	r3, r1
 8000e16:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e1e:	7bfa      	ldrb	r2, [r7, #15]
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e34:	7bfa      	ldrb	r2, [r7, #15]
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	440b      	add	r3, r1
 8000e42:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	440b      	add	r3, r1
 8000e58:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	440b      	add	r3, r1
 8000e6e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	440b      	add	r3, r1
 8000e84:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
 8000e92:	7bfa      	ldrb	r2, [r7, #15]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d3b5      	bcc.n	8000e08 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	687e      	ldr	r6, [r7, #4]
 8000ea4:	466d      	mov	r5, sp
 8000ea6:	f106 0410 	add.w	r4, r6, #16
 8000eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	602b      	str	r3, [r5, #0]
 8000eb2:	1d33      	adds	r3, r6, #4
 8000eb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eb6:	6838      	ldr	r0, [r7, #0]
 8000eb8:	f001 ff8c 	bl	8002dd4 <USB_DevInit>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00d      	b.n	8000eea <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 ff26 	bl	8004d34 <USB_DevDisconnect>

  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ef2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <HAL_PCD_Start+0x16>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e016      	b.n	8000f36 <HAL_PCD_Start+0x44>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 ff21 	bl	8002d5c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f006 fb5a 	bl	80075d6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fefa 	bl	8004d20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b088      	sub	sp, #32
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f003 fefc 	bl	8004d48 <USB_ReadInterrupts>
 8000f50:	4603      	mov	r3, r0
 8000f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f5a:	d102      	bne.n	8000f62 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 fb61 	bl	8001624 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 feee 	bl	8004d48 <USB_ReadInterrupts>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f76:	d112      	bne.n	8000f9e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f8a:	b292      	uxth	r2, r2
 8000f8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f006 f928 	bl	80071e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f96:	2100      	movs	r1, #0
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f925 	bl	80011e8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f003 fed0 	bl	8004d48 <USB_ReadInterrupts>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fb2:	d10b      	bne.n	8000fcc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000fc6:	b292      	uxth	r2, r2
 8000fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 feb9 	bl	8004d48 <USB_ReadInterrupts>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fe0:	d10b      	bne.n	8000ffa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ff4:	b292      	uxth	r2, r2
 8000ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 fea2 	bl	8004d48 <USB_ReadInterrupts>
 8001004:	4603      	mov	r3, r0
 8001006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800100a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800100e:	d126      	bne.n	800105e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001018:	b29a      	uxth	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0204 	bic.w	r2, r2, #4
 8001022:	b292      	uxth	r2, r2
 8001024:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001030:	b29a      	uxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0208 	bic.w	r2, r2, #8
 800103a:	b292      	uxth	r2, r2
 800103c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f006 f909 	bl	8007258 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800104e:	b29a      	uxth	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001058:	b292      	uxth	r2, r2
 800105a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f003 fe70 	bl	8004d48 <USB_ReadInterrupts>
 8001068:	4603      	mov	r3, r0
 800106a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800106e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001072:	f040 8084 	bne.w	800117e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001076:	2300      	movs	r3, #0
 8001078:	77fb      	strb	r3, [r7, #31]
 800107a:	e011      	b.n	80010a0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	7ffb      	ldrb	r3, [r7, #31]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	441a      	add	r2, r3
 8001088:	7ffb      	ldrb	r3, [r7, #31]
 800108a:	8812      	ldrh	r2, [r2, #0]
 800108c:	b292      	uxth	r2, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	f107 0120 	add.w	r1, r7, #32
 8001094:	440b      	add	r3, r1
 8001096:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800109a:	7ffb      	ldrb	r3, [r7, #31]
 800109c:	3301      	adds	r3, #1
 800109e:	77fb      	strb	r3, [r7, #31]
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	d9ea      	bls.n	800107c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f042 0201 	orr.w	r2, r2, #1
 80010b8:	b292      	uxth	r2, r2
 80010ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0201 	bic.w	r2, r2, #1
 80010d0:	b292      	uxth	r2, r2
 80010d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80010d6:	bf00      	nop
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f6      	beq.n	80010d8 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010fc:	b292      	uxth	r2, r2
 80010fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001102:	2300      	movs	r3, #0
 8001104:	77fb      	strb	r3, [r7, #31]
 8001106:	e010      	b.n	800112a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001108:	7ffb      	ldrb	r3, [r7, #31]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	4611      	mov	r1, r2
 8001110:	7ffa      	ldrb	r2, [r7, #31]
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	440a      	add	r2, r1
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	f107 0120 	add.w	r1, r7, #32
 800111c:	440b      	add	r3, r1
 800111e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001122:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001124:	7ffb      	ldrb	r3, [r7, #31]
 8001126:	3301      	adds	r3, #1
 8001128:	77fb      	strb	r3, [r7, #31]
 800112a:	7ffb      	ldrb	r3, [r7, #31]
 800112c:	2b07      	cmp	r3, #7
 800112e:	d9eb      	bls.n	8001108 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001138:	b29a      	uxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0208 	orr.w	r2, r2, #8
 8001142:	b292      	uxth	r2, r2
 8001144:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800115a:	b292      	uxth	r2, r2
 800115c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001168:	b29a      	uxth	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0204 	orr.w	r2, r2, #4
 8001172:	b292      	uxth	r2, r2
 8001174:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f006 f853 	bl	8007224 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fde0 	bl	8004d48 <USB_ReadInterrupts>
 8001188:	4603      	mov	r3, r0
 800118a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800118e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001192:	d10e      	bne.n	80011b2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800119c:	b29a      	uxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011a6:	b292      	uxth	r2, r2
 80011a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f006 f80c 	bl	80071ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 fdc6 	bl	8004d48 <USB_ReadInterrupts>
 80011bc:	4603      	mov	r3, r0
 80011be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011c6:	d10b      	bne.n	80011e0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011da:	b292      	uxth	r2, r2
 80011dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <HAL_PCD_SetAddress+0x1a>
 80011fe:	2302      	movs	r3, #2
 8001200:	e013      	b.n	800122a <HAL_PCD_SetAddress+0x42>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	78fa      	ldrb	r2, [r7, #3]
 800120e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	78fa      	ldrb	r2, [r7, #3]
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f003 fd6d 	bl	8004cfa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	4608      	mov	r0, r1
 800123c:	4611      	mov	r1, r2
 800123e:	461a      	mov	r2, r3
 8001240:	4603      	mov	r3, r0
 8001242:	70fb      	strb	r3, [r7, #3]
 8001244:	460b      	mov	r3, r1
 8001246:	803b      	strh	r3, [r7, #0]
 8001248:	4613      	mov	r3, r2
 800124a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001254:	2b00      	cmp	r3, #0
 8001256:	da0e      	bge.n	8001276 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2201      	movs	r2, #1
 8001272:	705a      	strb	r2, [r3, #1]
 8001274:	e00e      	b.n	8001294 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	f003 0207 	and.w	r2, r3, #7
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	b2da      	uxtb	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80012a0:	883a      	ldrh	r2, [r7, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	78ba      	ldrb	r2, [r7, #2]
 80012aa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	785b      	ldrb	r3, [r3, #1]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80012be:	78bb      	ldrb	r3, [r7, #2]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d102      	bne.n	80012ca <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_PCD_EP_Open+0xa6>
 80012d4:	2302      	movs	r3, #2
 80012d6:	e00e      	b.n	80012f6 <HAL_PCD_EP_Open+0xc4>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68f9      	ldr	r1, [r7, #12]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 fd94 	bl	8002e14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80012f4:	7afb      	ldrb	r3, [r7, #11]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800130a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800130e:	2b00      	cmp	r3, #0
 8001310:	da0e      	bge.n	8001330 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2201      	movs	r2, #1
 800132c:	705a      	strb	r2, [r3, #1]
 800132e:	e00e      	b.n	800134e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	f003 0207 	and.w	r2, r3, #7
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	b2da      	uxtb	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <HAL_PCD_EP_Close+0x6a>
 8001364:	2302      	movs	r3, #2
 8001366:	e00e      	b.n	8001386 <HAL_PCD_EP_Close+0x88>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68f9      	ldr	r1, [r7, #12]
 8001376:	4618      	mov	r0, r3
 8001378:	f002 f8b6 	bl	80034e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	460b      	mov	r3, r1
 800139c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800139e:	7afb      	ldrb	r3, [r7, #11]
 80013a0:	f003 0207 	and.w	r2, r3, #7
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2200      	movs	r2, #0
 80013c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2200      	movs	r2, #0
 80013cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013ce:	7afb      	ldrb	r3, [r7, #11]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013da:	7afb      	ldrb	r3, [r7, #11]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d106      	bne.n	80013f2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6979      	ldr	r1, [r7, #20]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fa68 	bl	80038c0 <USB_EPStartXfer>
 80013f0:	e005      	b.n	80013fe <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6979      	ldr	r1, [r7, #20]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fa61 	bl	80038c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	f003 0207 	and.w	r2, r3, #7
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	460b      	mov	r3, r1
 8001444:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001446:	7afb      	ldrb	r3, [r7, #11]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4413      	add	r3, r2
 800145a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2200      	movs	r2, #0
 800147a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2201      	movs	r2, #1
 8001480:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001482:	7afb      	ldrb	r3, [r7, #11]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	b2da      	uxtb	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800148e:	7afb      	ldrb	r3, [r7, #11]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	2b00      	cmp	r3, #0
 8001496:	d106      	bne.n	80014a6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6979      	ldr	r1, [r7, #20]
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 fa0e 	bl	80038c0 <USB_EPStartXfer>
 80014a4:	e005      	b.n	80014b2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6979      	ldr	r1, [r7, #20]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 fa07 	bl	80038c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	f003 0207 	and.w	r2, r3, #7
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d901      	bls.n	80014da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e04c      	b.n	8001574 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	da0e      	bge.n	8001500 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2201      	movs	r2, #1
 80014fc:	705a      	strb	r2, [r3, #1]
 80014fe:	e00c      	b.n	800151a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001500:	78fa      	ldrb	r2, [r7, #3]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2201      	movs	r2, #1
 800151e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	b2da      	uxtb	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <HAL_PCD_EP_SetStall+0x7e>
 8001536:	2302      	movs	r3, #2
 8001538:	e01c      	b.n	8001574 <HAL_PCD_EP_SetStall+0xb8>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68f9      	ldr	r1, [r7, #12]
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fad9 	bl	8004b00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	2b00      	cmp	r3, #0
 8001556:	d108      	bne.n	800156a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001562:	4619      	mov	r1, r3
 8001564:	4610      	mov	r0, r2
 8001566:	f003 fbfe 	bl	8004d66 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	f003 020f 	and.w	r2, r3, #15
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	429a      	cmp	r2, r3
 8001594:	d901      	bls.n	800159a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e040      	b.n	800161c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800159a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	da0e      	bge.n	80015c0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2201      	movs	r2, #1
 80015bc:	705a      	strb	r2, [r3, #1]
 80015be:	e00e      	b.n	80015de <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	f003 0207 	and.w	r2, r3, #7
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2200      	movs	r2, #0
 80015dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_PCD_EP_ClrStall+0x82>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e00e      	b.n	800161c <HAL_PCD_EP_ClrStall+0xa0>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68f9      	ldr	r1, [r7, #12]
 800160c:	4618      	mov	r0, r3
 800160e:	f003 fac7 	bl	8004ba0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	; 0x38
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800162c:	e2df      	b.n	8001bee <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001636:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001638:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001644:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001648:	2b00      	cmp	r3, #0
 800164a:	f040 8158 	bne.w	80018fe <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800164e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	2b00      	cmp	r3, #0
 8001656:	d152      	bne.n	80016fe <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001668:	81fb      	strh	r3, [r7, #14]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001678:	b29b      	uxth	r3, r3
 800167a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3328      	adds	r3, #40	; 0x28
 8001680:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800168a:	b29b      	uxth	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	3302      	adds	r3, #2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	441a      	add	r2, r3
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016bc:	2100      	movs	r1, #0
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f005 fd69 	bl	8007196 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 828e 	beq.w	8001bee <PCD_EP_ISR_Handler+0x5ca>
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 8289 	bne.w	8001bee <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	b292      	uxth	r2, r2
 80016f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80016fc:	e277      	b.n	8001bee <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800170e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001714:	2b00      	cmp	r3, #0
 8001716:	d034      	beq.n	8001782 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001720:	b29b      	uxth	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4413      	add	r3, r2
 800172c:	3306      	adds	r3, #6
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	4413      	add	r3, r2
 8001736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001756:	b29b      	uxth	r3, r3
 8001758:	f003 fb55 	bl	8004e06 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	b29a      	uxth	r2, r3
 8001764:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001768:	4013      	ands	r3, r2
 800176a:	823b      	strh	r3, [r7, #16]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	8a3a      	ldrh	r2, [r7, #16]
 8001772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001776:	b292      	uxth	r2, r2
 8001778:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f005 fcde 	bl	800713c <HAL_PCD_SetupStageCallback>
 8001780:	e235      	b.n	8001bee <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001782:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001786:	2b00      	cmp	r3, #0
 8001788:	f280 8231 	bge.w	8001bee <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	b29a      	uxth	r2, r3
 8001794:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001798:	4013      	ands	r3, r2
 800179a:	83bb      	strh	r3, [r7, #28]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	8bba      	ldrh	r2, [r7, #28]
 80017a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017a6:	b292      	uxth	r2, r2
 80017a8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	3306      	adds	r3, #6
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d019      	beq.n	8001812 <PCD_EP_ISR_Handler+0x1ee>
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d015      	beq.n	8001812 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	6959      	ldr	r1, [r3, #20]
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	f003 fb05 	bl	8004e06 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	441a      	add	r2, r3
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800180a:	2100      	movs	r1, #0
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f005 fca7 	bl	8007160 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001820:	b29b      	uxth	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	4413      	add	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d112      	bne.n	8001860 <PCD_EP_ISR_Handler+0x23c>
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001844:	b29a      	uxth	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	801a      	strh	r2, [r3, #0]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	b29b      	uxth	r3, r3
 8001850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001858:	b29a      	uxth	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	801a      	strh	r2, [r3, #0]
 800185e:	e02f      	b.n	80018c0 <PCD_EP_ISR_Handler+0x29c>
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2b3e      	cmp	r3, #62	; 0x3e
 8001866:	d813      	bhi.n	8001890 <PCD_EP_ISR_Handler+0x26c>
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	085b      	lsrs	r3, r3, #1
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <PCD_EP_ISR_Handler+0x25e>
 800187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187e:	3301      	adds	r3, #1
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
 8001882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001884:	b29b      	uxth	r3, r3
 8001886:	029b      	lsls	r3, r3, #10
 8001888:	b29a      	uxth	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	801a      	strh	r2, [r3, #0]
 800188e:	e017      	b.n	80018c0 <PCD_EP_ISR_Handler+0x29c>
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	095b      	lsrs	r3, r3, #5
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <PCD_EP_ISR_Handler+0x286>
 80018a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a6:	3b01      	subs	r3, #1
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
 80018aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	029b      	lsls	r3, r3, #10
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018d0:	827b      	strh	r3, [r7, #18]
 80018d2:	8a7b      	ldrh	r3, [r7, #18]
 80018d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80018d8:	827b      	strh	r3, [r7, #18]
 80018da:	8a7b      	ldrh	r3, [r7, #18]
 80018dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018e0:	827b      	strh	r3, [r7, #18]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	8a7b      	ldrh	r3, [r7, #18]
 80018e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	8013      	strh	r3, [r2, #0]
 80018fc:	e177      	b.n	8001bee <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001910:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001914:	2b00      	cmp	r3, #0
 8001916:	f280 80ea 	bge.w	8001aee <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	b29a      	uxth	r2, r3
 800192c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001930:	4013      	ands	r3, r2
 8001932:	853b      	strh	r3, [r7, #40]	; 0x28
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001944:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001948:	b292      	uxth	r2, r2
 800194a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800194c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	7b1b      	ldrb	r3, [r3, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d122      	bne.n	80019b0 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001972:	b29b      	uxth	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	3306      	adds	r3, #6
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001992:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8087 	beq.w	8001aaa <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	6959      	ldr	r1, [r3, #20]
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	88da      	ldrh	r2, [r3, #6]
 80019a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019aa:	f003 fa2c 	bl	8004e06 <USB_ReadPMA>
 80019ae:	e07c      	b.n	8001aaa <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	78db      	ldrb	r3, [r3, #3]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d108      	bne.n	80019ca <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80019b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019ba:	461a      	mov	r2, r3
 80019bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f923 	bl	8001c0a <HAL_PCD_EP_DB_Receive>
 80019c4:	4603      	mov	r3, r0
 80019c6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80019c8:	e06f      	b.n	8001aaa <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e4:	847b      	strh	r3, [r7, #34]	; 0x22
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	441a      	add	r2, r3
 80019f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d021      	beq.n	8001a68 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a4c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001a4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d02a      	beq.n	8001aaa <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	6959      	ldr	r1, [r3, #20]
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	891a      	ldrh	r2, [r3, #8]
 8001a60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a62:	f003 f9d0 	bl	8004e06 <USB_ReadPMA>
 8001a66:	e020      	b.n	8001aaa <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3306      	adds	r3, #6
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a90:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001a92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	6959      	ldr	r1, [r3, #20]
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	895a      	ldrh	r2, [r3, #10]
 8001aa4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aa6:	f003 f9ae 	bl	8004e06 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	69da      	ldr	r2, [r3, #28]
 8001aae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ab0:	441a      	add	r2, r3
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001abc:	441a      	add	r2, r3
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <PCD_EP_ISR_Handler+0x4b0>
 8001aca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d206      	bcs.n	8001ae2 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f005 fb40 	bl	8007160 <HAL_PCD_DataOutStageCallback>
 8001ae0:	e005      	b.n	8001aee <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f001 fee9 	bl	80038c0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001aee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d07a      	beq.n	8001bee <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001af8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b26:	843b      	strh	r3, [r7, #32]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	441a      	add	r2, r3
 8001b36:	8c3b      	ldrh	r3, [r7, #32]
 8001b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	78db      	ldrb	r3, [r3, #3]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d108      	bne.n	8001b5e <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d146      	bne.n	8001be2 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001b54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d141      	bne.n	8001be2 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	3302      	adds	r3, #2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b86:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	699a      	ldr	r2, [r3, #24]
 8001b8c:	8bfb      	ldrh	r3, [r7, #30]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d906      	bls.n	8001ba0 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	699a      	ldr	r2, [r3, #24]
 8001b96:	8bfb      	ldrh	r3, [r7, #30]
 8001b98:	1ad2      	subs	r2, r2, r3
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	619a      	str	r2, [r3, #24]
 8001b9e:	e002      	b.n	8001ba6 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f005 faee 	bl	8007196 <HAL_PCD_DataInStageCallback>
 8001bba:	e018      	b.n	8001bee <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	8bfb      	ldrh	r3, [r7, #30]
 8001bc2:	441a      	add	r2, r3
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	69da      	ldr	r2, [r3, #28]
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	441a      	add	r2, r3
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fe70 	bl	80038c0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001be0:	e005      	b.n	8001bee <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001be2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001be4:	461a      	mov	r2, r3
 8001be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f91b 	bl	8001e24 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f6ff ad17 	blt.w	800162e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3738      	adds	r7, #56	; 0x38
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b088      	sub	sp, #32
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	4613      	mov	r3, r2
 8001c16:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d07e      	beq.n	8001d20 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	3302      	adds	r3, #2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c4a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	8b7b      	ldrh	r3, [r7, #26]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d306      	bcc.n	8001c64 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	699a      	ldr	r2, [r3, #24]
 8001c5a:	8b7b      	ldrh	r3, [r7, #26]
 8001c5c:	1ad2      	subs	r2, r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	619a      	str	r2, [r3, #24]
 8001c62:	e002      	b.n	8001c6a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d123      	bne.n	8001cba <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c8c:	833b      	strh	r3, [r7, #24]
 8001c8e:	8b3b      	ldrh	r3, [r7, #24]
 8001c90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c94:	833b      	strh	r3, [r7, #24]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	441a      	add	r2, r3
 8001ca4:	8b3b      	ldrh	r3, [r7, #24]
 8001ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01f      	beq.n	8001d04 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cde:	82fb      	strh	r3, [r7, #22]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	441a      	add	r2, r3
 8001cee:	8afb      	ldrh	r3, [r7, #22]
 8001cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d04:	8b7b      	ldrh	r3, [r7, #26]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 8087 	beq.w	8001e1a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	6959      	ldr	r1, [r3, #20]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	891a      	ldrh	r2, [r3, #8]
 8001d18:	8b7b      	ldrh	r3, [r7, #26]
 8001d1a:	f003 f874 	bl	8004e06 <USB_ReadPMA>
 8001d1e:	e07c      	b.n	8001e1a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	3306      	adds	r3, #6
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d48:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	8b7b      	ldrh	r3, [r7, #26]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d306      	bcc.n	8001d62 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	699a      	ldr	r2, [r3, #24]
 8001d58:	8b7b      	ldrh	r3, [r7, #26]
 8001d5a:	1ad2      	subs	r2, r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	619a      	str	r2, [r3, #24]
 8001d60:	e002      	b.n	8001d68 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d123      	bne.n	8001db8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d8a:	83fb      	strh	r3, [r7, #30]
 8001d8c:	8bfb      	ldrh	r3, [r7, #30]
 8001d8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d92:	83fb      	strh	r3, [r7, #30]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	441a      	add	r2, r3
 8001da2:	8bfb      	ldrh	r3, [r7, #30]
 8001da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d11f      	bne.n	8001e02 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ddc:	83bb      	strh	r3, [r7, #28]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	441a      	add	r2, r3
 8001dec:	8bbb      	ldrh	r3, [r7, #28]
 8001dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e02:	8b7b      	ldrh	r3, [r7, #26]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	6959      	ldr	r1, [r3, #20]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	895a      	ldrh	r2, [r3, #10]
 8001e14:	8b7b      	ldrh	r3, [r7, #26]
 8001e16:	f002 fff6 	bl	8004e06 <USB_ReadPMA>
    }
  }

  return count;
 8001e1a:	8b7b      	ldrh	r3, [r7, #26]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b094      	sub	sp, #80	; 0x50
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 8138 	beq.w	80020ae <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	3302      	adds	r3, #2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d907      	bls.n	8001e86 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001e7e:	1ad2      	subs	r2, r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	619a      	str	r2, [r3, #24]
 8001e84:	e002      	b.n	8001e8c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d12c      	bne.n	8001eee <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f005 f97b 	bl	8007196 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 823a 	beq.w	8002320 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec6:	82fb      	strh	r3, [r7, #22]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	441a      	add	r2, r3
 8001ed6:	8afb      	ldrh	r3, [r7, #22]
 8001ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	8013      	strh	r3, [r2, #0]
 8001eec:	e218      	b.n	8002320 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01f      	beq.n	8001f38 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f12:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	441a      	add	r2, r3
 8001f22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	f040 81ee 	bne.w	8002320 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f4c:	441a      	add	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f5a:	441a      	add	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d309      	bcc.n	8001f80 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f78:	1ad2      	subs	r2, r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	621a      	str	r2, [r3, #32]
 8001f7e:	e015      	b.n	8001fac <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8001f88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f8c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f96:	e009      	b.n	8001fac <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	785b      	ldrb	r3, [r3, #1]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d155      	bne.n	8002060 <HAL_PCD_EP_DB_Transmit+0x23c>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	4413      	add	r3, r2
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	011a      	lsls	r2, r3, #4
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d112      	bne.n	8002008 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	801a      	strh	r2, [r3, #0]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002000:	b29a      	uxth	r2, r3
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	e047      	b.n	8002098 <HAL_PCD_EP_DB_Transmit+0x274>
 8002008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800200a:	2b3e      	cmp	r3, #62	; 0x3e
 800200c:	d811      	bhi.n	8002032 <HAL_PCD_EP_DB_Transmit+0x20e>
 800200e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_PCD_EP_DB_Transmit+0x200>
 800201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002020:	3301      	adds	r3, #1
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002026:	b29b      	uxth	r3, r3
 8002028:	029b      	lsls	r3, r3, #10
 800202a:	b29a      	uxth	r2, r3
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	801a      	strh	r2, [r3, #0]
 8002030:	e032      	b.n	8002098 <HAL_PCD_EP_DB_Transmit+0x274>
 8002032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800203a:	f003 031f 	and.w	r3, r3, #31
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_PCD_EP_DB_Transmit+0x224>
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	3b01      	subs	r3, #1
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204a:	b29b      	uxth	r3, r3
 800204c:	029b      	lsls	r3, r3, #10
 800204e:	b29b      	uxth	r3, r3
 8002050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002058:	b29a      	uxth	r2, r3
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	801a      	strh	r2, [r3, #0]
 800205e:	e01b      	b.n	8002098 <HAL_PCD_EP_DB_Transmit+0x274>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	785b      	ldrb	r3, [r3, #1]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d117      	bne.n	8002098 <HAL_PCD_EP_DB_Transmit+0x274>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	4413      	add	r3, r2
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	011a      	lsls	r2, r3, #4
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	4413      	add	r3, r2
 800208a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800208e:	623b      	str	r3, [r7, #32]
 8002090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002092:	b29a      	uxth	r2, r3
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	6959      	ldr	r1, [r3, #20]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	891a      	ldrh	r2, [r3, #8]
 80020a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	f002 fe68 	bl	8004d7c <USB_WritePMA>
 80020ac:	e138      	b.n	8002320 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	3306      	adds	r3, #6
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d307      	bcc.n	80020f6 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020ee:	1ad2      	subs	r2, r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	619a      	str	r2, [r3, #24]
 80020f4:	e002      	b.n	80020fc <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d12e      	bne.n	8002162 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f005 f843 	bl	8007196 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 8102 	bne.w	8002320 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002136:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	441a      	add	r2, r3
 8002148:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800214c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215c:	b29b      	uxth	r3, r3
 800215e:	8013      	strh	r3, [r2, #0]
 8002160:	e0de      	b.n	8002320 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d11f      	bne.n	80021ac <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	b29b      	uxth	r3, r3
 800217e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002186:	867b      	strh	r3, [r7, #50]	; 0x32
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	441a      	add	r2, r3
 8002196:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800219c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	f040 80b4 	bne.w	8002320 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021c0:	441a      	add	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021ce:	441a      	add	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	6a1a      	ldr	r2, [r3, #32]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d309      	bcc.n	80021f4 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	6a1a      	ldr	r2, [r3, #32]
 80021ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ec:	1ad2      	subs	r2, r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	621a      	str	r2, [r3, #32]
 80021f2:	e015      	b.n	8002220 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80021fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002200:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800220a:	e009      	b.n	8002220 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2200      	movs	r2, #0
 8002216:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	643b      	str	r3, [r7, #64]	; 0x40
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	785b      	ldrb	r3, [r3, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d155      	bne.n	80022da <HAL_PCD_EP_DB_Transmit+0x4b6>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	63bb      	str	r3, [r7, #56]	; 0x38
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223c:	b29b      	uxth	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002242:	4413      	add	r3, r2
 8002244:	63bb      	str	r3, [r7, #56]	; 0x38
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	011a      	lsls	r2, r3, #4
 800224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224e:	4413      	add	r3, r2
 8002250:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
 8002256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002258:	2b00      	cmp	r3, #0
 800225a:	d112      	bne.n	8002282 <HAL_PCD_EP_DB_Transmit+0x45e>
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002266:	b29a      	uxth	r2, r3
 8002268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226a:	801a      	strh	r2, [r3, #0]
 800226c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800227a:	b29a      	uxth	r2, r3
 800227c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227e:	801a      	strh	r2, [r3, #0]
 8002280:	e044      	b.n	800230c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002284:	2b3e      	cmp	r3, #62	; 0x3e
 8002286:	d811      	bhi.n	80022ac <HAL_PCD_EP_DB_Transmit+0x488>
 8002288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800228a:	085b      	lsrs	r3, r3, #1
 800228c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800228e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <HAL_PCD_EP_DB_Transmit+0x47a>
 8002298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800229a:	3301      	adds	r3, #1
 800229c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800229e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	029b      	lsls	r3, r3, #10
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a8:	801a      	strh	r2, [r3, #0]
 80022aa:	e02f      	b.n	800230c <HAL_PCD_EP_DB_Transmit+0x4e8>
 80022ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <HAL_PCD_EP_DB_Transmit+0x49e>
 80022bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022be:	3b01      	subs	r3, #1
 80022c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	029b      	lsls	r3, r3, #10
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d6:	801a      	strh	r2, [r3, #0]
 80022d8:	e018      	b.n	800230c <HAL_PCD_EP_DB_Transmit+0x4e8>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	785b      	ldrb	r3, [r3, #1]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d114      	bne.n	800230c <HAL_PCD_EP_DB_Transmit+0x4e8>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f0:	4413      	add	r3, r2
 80022f2:	643b      	str	r3, [r7, #64]	; 0x40
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	011a      	lsls	r2, r3, #4
 80022fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022fc:	4413      	add	r3, r2
 80022fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002306:	b29a      	uxth	r2, r3
 8002308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	6959      	ldr	r1, [r3, #20]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	895a      	ldrh	r2, [r3, #10]
 8002318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800231a:	b29b      	uxth	r3, r3
 800231c:	f002 fd2e 	bl	8004d7c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800233a:	82bb      	strh	r3, [r7, #20]
 800233c:	8abb      	ldrh	r3, [r7, #20]
 800233e:	f083 0310 	eor.w	r3, r3, #16
 8002342:	82bb      	strh	r3, [r7, #20]
 8002344:	8abb      	ldrh	r3, [r7, #20]
 8002346:	f083 0320 	eor.w	r3, r3, #32
 800234a:	82bb      	strh	r3, [r7, #20]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	441a      	add	r2, r3
 800235a:	8abb      	ldrh	r3, [r7, #20]
 800235c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800236c:	b29b      	uxth	r3, r3
 800236e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3750      	adds	r7, #80	; 0x50
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800237a:	b480      	push	{r7}
 800237c:	b087      	sub	sp, #28
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	607b      	str	r3, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	817b      	strh	r3, [r7, #10]
 8002388:	4613      	mov	r3, r2
 800238a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800238c:	897b      	ldrh	r3, [r7, #10]
 800238e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00b      	beq.n	80023b0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002398:	897b      	ldrh	r3, [r7, #10]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e009      	b.n	80023c4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023b0:	897a      	ldrh	r2, [r7, #10]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4413      	add	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80023c4:	893b      	ldrh	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d107      	bne.n	80023da <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2200      	movs	r2, #0
 80023ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	80da      	strh	r2, [r3, #6]
 80023d8:	e00b      	b.n	80023f2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2201      	movs	r2, #1
 80023de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0c1b      	lsrs	r3, r3, #16
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e26c      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8087 	beq.w	800252e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002420:	4b92      	ldr	r3, [pc, #584]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b04      	cmp	r3, #4
 800242a:	d00c      	beq.n	8002446 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800242c:	4b8f      	ldr	r3, [pc, #572]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d112      	bne.n	800245e <HAL_RCC_OscConfig+0x5e>
 8002438:	4b8c      	ldr	r3, [pc, #560]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002444:	d10b      	bne.n	800245e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002446:	4b89      	ldr	r3, [pc, #548]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d06c      	beq.n	800252c <HAL_RCC_OscConfig+0x12c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d168      	bne.n	800252c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e246      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x76>
 8002468:	4b80      	ldr	r3, [pc, #512]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a7f      	ldr	r2, [pc, #508]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800246e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	e02e      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x98>
 800247e:	4b7b      	ldr	r3, [pc, #492]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a7a      	ldr	r2, [pc, #488]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b78      	ldr	r3, [pc, #480]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a77      	ldr	r2, [pc, #476]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e01d      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0xbc>
 80024a2:	4b72      	ldr	r3, [pc, #456]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a71      	ldr	r2, [pc, #452]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b6f      	ldr	r3, [pc, #444]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6e      	ldr	r2, [pc, #440]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0xd4>
 80024bc:	4b6b      	ldr	r3, [pc, #428]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6a      	ldr	r2, [pc, #424]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b68      	ldr	r3, [pc, #416]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a67      	ldr	r2, [pc, #412]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe f8f6 	bl	80006cc <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7fe f8f2 	bl	80006cc <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e1fa      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b5d      	ldr	r3, [pc, #372]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0xe4>
 8002502:	e014      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe f8e2 	bl	80006cc <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7fe f8de 	bl	80006cc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1e6      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x10c>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d063      	beq.n	8002602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800253a:	4b4c      	ldr	r3, [pc, #304]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002546:	4b49      	ldr	r3, [pc, #292]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b08      	cmp	r3, #8
 8002550:	d11c      	bne.n	800258c <HAL_RCC_OscConfig+0x18c>
 8002552:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d116      	bne.n	800258c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	4b43      	ldr	r3, [pc, #268]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_RCC_OscConfig+0x176>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e1ba      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b3d      	ldr	r3, [pc, #244]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4939      	ldr	r1, [pc, #228]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	e03a      	b.n	8002602 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe f897 	bl	80006cc <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe f893 	bl	80006cc <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e19b      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	4b2d      	ldr	r3, [pc, #180]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4927      	ldr	r1, [pc, #156]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
 80025d4:	e015      	b.n	8002602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe f876 	bl	80006cc <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e4:	f7fe f872 	bl	80006cc <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e17a      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d03a      	beq.n	8002684 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d019      	beq.n	800264a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261c:	f7fe f856 	bl	80006cc <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe f852 	bl	80006cc <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e15a      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <HAL_RCC_OscConfig+0x26c>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002642:	2001      	movs	r0, #1
 8002644:	f000 faa6 	bl	8002b94 <RCC_Delay>
 8002648:	e01c      	b.n	8002684 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002650:	f7fe f83c 	bl	80006cc <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002656:	e00f      	b.n	8002678 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002658:	f7fe f838 	bl	80006cc <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d908      	bls.n	8002678 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e140      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	42420000 	.word	0x42420000
 8002674:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	4b9e      	ldr	r3, [pc, #632]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e9      	bne.n	8002658 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a6 	beq.w	80027de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b97      	ldr	r3, [pc, #604]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10d      	bne.n	80026be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	4b94      	ldr	r3, [pc, #592]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4a93      	ldr	r2, [pc, #588]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	61d3      	str	r3, [r2, #28]
 80026ae:	4b91      	ldr	r3, [pc, #580]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b8e      	ldr	r3, [pc, #568]	; (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d118      	bne.n	80026fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b8b      	ldr	r3, [pc, #556]	; (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a8a      	ldr	r2, [pc, #552]	; (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7fd fff9 	bl	80006cc <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026de:	f7fd fff5 	bl	80006cc <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b64      	cmp	r3, #100	; 0x64
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0fd      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b81      	ldr	r3, [pc, #516]	; (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x312>
 8002704:	4b7b      	ldr	r3, [pc, #492]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a7a      	ldr	r2, [pc, #488]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	e02d      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x334>
 800271a:	4b76      	ldr	r3, [pc, #472]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a75      	ldr	r2, [pc, #468]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	4b73      	ldr	r3, [pc, #460]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a72      	ldr	r2, [pc, #456]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6213      	str	r3, [r2, #32]
 8002732:	e01c      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b05      	cmp	r3, #5
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_OscConfig+0x356>
 800273c:	4b6d      	ldr	r3, [pc, #436]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a6c      	ldr	r2, [pc, #432]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4a69      	ldr	r2, [pc, #420]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6213      	str	r3, [r2, #32]
 8002754:	e00b      	b.n	800276e <HAL_RCC_OscConfig+0x36e>
 8002756:	4b67      	ldr	r3, [pc, #412]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a66      	ldr	r2, [pc, #408]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6213      	str	r3, [r2, #32]
 8002762:	4b64      	ldr	r3, [pc, #400]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4a63      	ldr	r2, [pc, #396]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d015      	beq.n	80027a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7fd ffa9 	bl	80006cc <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7fd ffa5 	bl	80006cc <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0ab      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002794:	4b57      	ldr	r3, [pc, #348]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ee      	beq.n	800277e <HAL_RCC_OscConfig+0x37e>
 80027a0:	e014      	b.n	80027cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7fd ff93 	bl	80006cc <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7fd ff8f 	bl	80006cc <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e095      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c0:	4b4c      	ldr	r3, [pc, #304]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1ee      	bne.n	80027aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a47      	ldr	r2, [pc, #284]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8081 	beq.w	80028ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e8:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d061      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d146      	bne.n	800288a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fc:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <HAL_RCC_OscConfig+0x4fc>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fd ff63 	bl	80006cc <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280a:	f7fd ff5f 	bl	80006cc <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e067      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281c:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002830:	d108      	bne.n	8002844 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002832:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	492d      	ldr	r1, [pc, #180]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002844:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a19      	ldr	r1, [r3, #32]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	430b      	orrs	r3, r1
 8002856:	4927      	ldr	r1, [pc, #156]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <HAL_RCC_OscConfig+0x4fc>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fd ff33 	bl	80006cc <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7fd ff2f 	bl	80006cc <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e037      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800287c:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x46a>
 8002888:	e02f      	b.n	80028ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_RCC_OscConfig+0x4fc>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fd ff1c 	bl	80006cc <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fd ff18 	bl	80006cc <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e020      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x498>
 80028b6:	e018      	b.n	80028ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e013      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_OscConfig+0x4f4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d106      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40007000 	.word	0x40007000
 80028fc:	42420060 	.word	0x42420060

08002900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0d0      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b6a      	ldr	r3, [pc, #424]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d910      	bls.n	8002944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 0207 	bic.w	r2, r3, #7
 800292a:	4965      	ldr	r1, [pc, #404]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0b8      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d020      	beq.n	8002992 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800295c:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4a58      	ldr	r2, [pc, #352]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002966:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002974:	4b53      	ldr	r3, [pc, #332]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a52      	ldr	r2, [pc, #328]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800297e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002980:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	494d      	ldr	r1, [pc, #308]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d040      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d115      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e07f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	4b41      	ldr	r3, [pc, #260]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e073      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	4b3d      	ldr	r3, [pc, #244]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e06b      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029de:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4936      	ldr	r1, [pc, #216]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f0:	f7fd fe6c 	bl	80006cc <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7fd fe68 	bl	80006cc <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e053      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 020c 	and.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1eb      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d210      	bcs.n	8002a50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 0207 	bic.w	r2, r3, #7
 8002a36:	4922      	ldr	r1, [pc, #136]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e032      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4916      	ldr	r1, [pc, #88]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	490e      	ldr	r1, [pc, #56]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a8e:	f000 f821 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002a92:	4602      	mov	r2, r0
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	490a      	ldr	r1, [pc, #40]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa0:	5ccb      	ldrb	r3, [r1, r3]
 8002aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa6:	4a09      	ldr	r2, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x1cc>)
 8002aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1d0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fd fdca 	bl	8000648 <HAL_InitTick>

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40022000 	.word	0x40022000
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	08008098 	.word	0x08008098
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	20000004 	.word	0x20000004

08002ad4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad4:	b490      	push	{r4, r7}
 8002ad6:	b08a      	sub	sp, #40	; 0x28
 8002ad8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ada:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002adc:	1d3c      	adds	r4, r7, #4
 8002ade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ae4:	f240 2301 	movw	r3, #513	; 0x201
 8002ae8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d002      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0x40>
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d003      	beq.n	8002b1a <HAL_RCC_GetSysClockFreq+0x46>
 8002b12:	e02d      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b16:	623b      	str	r3, [r7, #32]
      break;
 8002b18:	e02d      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	0c9b      	lsrs	r3, r3, #18
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b26:	4413      	add	r3, r2
 8002b28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b2c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d013      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	0c5b      	lsrs	r3, r3, #17
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b46:	4413      	add	r3, r2
 8002b48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b52:	fb02 f203 	mul.w	r2, r2, r3
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	e004      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	623b      	str	r3, [r7, #32]
      break;
 8002b6e:	e002      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b72:	623b      	str	r3, [r7, #32]
      break;
 8002b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b76:	6a3b      	ldr	r3, [r7, #32]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3728      	adds	r7, #40	; 0x28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc90      	pop	{r4, r7}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	08008040 	.word	0x08008040
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	007a1200 	.word	0x007a1200
 8002b90:	003d0900 	.word	0x003d0900

08002b94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <RCC_Delay+0x34>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <RCC_Delay+0x38>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	0a5b      	lsrs	r3, r3, #9
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bb0:	bf00      	nop
  }
  while (Delay --);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1e5a      	subs	r2, r3, #1
 8002bb6:	60fa      	str	r2, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f9      	bne.n	8002bb0 <RCC_Delay+0x1c>
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	10624dd3 	.word	0x10624dd3

08002bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d07d      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002bec:	2300      	movs	r3, #0
 8002bee:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf0:	4b4f      	ldr	r3, [pc, #316]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10d      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfc:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	4a4b      	ldr	r2, [pc, #300]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c06:	61d3      	str	r3, [r2, #28]
 8002c08:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c14:	2301      	movs	r3, #1
 8002c16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	4b46      	ldr	r3, [pc, #280]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d118      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c24:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a42      	ldr	r2, [pc, #264]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c30:	f7fd fd4c 	bl	80006cc <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	e008      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c38:	f7fd fd48 	bl	80006cc <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e06d      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c56:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d02e      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d027      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c74:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c7e:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c84:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c8a:	4a29      	ldr	r2, [pc, #164]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d014      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7fd fd17 	bl	80006cc <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7fd fd13 	bl	80006cc <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e036      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ee      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc4:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4917      	ldr	r1, [pc, #92]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	4a13      	ldr	r2, [pc, #76]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	490b      	ldr	r1, [pc, #44]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	4904      	ldr	r1, [pc, #16]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40007000 	.word	0x40007000
 8002d38:	42420440 	.word	0x42420440

08002d3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	f107 0014 	add.w	r0, r7, #20
 8002d4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	b004      	add	sp, #16
 8002d5a:	4770      	bx	lr

08002d5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002d6c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002d70:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002d90:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002d94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	4013      	ands	r3, r2
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	f107 0014 	add.w	r0, r7, #20
 8002de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	b004      	add	sp, #16
 8002e12:	4770      	bx	lr

08002e14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b09b      	sub	sp, #108	; 0x6c
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	78db      	ldrb	r3, [r3, #3]
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d81f      	bhi.n	8002e86 <USB_ActivateEndpoint+0x72>
 8002e46:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <USB_ActivateEndpoint+0x38>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002e5d 	.word	0x08002e5d
 8002e50:	08002e79 	.word	0x08002e79
 8002e54:	08002e8f 	.word	0x08002e8f
 8002e58:	08002e6b 	.word	0x08002e6b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002e5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e64:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002e68:	e012      	b.n	8002e90 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002e6a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e6e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002e72:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002e76:	e00b      	b.n	8002e90 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002e78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e80:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002e84:	e004      	b.n	8002e90 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002e8c:	e000      	b.n	8002e90 <USB_ActivateEndpoint+0x7c>
      break;
 8002e8e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	441a      	add	r2, r3
 8002ee0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	7b1b      	ldrb	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f040 8149 	bne.w	8003194 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8084 	beq.w	8003014 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	011a      	lsls	r2, r3, #4
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	88db      	ldrh	r3, [r3, #6]
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	81fb      	strh	r3, [r7, #14]
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01b      	beq.n	8002f90 <USB_ActivateEndpoint+0x17c>
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	81bb      	strh	r3, [r7, #12]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	441a      	add	r2, r3
 8002f7a:	89bb      	ldrh	r3, [r7, #12]
 8002f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	78db      	ldrb	r3, [r3, #3]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d020      	beq.n	8002fda <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fae:	813b      	strh	r3, [r7, #8]
 8002fb0:	893b      	ldrh	r3, [r7, #8]
 8002fb2:	f083 0320 	eor.w	r3, r3, #32
 8002fb6:	813b      	strh	r3, [r7, #8]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	441a      	add	r2, r3
 8002fc2:	893b      	ldrh	r3, [r7, #8]
 8002fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	8013      	strh	r3, [r2, #0]
 8002fd8:	e27f      	b.n	80034da <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ff0:	817b      	strh	r3, [r7, #10]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	441a      	add	r2, r3
 8002ffc:	897b      	ldrh	r3, [r7, #10]
 8002ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300e:	b29b      	uxth	r3, r3
 8003010:	8013      	strh	r3, [r2, #0]
 8003012:	e262      	b.n	80034da <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301e:	b29b      	uxth	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	4413      	add	r3, r2
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	011a      	lsls	r2, r3, #4
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003030:	4413      	add	r3, r2
 8003032:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	88db      	ldrh	r3, [r3, #6]
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	b29b      	uxth	r3, r3
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003046:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003052:	b29b      	uxth	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	4413      	add	r3, r2
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	011a      	lsls	r2, r3, #4
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	4413      	add	r3, r2
 8003066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800306a:	623b      	str	r3, [r7, #32]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d112      	bne.n	800309a <USB_ActivateEndpoint+0x286>
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800307e:	b29a      	uxth	r2, r3
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	801a      	strh	r2, [r3, #0]
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800308e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003092:	b29a      	uxth	r2, r3
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	801a      	strh	r2, [r3, #0]
 8003098:	e02f      	b.n	80030fa <USB_ActivateEndpoint+0x2e6>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b3e      	cmp	r3, #62	; 0x3e
 80030a0:	d813      	bhi.n	80030ca <USB_ActivateEndpoint+0x2b6>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	663b      	str	r3, [r7, #96]	; 0x60
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <USB_ActivateEndpoint+0x2a8>
 80030b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030b8:	3301      	adds	r3, #1
 80030ba:	663b      	str	r3, [r7, #96]	; 0x60
 80030bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030be:	b29b      	uxth	r3, r3
 80030c0:	029b      	lsls	r3, r3, #10
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	801a      	strh	r2, [r3, #0]
 80030c8:	e017      	b.n	80030fa <USB_ActivateEndpoint+0x2e6>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	663b      	str	r3, [r7, #96]	; 0x60
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <USB_ActivateEndpoint+0x2d0>
 80030de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030e0:	3b01      	subs	r3, #1
 80030e2:	663b      	str	r3, [r7, #96]	; 0x60
 80030e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	029b      	lsls	r3, r3, #10
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	83fb      	strh	r3, [r7, #30]
 8003108:	8bfb      	ldrh	r3, [r7, #30]
 800310a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d01b      	beq.n	800314a <USB_ActivateEndpoint+0x336>
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	b29b      	uxth	r3, r3
 8003120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003128:	83bb      	strh	r3, [r7, #28]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	441a      	add	r2, r3
 8003134:	8bbb      	ldrh	r3, [r7, #28]
 8003136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800313a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800313e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003146:	b29b      	uxth	r3, r3
 8003148:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	837b      	strh	r3, [r7, #26]
 8003162:	8b7b      	ldrh	r3, [r7, #26]
 8003164:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003168:	837b      	strh	r3, [r7, #26]
 800316a:	8b7b      	ldrh	r3, [r7, #26]
 800316c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003170:	837b      	strh	r3, [r7, #26]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	441a      	add	r2, r3
 800317c:	8b7b      	ldrh	r3, [r7, #26]
 800317e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318e:	b29b      	uxth	r3, r3
 8003190:	8013      	strh	r3, [r2, #0]
 8003192:	e1a2      	b.n	80034da <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031aa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80031bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80031c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031da:	b29b      	uxth	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e0:	4413      	add	r3, r2
 80031e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	011a      	lsls	r2, r3, #4
 80031ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031f2:	657b      	str	r3, [r7, #84]	; 0x54
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	891b      	ldrh	r3, [r3, #8]
 80031f8:	085b      	lsrs	r3, r3, #1
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003202:	801a      	strh	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	653b      	str	r3, [r7, #80]	; 0x50
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320e:	b29b      	uxth	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003214:	4413      	add	r3, r2
 8003216:	653b      	str	r3, [r7, #80]	; 0x50
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	011a      	lsls	r2, r3, #4
 800321e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003220:	4413      	add	r3, r2
 8003222:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	895b      	ldrh	r3, [r3, #10]
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	b29b      	uxth	r3, r3
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003236:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	785b      	ldrb	r3, [r3, #1]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 8091 	bne.w	8003364 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003250:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d01b      	beq.n	8003292 <USB_ActivateEndpoint+0x47e>
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003270:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	441a      	add	r2, r3
 800327c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800327e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003286:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800328a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328e:	b29b      	uxth	r3, r3
 8003290:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	873b      	strh	r3, [r7, #56]	; 0x38
 80032a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01b      	beq.n	80032e2 <USB_ActivateEndpoint+0x4ce>
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	441a      	add	r2, r3
 80032cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032de:	b29b      	uxth	r3, r3
 80032e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80032fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80032fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003300:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003302:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003304:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003308:	86bb      	strh	r3, [r7, #52]	; 0x34
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	441a      	add	r2, r3
 8003314:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800331a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800331e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003326:	b29b      	uxth	r3, r3
 8003328:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003340:	867b      	strh	r3, [r7, #50]	; 0x32
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	441a      	add	r2, r3
 800334c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800334e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335e:	b29b      	uxth	r3, r3
 8003360:	8013      	strh	r3, [r2, #0]
 8003362:	e0ba      	b.n	80034da <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003374:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01d      	beq.n	80033bc <USB_ActivateEndpoint+0x5a8>
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	b29b      	uxth	r3, r3
 800338e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003396:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	441a      	add	r2, r3
 80033a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80033cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01d      	beq.n	8003414 <USB_ActivateEndpoint+0x600>
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	441a      	add	r2, r3
 80033fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800340c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003410:	b29b      	uxth	r3, r3
 8003412:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	78db      	ldrb	r3, [r3, #3]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d024      	beq.n	8003466 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003432:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003436:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800343a:	f083 0320 	eor.w	r3, r3, #32
 800343e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	441a      	add	r2, r3
 800344c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003460:	b29b      	uxth	r3, r3
 8003462:	8013      	strh	r3, [r2, #0]
 8003464:	e01d      	b.n	80034a2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	441a      	add	r2, r3
 800348a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	441a      	add	r2, r3
 80034c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80034c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80034da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80034de:	4618      	mov	r0, r3
 80034e0:	376c      	adds	r7, #108	; 0x6c
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b08d      	sub	sp, #52	; 0x34
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	7b1b      	ldrb	r3, [r3, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f040 808e 	bne.w	8003618 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	785b      	ldrb	r3, [r3, #1]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d044      	beq.n	800358e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	81bb      	strh	r3, [r7, #12]
 8003512:	89bb      	ldrh	r3, [r7, #12]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01b      	beq.n	8003554 <USB_DeactivateEndpoint+0x6c>
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	817b      	strh	r3, [r7, #10]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	897b      	ldrh	r3, [r7, #10]
 8003540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800354c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003550:	b29b      	uxth	r3, r3
 8003552:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800356a:	813b      	strh	r3, [r7, #8]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	441a      	add	r2, r3
 8003576:	893b      	ldrh	r3, [r7, #8]
 8003578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800357c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003588:	b29b      	uxth	r3, r3
 800358a:	8013      	strh	r3, [r2, #0]
 800358c:	e192      	b.n	80038b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	827b      	strh	r3, [r7, #18]
 800359c:	8a7b      	ldrh	r3, [r7, #18]
 800359e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d01b      	beq.n	80035de <USB_DeactivateEndpoint+0xf6>
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035bc:	823b      	strh	r3, [r7, #16]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	441a      	add	r2, r3
 80035c8:	8a3b      	ldrh	r3, [r7, #16]
 80035ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035da:	b29b      	uxth	r3, r3
 80035dc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f4:	81fb      	strh	r3, [r7, #14]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	441a      	add	r2, r3
 8003600:	89fb      	ldrh	r3, [r7, #14]
 8003602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800360a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800360e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003612:	b29b      	uxth	r3, r3
 8003614:	8013      	strh	r3, [r2, #0]
 8003616:	e14d      	b.n	80038b4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	785b      	ldrb	r3, [r3, #1]
 800361c:	2b00      	cmp	r3, #0
 800361e:	f040 80a5 	bne.w	800376c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	843b      	strh	r3, [r7, #32]
 8003630:	8c3b      	ldrh	r3, [r7, #32]
 8003632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01b      	beq.n	8003672 <USB_DeactivateEndpoint+0x18a>
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003650:	83fb      	strh	r3, [r7, #30]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	441a      	add	r2, r3
 800365c:	8bfb      	ldrh	r3, [r7, #30]
 800365e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800366a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800366e:	b29b      	uxth	r3, r3
 8003670:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	83bb      	strh	r3, [r7, #28]
 8003680:	8bbb      	ldrh	r3, [r7, #28]
 8003682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d01b      	beq.n	80036c2 <USB_DeactivateEndpoint+0x1da>
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a0:	837b      	strh	r3, [r7, #26]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	441a      	add	r2, r3
 80036ac:	8b7b      	ldrh	r3, [r7, #26]
 80036ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036be:	b29b      	uxth	r3, r3
 80036c0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d8:	833b      	strh	r3, [r7, #24]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	441a      	add	r2, r3
 80036e4:	8b3b      	ldrh	r3, [r7, #24]
 80036e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800370c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003710:	82fb      	strh	r3, [r7, #22]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	441a      	add	r2, r3
 800371c:	8afb      	ldrh	r3, [r7, #22]
 800371e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800372a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800372e:	b29b      	uxth	r3, r3
 8003730:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003748:	82bb      	strh	r3, [r7, #20]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	441a      	add	r2, r3
 8003754:	8abb      	ldrh	r3, [r7, #20]
 8003756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800375a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800375e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003766:	b29b      	uxth	r3, r3
 8003768:	8013      	strh	r3, [r2, #0]
 800376a:	e0a3      	b.n	80038b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800377a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800377c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01b      	beq.n	80037bc <USB_DeactivateEndpoint+0x2d4>
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	441a      	add	r2, r3
 80037a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80037a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80037ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01b      	beq.n	800380c <USB_DeactivateEndpoint+0x324>
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ea:	853b      	strh	r3, [r7, #40]	; 0x28
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	441a      	add	r2, r3
 80037f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003804:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003808:	b29b      	uxth	r3, r3
 800380a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	b29b      	uxth	r3, r3
 800381a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003822:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	441a      	add	r2, r3
 800382e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800383c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003840:	b29b      	uxth	r3, r3
 8003842:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	b29b      	uxth	r3, r3
 8003852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800385a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	441a      	add	r2, r3
 8003866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800386c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003878:	b29b      	uxth	r3, r3
 800387a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	847b      	strh	r3, [r7, #34]	; 0x22
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	441a      	add	r2, r3
 800389e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3734      	adds	r7, #52	; 0x34
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b0c4      	sub	sp, #272	; 0x110
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	6018      	str	r0, [r3, #0]
 80038ca:	463b      	mov	r3, r7
 80038cc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038ce:	463b      	mov	r3, r7
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	f040 8557 	bne.w	8004388 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80038da:	463b      	mov	r3, r7
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	463b      	mov	r3, r7
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d905      	bls.n	80038f6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80038ea:	463b      	mov	r3, r7
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80038f4:	e004      	b.n	8003900 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80038f6:	463b      	mov	r3, r7
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003900:	463b      	mov	r3, r7
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	7b1b      	ldrb	r3, [r3, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d12c      	bne.n	8003964 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800390a:	463b      	mov	r3, r7
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6959      	ldr	r1, [r3, #20]
 8003910:	463b      	mov	r3, r7
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	88da      	ldrh	r2, [r3, #6]
 8003916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800391a:	b29b      	uxth	r3, r3
 800391c:	1d38      	adds	r0, r7, #4
 800391e:	6800      	ldr	r0, [r0, #0]
 8003920:	f001 fa2c 	bl	8004d7c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	1d3b      	adds	r3, r7, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003932:	b29b      	uxth	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	4413      	add	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	463b      	mov	r3, r7
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	011a      	lsls	r2, r3, #4
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	4413      	add	r3, r2
 8003948:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800394c:	f107 0310 	add.w	r3, r7, #16
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003956:	b29a      	uxth	r2, r3
 8003958:	f107 0310 	add.w	r3, r7, #16
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	801a      	strh	r2, [r3, #0]
 8003960:	f000 bcdd 	b.w	800431e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003964:	463b      	mov	r3, r7
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	78db      	ldrb	r3, [r3, #3]
 800396a:	2b02      	cmp	r3, #2
 800396c:	f040 8347 	bne.w	8003ffe <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003970:	463b      	mov	r3, r7
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6a1a      	ldr	r2, [r3, #32]
 8003976:	463b      	mov	r3, r7
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	429a      	cmp	r2, r3
 800397e:	f240 82eb 	bls.w	8003f58 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003982:	1d3b      	adds	r3, r7, #4
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	463b      	mov	r3, r7
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80039a0:	1d3b      	adds	r3, r7, #4
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	463b      	mov	r3, r7
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	441a      	add	r2, r3
 80039ae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80039b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80039be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80039c6:	463b      	mov	r3, r7
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a1a      	ldr	r2, [r3, #32]
 80039cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d0:	1ad2      	subs	r2, r2, r3
 80039d2:	463b      	mov	r3, r7
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	463b      	mov	r3, r7
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8159 	beq.w	8003ca6 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
 80039fa:	463b      	mov	r3, r7
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d164      	bne.n	8003ace <USB_EPStartXfer+0x20e>
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a18:	4413      	add	r3, r2
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	011a      	lsls	r2, r3, #4
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a26:	4413      	add	r3, r2
 8003a28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d112      	bne.n	8003a5c <USB_EPStartXfer+0x19c>
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a58:	801a      	strh	r2, [r3, #0]
 8003a5a:	e054      	b.n	8003b06 <USB_EPStartXfer+0x246>
 8003a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a60:	2b3e      	cmp	r3, #62	; 0x3e
 8003a62:	d817      	bhi.n	8003a94 <USB_EPStartXfer+0x1d4>
 8003a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <USB_EPStartXfer+0x1c4>
 8003a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	029b      	lsls	r3, r3, #10
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	e038      	b.n	8003b06 <USB_EPStartXfer+0x246>
 8003a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <USB_EPStartXfer+0x1f4>
 8003aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	029b      	lsls	r3, r3, #10
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	801a      	strh	r2, [r3, #0]
 8003acc:	e01b      	b.n	8003b06 <USB_EPStartXfer+0x246>
 8003ace:	463b      	mov	r3, r7
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	785b      	ldrb	r3, [r3, #1]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d116      	bne.n	8003b06 <USB_EPStartXfer+0x246>
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae6:	4413      	add	r3, r2
 8003ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8003aea:	463b      	mov	r3, r7
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	011a      	lsls	r2, r3, #4
 8003af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af4:	4413      	add	r3, r2
 8003af6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003afa:	633b      	str	r3, [r7, #48]	; 0x30
 8003afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003b06:	463b      	mov	r3, r7
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	895b      	ldrh	r3, [r3, #10]
 8003b0c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b10:	463b      	mov	r3, r7
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6959      	ldr	r1, [r3, #20]
 8003b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003b20:	1d38      	adds	r0, r7, #4
 8003b22:	6800      	ldr	r0, [r0, #0]
 8003b24:	f001 f92a 	bl	8004d7c <USB_WritePMA>
            ep->xfer_buff += len;
 8003b28:	463b      	mov	r3, r7
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b32:	441a      	add	r2, r3
 8003b34:	463b      	mov	r3, r7
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003b3a:	463b      	mov	r3, r7
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6a1a      	ldr	r2, [r3, #32]
 8003b40:	463b      	mov	r3, r7
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d909      	bls.n	8003b5e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6a1a      	ldr	r2, [r3, #32]
 8003b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b54:	1ad2      	subs	r2, r2, r3
 8003b56:	463b      	mov	r3, r7
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	621a      	str	r2, [r3, #32]
 8003b5c:	e008      	b.n	8003b70 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003b5e:	463b      	mov	r3, r7
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003b68:	463b      	mov	r3, r7
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b70:	463b      	mov	r3, r7
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d164      	bne.n	8003c44 <USB_EPStartXfer+0x384>
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	1d3b      	adds	r3, r7, #4
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	4413      	add	r3, r2
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	463b      	mov	r3, r7
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	011a      	lsls	r2, r3, #4
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d112      	bne.n	8003bd2 <USB_EPStartXfer+0x312>
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	801a      	strh	r2, [r3, #0]
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	801a      	strh	r2, [r3, #0]
 8003bd0:	e057      	b.n	8003c82 <USB_EPStartXfer+0x3c2>
 8003bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8003bd8:	d817      	bhi.n	8003c0a <USB_EPStartXfer+0x34a>
 8003bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <USB_EPStartXfer+0x33a>
 8003bf0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003bfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	029b      	lsls	r3, r3, #10
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	801a      	strh	r2, [r3, #0]
 8003c08:	e03b      	b.n	8003c82 <USB_EPStartXfer+0x3c2>
 8003c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d104      	bne.n	8003c2a <USB_EPStartXfer+0x36a>
 8003c20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c24:	3b01      	subs	r3, #1
 8003c26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	029b      	lsls	r3, r3, #10
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	801a      	strh	r2, [r3, #0]
 8003c42:	e01e      	b.n	8003c82 <USB_EPStartXfer+0x3c2>
 8003c44:	463b      	mov	r3, r7
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	785b      	ldrb	r3, [r3, #1]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d119      	bne.n	8003c82 <USB_EPStartXfer+0x3c2>
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
 8003c54:	1d3b      	adds	r3, r7, #4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	4413      	add	r3, r2
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
 8003c66:	463b      	mov	r3, r7
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	011a      	lsls	r2, r3, #4
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	4413      	add	r3, r2
 8003c72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c76:	623b      	str	r3, [r7, #32]
 8003c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003c82:	463b      	mov	r3, r7
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	891b      	ldrh	r3, [r3, #8]
 8003c88:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c8c:	463b      	mov	r3, r7
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6959      	ldr	r1, [r3, #20]
 8003c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003c9c:	1d38      	adds	r0, r7, #4
 8003c9e:	6800      	ldr	r0, [r0, #0]
 8003ca0:	f001 f86c 	bl	8004d7c <USB_WritePMA>
 8003ca4:	e33b      	b.n	800431e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	785b      	ldrb	r3, [r3, #1]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d164      	bne.n	8003d7a <USB_EPStartXfer+0x4ba>
 8003cb0:	1d3b      	adds	r3, r7, #4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb6:	1d3b      	adds	r3, r7, #4
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc4:	4413      	add	r3, r2
 8003cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc8:	463b      	mov	r3, r7
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	011a      	lsls	r2, r3, #4
 8003cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d112      	bne.n	8003d08 <USB_EPStartXfer+0x448>
 8003ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d04:	801a      	strh	r2, [r3, #0]
 8003d06:	e057      	b.n	8003db8 <USB_EPStartXfer+0x4f8>
 8003d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d0c:	2b3e      	cmp	r3, #62	; 0x3e
 8003d0e:	d817      	bhi.n	8003d40 <USB_EPStartXfer+0x480>
 8003d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d004      	beq.n	8003d30 <USB_EPStartXfer+0x470>
 8003d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	029b      	lsls	r3, r3, #10
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d3c:	801a      	strh	r2, [r3, #0]
 8003d3e:	e03b      	b.n	8003db8 <USB_EPStartXfer+0x4f8>
 8003d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <USB_EPStartXfer+0x4a0>
 8003d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	029b      	lsls	r3, r3, #10
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d76:	801a      	strh	r2, [r3, #0]
 8003d78:	e01e      	b.n	8003db8 <USB_EPStartXfer+0x4f8>
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d119      	bne.n	8003db8 <USB_EPStartXfer+0x4f8>
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	657b      	str	r3, [r7, #84]	; 0x54
 8003d8a:	1d3b      	adds	r3, r7, #4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d98:	4413      	add	r3, r2
 8003d9a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d9c:	463b      	mov	r3, r7
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	011a      	lsls	r2, r3, #4
 8003da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da6:	4413      	add	r3, r2
 8003da8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dac:	653b      	str	r3, [r7, #80]	; 0x50
 8003dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003db8:	463b      	mov	r3, r7
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	891b      	ldrh	r3, [r3, #8]
 8003dbe:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dc2:	463b      	mov	r3, r7
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6959      	ldr	r1, [r3, #20]
 8003dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003dd2:	1d38      	adds	r0, r7, #4
 8003dd4:	6800      	ldr	r0, [r0, #0]
 8003dd6:	f000 ffd1 	bl	8004d7c <USB_WritePMA>
            ep->xfer_buff += len;
 8003dda:	463b      	mov	r3, r7
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de4:	441a      	add	r2, r3
 8003de6:	463b      	mov	r3, r7
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003dec:	463b      	mov	r3, r7
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6a1a      	ldr	r2, [r3, #32]
 8003df2:	463b      	mov	r3, r7
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d909      	bls.n	8003e10 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6a1a      	ldr	r2, [r3, #32]
 8003e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e06:	1ad2      	subs	r2, r2, r3
 8003e08:	463b      	mov	r3, r7
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	621a      	str	r2, [r3, #32]
 8003e0e:	e008      	b.n	8003e22 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003e10:	463b      	mov	r3, r7
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	647b      	str	r3, [r7, #68]	; 0x44
 8003e28:	463b      	mov	r3, r7
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d164      	bne.n	8003efc <USB_EPStartXfer+0x63c>
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e46:	4413      	add	r3, r2
 8003e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e4a:	463b      	mov	r3, r7
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	011a      	lsls	r2, r3, #4
 8003e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e54:	4413      	add	r3, r2
 8003e56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d112      	bne.n	8003e8a <USB_EPStartXfer+0x5ca>
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	801a      	strh	r2, [r3, #0]
 8003e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e86:	801a      	strh	r2, [r3, #0]
 8003e88:	e054      	b.n	8003f34 <USB_EPStartXfer+0x674>
 8003e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e90:	d817      	bhi.n	8003ec2 <USB_EPStartXfer+0x602>
 8003e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d004      	beq.n	8003eb2 <USB_EPStartXfer+0x5f2>
 8003ea8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003eac:	3301      	adds	r3, #1
 8003eae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003eb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	029b      	lsls	r3, r3, #10
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	801a      	strh	r2, [r3, #0]
 8003ec0:	e038      	b.n	8003f34 <USB_EPStartXfer+0x674>
 8003ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <USB_EPStartXfer+0x622>
 8003ed8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003edc:	3b01      	subs	r3, #1
 8003ede:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ee2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	029b      	lsls	r3, r3, #10
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	801a      	strh	r2, [r3, #0]
 8003efa:	e01b      	b.n	8003f34 <USB_EPStartXfer+0x674>
 8003efc:	463b      	mov	r3, r7
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	785b      	ldrb	r3, [r3, #1]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d116      	bne.n	8003f34 <USB_EPStartXfer+0x674>
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f14:	4413      	add	r3, r2
 8003f16:	647b      	str	r3, [r7, #68]	; 0x44
 8003f18:	463b      	mov	r3, r7
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	011a      	lsls	r2, r3, #4
 8003f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f22:	4413      	add	r3, r2
 8003f24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f28:	643b      	str	r3, [r7, #64]	; 0x40
 8003f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f34:	463b      	mov	r3, r7
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	895b      	ldrh	r3, [r3, #10]
 8003f3a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f3e:	463b      	mov	r3, r7
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6959      	ldr	r1, [r3, #20]
 8003f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003f4e:	1d38      	adds	r0, r7, #4
 8003f50:	6800      	ldr	r0, [r0, #0]
 8003f52:	f000 ff13 	bl	8004d7c <USB_WritePMA>
 8003f56:	e1e2      	b.n	800431e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003f58:	463b      	mov	r3, r7
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	463b      	mov	r3, r7
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	463b      	mov	r3, r7
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	663b      	str	r3, [r7, #96]	; 0x60
 8003fac:	1d3b      	adds	r3, r7, #4
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fba:	4413      	add	r3, r2
 8003fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003fbe:	463b      	mov	r3, r7
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	011a      	lsls	r2, r3, #4
 8003fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc8:	4413      	add	r3, r2
 8003fca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003fda:	463b      	mov	r3, r7
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	891b      	ldrh	r3, [r3, #8]
 8003fe0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003fe4:	463b      	mov	r3, r7
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6959      	ldr	r1, [r3, #20]
 8003fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003ff4:	1d38      	adds	r0, r7, #4
 8003ff6:	6800      	ldr	r0, [r0, #0]
 8003ff8:	f000 fec0 	bl	8004d7c <USB_WritePMA>
 8003ffc:	e18f      	b.n	800431e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003ffe:	1d3b      	adds	r3, r7, #4
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	463b      	mov	r3, r7
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	b29b      	uxth	r3, r3
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 808f 	beq.w	8004138 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004020:	463b      	mov	r3, r7
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	785b      	ldrb	r3, [r3, #1]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d164      	bne.n	80040f4 <USB_EPStartXfer+0x834>
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	673b      	str	r3, [r7, #112]	; 0x70
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004038:	b29b      	uxth	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800403e:	4413      	add	r3, r2
 8004040:	673b      	str	r3, [r7, #112]	; 0x70
 8004042:	463b      	mov	r3, r7
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	011a      	lsls	r2, r3, #4
 800404a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800404c:	4413      	add	r3, r2
 800404e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004052:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004058:	2b00      	cmp	r3, #0
 800405a:	d112      	bne.n	8004082 <USB_EPStartXfer+0x7c2>
 800405c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b29b      	uxth	r3, r3
 8004062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004066:	b29a      	uxth	r2, r3
 8004068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407a:	b29a      	uxth	r2, r3
 800407c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	e054      	b.n	800412c <USB_EPStartXfer+0x86c>
 8004082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004086:	2b3e      	cmp	r3, #62	; 0x3e
 8004088:	d817      	bhi.n	80040ba <USB_EPStartXfer+0x7fa>
 800408a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <USB_EPStartXfer+0x7ea>
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a4:	3301      	adds	r3, #1
 80040a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	029b      	lsls	r3, r3, #10
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	e038      	b.n	800412c <USB_EPStartXfer+0x86c>
 80040ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80040c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <USB_EPStartXfer+0x81a>
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	3b01      	subs	r3, #1
 80040d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040de:	b29b      	uxth	r3, r3
 80040e0:	029b      	lsls	r3, r3, #10
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f0:	801a      	strh	r2, [r3, #0]
 80040f2:	e01b      	b.n	800412c <USB_EPStartXfer+0x86c>
 80040f4:	463b      	mov	r3, r7
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d116      	bne.n	800412c <USB_EPStartXfer+0x86c>
 80040fe:	1d3b      	adds	r3, r7, #4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004106:	b29b      	uxth	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800410c:	4413      	add	r3, r2
 800410e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004110:	463b      	mov	r3, r7
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	011a      	lsls	r2, r3, #4
 8004118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800411a:	4413      	add	r3, r2
 800411c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004120:	677b      	str	r3, [r7, #116]	; 0x74
 8004122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004126:	b29a      	uxth	r2, r3
 8004128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800412a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800412c:	463b      	mov	r3, r7
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	895b      	ldrh	r3, [r3, #10]
 8004132:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004136:	e097      	b.n	8004268 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004138:	463b      	mov	r3, r7
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d168      	bne.n	8004214 <USB_EPStartXfer+0x954>
 8004142:	1d3b      	adds	r3, r7, #4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004152:	b29b      	uxth	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800415a:	4413      	add	r3, r2
 800415c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004160:	463b      	mov	r3, r7
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	011a      	lsls	r2, r3, #4
 8004168:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800416c:	4413      	add	r3, r2
 800416e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004172:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d112      	bne.n	80041a2 <USB_EPStartXfer+0x8e2>
 800417c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004186:	b29a      	uxth	r2, r3
 8004188:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800418a:	801a      	strh	r2, [r3, #0]
 800418c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b29b      	uxth	r3, r3
 8004192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419a:	b29a      	uxth	r2, r3
 800419c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	e05d      	b.n	800425e <USB_EPStartXfer+0x99e>
 80041a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a6:	2b3e      	cmp	r3, #62	; 0x3e
 80041a8:	d817      	bhi.n	80041da <USB_EPStartXfer+0x91a>
 80041aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ae:	085b      	lsrs	r3, r3, #1
 80041b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d004      	beq.n	80041ca <USB_EPStartXfer+0x90a>
 80041c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041c4:	3301      	adds	r3, #1
 80041c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	029b      	lsls	r3, r3, #10
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041d6:	801a      	strh	r2, [r3, #0]
 80041d8:	e041      	b.n	800425e <USB_EPStartXfer+0x99e>
 80041da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d104      	bne.n	80041fa <USB_EPStartXfer+0x93a>
 80041f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041f4:	3b01      	subs	r3, #1
 80041f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041fe:	b29b      	uxth	r3, r3
 8004200:	029b      	lsls	r3, r3, #10
 8004202:	b29b      	uxth	r3, r3
 8004204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800420c:	b29a      	uxth	r2, r3
 800420e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	e024      	b.n	800425e <USB_EPStartXfer+0x99e>
 8004214:	463b      	mov	r3, r7
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d11f      	bne.n	800425e <USB_EPStartXfer+0x99e>
 800421e:	1d3b      	adds	r3, r7, #4
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004226:	1d3b      	adds	r3, r7, #4
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422e:	b29b      	uxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004236:	4413      	add	r3, r2
 8004238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800423c:	463b      	mov	r3, r7
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	011a      	lsls	r2, r3, #4
 8004244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004248:	4413      	add	r3, r2
 800424a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800424e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004256:	b29a      	uxth	r2, r3
 8004258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800425c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800425e:	463b      	mov	r3, r7
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	891b      	ldrh	r3, [r3, #8]
 8004264:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004268:	463b      	mov	r3, r7
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6959      	ldr	r1, [r3, #20]
 800426e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004272:	b29b      	uxth	r3, r3
 8004274:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004278:	1d38      	adds	r0, r7, #4
 800427a:	6800      	ldr	r0, [r0, #0]
 800427c:	f000 fd7e 	bl	8004d7c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004280:	463b      	mov	r3, r7
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	785b      	ldrb	r3, [r3, #1]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d122      	bne.n	80042d0 <USB_EPStartXfer+0xa10>
 800428a:	1d3b      	adds	r3, r7, #4
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	463b      	mov	r3, r7
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	b29b      	uxth	r3, r3
 800429c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80042a8:	1d3b      	adds	r3, r7, #4
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	463b      	mov	r3, r7
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	441a      	add	r2, r3
 80042b6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80042ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	8013      	strh	r3, [r2, #0]
 80042ce:	e026      	b.n	800431e <USB_EPStartXfer+0xa5e>
 80042d0:	463b      	mov	r3, r7
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d121      	bne.n	800431e <USB_EPStartXfer+0xa5e>
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	463b      	mov	r3, r7
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80042f8:	1d3b      	adds	r3, r7, #4
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	463b      	mov	r3, r7
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	441a      	add	r2, r3
 8004306:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800430a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800430e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004312:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800431a:	b29b      	uxth	r3, r3
 800431c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	463b      	mov	r3, r7
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f107 020e 	add.w	r2, r7, #14
 8004334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433c:	8013      	strh	r3, [r2, #0]
 800433e:	f107 030e 	add.w	r3, r7, #14
 8004342:	f107 020e 	add.w	r2, r7, #14
 8004346:	8812      	ldrh	r2, [r2, #0]
 8004348:	f082 0210 	eor.w	r2, r2, #16
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	f107 030e 	add.w	r3, r7, #14
 8004352:	f107 020e 	add.w	r2, r7, #14
 8004356:	8812      	ldrh	r2, [r2, #0]
 8004358:	f082 0220 	eor.w	r2, r2, #32
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	1d3b      	adds	r3, r7, #4
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	463b      	mov	r3, r7
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	441a      	add	r2, r3
 800436c:	f107 030e 	add.w	r3, r7, #14
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800437a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800437e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004382:	b29b      	uxth	r3, r3
 8004384:	8013      	strh	r3, [r2, #0]
 8004386:	e3b5      	b.n	8004af4 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004388:	463b      	mov	r3, r7
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	7b1b      	ldrb	r3, [r3, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f040 8090 	bne.w	80044b4 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004394:	463b      	mov	r3, r7
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	463b      	mov	r3, r7
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d90e      	bls.n	80043c2 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80043a4:	463b      	mov	r3, r7
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80043ae:	463b      	mov	r3, r7
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699a      	ldr	r2, [r3, #24]
 80043b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b8:	1ad2      	subs	r2, r2, r3
 80043ba:	463b      	mov	r3, r7
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	619a      	str	r2, [r3, #24]
 80043c0:	e008      	b.n	80043d4 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80043c2:	463b      	mov	r3, r7
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80043cc:	463b      	mov	r3, r7
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2200      	movs	r2, #0
 80043d2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043dc:	1d3b      	adds	r3, r7, #4
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80043ec:	4413      	add	r3, r2
 80043ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043f2:	463b      	mov	r3, r7
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	011a      	lsls	r2, r3, #4
 80043fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80043fe:	4413      	add	r3, r2
 8004400:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004404:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d116      	bne.n	800443e <USB_EPStartXfer+0xb7e>
 8004410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800441c:	b29a      	uxth	r2, r3
 800441e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004422:	801a      	strh	r2, [r3, #0]
 8004424:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004434:	b29a      	uxth	r2, r3
 8004436:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	e32c      	b.n	8004a98 <USB_EPStartXfer+0x11d8>
 800443e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004442:	2b3e      	cmp	r3, #62	; 0x3e
 8004444:	d818      	bhi.n	8004478 <USB_EPStartXfer+0xbb8>
 8004446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800444a:	085b      	lsrs	r3, r3, #1
 800444c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d004      	beq.n	8004466 <USB_EPStartXfer+0xba6>
 800445c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004460:	3301      	adds	r3, #1
 8004462:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004466:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800446a:	b29b      	uxth	r3, r3
 800446c:	029b      	lsls	r3, r3, #10
 800446e:	b29a      	uxth	r2, r3
 8004470:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004474:	801a      	strh	r2, [r3, #0]
 8004476:	e30f      	b.n	8004a98 <USB_EPStartXfer+0x11d8>
 8004478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	2b00      	cmp	r3, #0
 800448c:	d104      	bne.n	8004498 <USB_EPStartXfer+0xbd8>
 800448e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004492:	3b01      	subs	r3, #1
 8004494:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004498:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800449c:	b29b      	uxth	r3, r3
 800449e:	029b      	lsls	r3, r3, #10
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044b0:	801a      	strh	r2, [r3, #0]
 80044b2:	e2f1      	b.n	8004a98 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80044b4:	463b      	mov	r3, r7
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	78db      	ldrb	r3, [r3, #3]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	f040 818f 	bne.w	80047de <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80044c0:	463b      	mov	r3, r7
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	785b      	ldrb	r3, [r3, #1]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d175      	bne.n	80045b6 <USB_EPStartXfer+0xcf6>
 80044ca:	1d3b      	adds	r3, r7, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044d2:	1d3b      	adds	r3, r7, #4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044da:	b29b      	uxth	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044e2:	4413      	add	r3, r2
 80044e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044e8:	463b      	mov	r3, r7
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	011a      	lsls	r2, r3, #4
 80044f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044f4:	4413      	add	r3, r2
 80044f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044fe:	463b      	mov	r3, r7
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <USB_EPStartXfer+0xc76>
 8004508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004514:	b29a      	uxth	r2, r3
 8004516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800452c:	b29a      	uxth	r2, r3
 800452e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004532:	801a      	strh	r2, [r3, #0]
 8004534:	e065      	b.n	8004602 <USB_EPStartXfer+0xd42>
 8004536:	463b      	mov	r3, r7
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b3e      	cmp	r3, #62	; 0x3e
 800453e:	d81a      	bhi.n	8004576 <USB_EPStartXfer+0xcb6>
 8004540:	463b      	mov	r3, r7
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800454c:	463b      	mov	r3, r7
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <USB_EPStartXfer+0xca4>
 800455a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800455e:	3301      	adds	r3, #1
 8004560:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004564:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004568:	b29b      	uxth	r3, r3
 800456a:	029b      	lsls	r3, r3, #10
 800456c:	b29a      	uxth	r2, r3
 800456e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004572:	801a      	strh	r2, [r3, #0]
 8004574:	e045      	b.n	8004602 <USB_EPStartXfer+0xd42>
 8004576:	463b      	mov	r3, r7
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004582:	463b      	mov	r3, r7
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	2b00      	cmp	r3, #0
 800458e:	d104      	bne.n	800459a <USB_EPStartXfer+0xcda>
 8004590:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004594:	3b01      	subs	r3, #1
 8004596:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800459a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800459e:	b29b      	uxth	r3, r3
 80045a0:	029b      	lsls	r3, r3, #10
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045b2:	801a      	strh	r2, [r3, #0]
 80045b4:	e025      	b.n	8004602 <USB_EPStartXfer+0xd42>
 80045b6:	463b      	mov	r3, r7
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d120      	bne.n	8004602 <USB_EPStartXfer+0xd42>
 80045c0:	1d3b      	adds	r3, r7, #4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045c8:	1d3b      	adds	r3, r7, #4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045d8:	4413      	add	r3, r2
 80045da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045de:	463b      	mov	r3, r7
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	011a      	lsls	r2, r3, #4
 80045e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045ea:	4413      	add	r3, r2
 80045ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045f4:	463b      	mov	r3, r7
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	1d3b      	adds	r3, r7, #4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800460a:	463b      	mov	r3, r7
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d175      	bne.n	8004700 <USB_EPStartXfer+0xe40>
 8004614:	1d3b      	adds	r3, r7, #4
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800461c:	1d3b      	adds	r3, r7, #4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004624:	b29b      	uxth	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800462c:	4413      	add	r3, r2
 800462e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004632:	463b      	mov	r3, r7
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	011a      	lsls	r2, r3, #4
 800463a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800463e:	4413      	add	r3, r2
 8004640:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004648:	463b      	mov	r3, r7
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d116      	bne.n	8004680 <USB_EPStartXfer+0xdc0>
 8004652:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800465e:	b29a      	uxth	r2, r3
 8004660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004664:	801a      	strh	r2, [r3, #0]
 8004666:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	b29b      	uxth	r3, r3
 800466e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004676:	b29a      	uxth	r2, r3
 8004678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800467c:	801a      	strh	r2, [r3, #0]
 800467e:	e061      	b.n	8004744 <USB_EPStartXfer+0xe84>
 8004680:	463b      	mov	r3, r7
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b3e      	cmp	r3, #62	; 0x3e
 8004688:	d81a      	bhi.n	80046c0 <USB_EPStartXfer+0xe00>
 800468a:	463b      	mov	r3, r7
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004696:	463b      	mov	r3, r7
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <USB_EPStartXfer+0xdee>
 80046a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a8:	3301      	adds	r3, #1
 80046aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	029b      	lsls	r3, r3, #10
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046bc:	801a      	strh	r2, [r3, #0]
 80046be:	e041      	b.n	8004744 <USB_EPStartXfer+0xe84>
 80046c0:	463b      	mov	r3, r7
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046cc:	463b      	mov	r3, r7
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d104      	bne.n	80046e4 <USB_EPStartXfer+0xe24>
 80046da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046de:	3b01      	subs	r3, #1
 80046e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	029b      	lsls	r3, r3, #10
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046fc:	801a      	strh	r2, [r3, #0]
 80046fe:	e021      	b.n	8004744 <USB_EPStartXfer+0xe84>
 8004700:	463b      	mov	r3, r7
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	785b      	ldrb	r3, [r3, #1]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d11c      	bne.n	8004744 <USB_EPStartXfer+0xe84>
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004712:	b29b      	uxth	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800471a:	4413      	add	r3, r2
 800471c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004720:	463b      	mov	r3, r7
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	011a      	lsls	r2, r3, #4
 8004728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800472c:	4413      	add	r3, r2
 800472e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004732:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004736:	463b      	mov	r3, r7
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	b29a      	uxth	r2, r3
 800473e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004742:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004744:	463b      	mov	r3, r7
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 81a4 	beq.w	8004a98 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004750:	1d3b      	adds	r3, r7, #4
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	463b      	mov	r3, r7
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004764:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <USB_EPStartXfer+0xebc>
 8004770:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10d      	bne.n	8004798 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800477c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 8187 	bne.w	8004a98 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800478a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	f040 8180 	bne.w	8004a98 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	463b      	mov	r3, r7
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80047b6:	1d3b      	adds	r3, r7, #4
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	463b      	mov	r3, r7
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	441a      	add	r2, r3
 80047c4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80047c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047d8:	b29b      	uxth	r3, r3
 80047da:	8013      	strh	r3, [r2, #0]
 80047dc:	e15c      	b.n	8004a98 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80047de:	463b      	mov	r3, r7
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	78db      	ldrb	r3, [r3, #3]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	f040 8155 	bne.w	8004a94 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80047ea:	463b      	mov	r3, r7
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	463b      	mov	r3, r7
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d90e      	bls.n	8004818 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80047fa:	463b      	mov	r3, r7
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004804:	463b      	mov	r3, r7
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480e:	1ad2      	subs	r2, r2, r3
 8004810:	463b      	mov	r3, r7
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	619a      	str	r2, [r3, #24]
 8004816:	e008      	b.n	800482a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004818:	463b      	mov	r3, r7
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004822:	463b      	mov	r3, r7
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2200      	movs	r2, #0
 8004828:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800482a:	463b      	mov	r3, r7
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	785b      	ldrb	r3, [r3, #1]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d16f      	bne.n	8004914 <USB_EPStartXfer+0x1054>
 8004834:	1d3b      	adds	r3, r7, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800483c:	1d3b      	adds	r3, r7, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004844:	b29b      	uxth	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800484c:	4413      	add	r3, r2
 800484e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004852:	463b      	mov	r3, r7
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	011a      	lsls	r2, r3, #4
 800485a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800485e:	4413      	add	r3, r2
 8004860:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d116      	bne.n	800489e <USB_EPStartXfer+0xfde>
 8004870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800487c:	b29a      	uxth	r2, r3
 800487e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004894:	b29a      	uxth	r2, r3
 8004896:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800489a:	801a      	strh	r2, [r3, #0]
 800489c:	e05f      	b.n	800495e <USB_EPStartXfer+0x109e>
 800489e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a2:	2b3e      	cmp	r3, #62	; 0x3e
 80048a4:	d818      	bhi.n	80048d8 <USB_EPStartXfer+0x1018>
 80048a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d004      	beq.n	80048c6 <USB_EPStartXfer+0x1006>
 80048bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c0:	3301      	adds	r3, #1
 80048c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	029b      	lsls	r3, r3, #10
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048d4:	801a      	strh	r2, [r3, #0]
 80048d6:	e042      	b.n	800495e <USB_EPStartXfer+0x109e>
 80048d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <USB_EPStartXfer+0x1038>
 80048ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f2:	3b01      	subs	r3, #1
 80048f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	029b      	lsls	r3, r3, #10
 8004900:	b29b      	uxth	r3, r3
 8004902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800490a:	b29a      	uxth	r2, r3
 800490c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004910:	801a      	strh	r2, [r3, #0]
 8004912:	e024      	b.n	800495e <USB_EPStartXfer+0x109e>
 8004914:	463b      	mov	r3, r7
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	785b      	ldrb	r3, [r3, #1]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d11f      	bne.n	800495e <USB_EPStartXfer+0x109e>
 800491e:	1d3b      	adds	r3, r7, #4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004926:	1d3b      	adds	r3, r7, #4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800492e:	b29b      	uxth	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004936:	4413      	add	r3, r2
 8004938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800493c:	463b      	mov	r3, r7
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	011a      	lsls	r2, r3, #4
 8004944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004948:	4413      	add	r3, r2
 800494a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800494e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004956:	b29a      	uxth	r2, r3
 8004958:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800495c:	801a      	strh	r2, [r3, #0]
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004966:	463b      	mov	r3, r7
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	785b      	ldrb	r3, [r3, #1]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d16f      	bne.n	8004a50 <USB_EPStartXfer+0x1190>
 8004970:	1d3b      	adds	r3, r7, #4
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004978:	1d3b      	adds	r3, r7, #4
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004980:	b29b      	uxth	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004988:	4413      	add	r3, r2
 800498a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800498e:	463b      	mov	r3, r7
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	011a      	lsls	r2, r3, #4
 8004996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800499a:	4413      	add	r3, r2
 800499c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80049a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d116      	bne.n	80049da <USB_EPStartXfer+0x111a>
 80049ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049be:	801a      	strh	r2, [r3, #0]
 80049c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049d6:	801a      	strh	r2, [r3, #0]
 80049d8:	e05e      	b.n	8004a98 <USB_EPStartXfer+0x11d8>
 80049da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049de:	2b3e      	cmp	r3, #62	; 0x3e
 80049e0:	d818      	bhi.n	8004a14 <USB_EPStartXfer+0x1154>
 80049e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80049ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d004      	beq.n	8004a02 <USB_EPStartXfer+0x1142>
 80049f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049fc:	3301      	adds	r3, #1
 80049fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	029b      	lsls	r3, r3, #10
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a10:	801a      	strh	r2, [r3, #0]
 8004a12:	e041      	b.n	8004a98 <USB_EPStartXfer+0x11d8>
 8004a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <USB_EPStartXfer+0x1174>
 8004a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	029b      	lsls	r3, r3, #10
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a4c:	801a      	strh	r2, [r3, #0]
 8004a4e:	e023      	b.n	8004a98 <USB_EPStartXfer+0x11d8>
 8004a50:	463b      	mov	r3, r7
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d11e      	bne.n	8004a98 <USB_EPStartXfer+0x11d8>
 8004a5a:	1d3b      	adds	r3, r7, #4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a70:	463b      	mov	r3, r7
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	011a      	lsls	r2, r3, #4
 8004a78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a90:	801a      	strh	r2, [r3, #0]
 8004a92:	e001      	b.n	8004a98 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e02e      	b.n	8004af6 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a98:	1d3b      	adds	r3, r7, #4
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	463b      	mov	r3, r7
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004ab6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004aba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004abe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004ac2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004ac6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004aca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004ace:	1d3b      	adds	r3, r7, #4
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	463b      	mov	r3, r7
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d020      	beq.n	8004b54 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b28:	81bb      	strh	r3, [r7, #12]
 8004b2a:	89bb      	ldrh	r3, [r7, #12]
 8004b2c:	f083 0310 	eor.w	r3, r3, #16
 8004b30:	81bb      	strh	r3, [r7, #12]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	441a      	add	r2, r3
 8004b3c:	89bb      	ldrh	r3, [r7, #12]
 8004b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	8013      	strh	r3, [r2, #0]
 8004b52:	e01f      	b.n	8004b94 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	81fb      	strh	r3, [r7, #14]
 8004b6c:	89fb      	ldrh	r3, [r7, #14]
 8004b6e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b72:	81fb      	strh	r3, [r7, #14]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	441a      	add	r2, r3
 8004b7e:	89fb      	ldrh	r3, [r7, #14]
 8004b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr

08004ba0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	7b1b      	ldrb	r3, [r3, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f040 809d 	bne.w	8004cee <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d04c      	beq.n	8004c56 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	823b      	strh	r3, [r7, #16]
 8004bca:	8a3b      	ldrh	r3, [r7, #16]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01b      	beq.n	8004c0c <USB_EPClearStall+0x6c>
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bea:	81fb      	strh	r3, [r7, #14]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	441a      	add	r2, r3
 8004bf6:	89fb      	ldrh	r3, [r7, #14]
 8004bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	78db      	ldrb	r3, [r3, #3]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d06c      	beq.n	8004cee <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c2a:	81bb      	strh	r3, [r7, #12]
 8004c2c:	89bb      	ldrh	r3, [r7, #12]
 8004c2e:	f083 0320 	eor.w	r3, r3, #32
 8004c32:	81bb      	strh	r3, [r7, #12]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	441a      	add	r2, r3
 8004c3e:	89bb      	ldrh	r3, [r7, #12]
 8004c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	8013      	strh	r3, [r2, #0]
 8004c54:	e04b      	b.n	8004cee <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	82fb      	strh	r3, [r7, #22]
 8004c64:	8afb      	ldrh	r3, [r7, #22]
 8004c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01b      	beq.n	8004ca6 <USB_EPClearStall+0x106>
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c84:	82bb      	strh	r3, [r7, #20]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	441a      	add	r2, r3
 8004c90:	8abb      	ldrh	r3, [r7, #20]
 8004c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbc:	827b      	strh	r3, [r7, #18]
 8004cbe:	8a7b      	ldrh	r3, [r7, #18]
 8004cc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cc4:	827b      	strh	r3, [r7, #18]
 8004cc6:	8a7b      	ldrh	r3, [r7, #18]
 8004cc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ccc:	827b      	strh	r3, [r7, #18]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	441a      	add	r2, r3
 8004cd8:	8a7b      	ldrh	r3, [r7, #18]
 8004cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr

08004cfa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	460b      	mov	r3, r1
 8004d04:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2280      	movs	r2, #128	; 0x80
 8004d10:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr

08004d48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr

08004d66 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b08d      	sub	sp, #52	; 0x34
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	4611      	mov	r1, r2
 8004d88:	461a      	mov	r2, r3
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	80fb      	strh	r3, [r7, #6]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004d92:	88bb      	ldrh	r3, [r7, #4]
 8004d94:	3301      	adds	r3, #1
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	005a      	lsls	r2, r3, #1
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db4:	e01e      	b.n	8004df4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	3302      	adds	r3, #2
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	3302      	adds	r3, #2
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	3301      	adds	r3, #1
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	3b01      	subs	r3, #1
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1dd      	bne.n	8004db6 <USB_WritePMA+0x3a>
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	3734      	adds	r7, #52	; 0x34
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b08b      	sub	sp, #44	; 0x2c
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	4611      	mov	r1, r2
 8004e12:	461a      	mov	r2, r3
 8004e14:	460b      	mov	r3, r1
 8004e16:	80fb      	strh	r3, [r7, #6]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004e1c:	88bb      	ldrh	r3, [r7, #4]
 8004e1e:	085b      	lsrs	r3, r3, #1
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	005a      	lsls	r2, r3, #1
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e38:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3e:	e01b      	b.n	8004e78 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	3302      	adds	r3, #2
 8004e4c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	0a1b      	lsrs	r3, r3, #8
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	3302      	adds	r3, #2
 8004e70:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	3b01      	subs	r3, #1
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e0      	bne.n	8004e40 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004e7e:	88bb      	ldrh	r3, [r7, #4]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	701a      	strb	r2, [r3, #0]
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	372c      	adds	r7, #44	; 0x2c
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	7c1b      	ldrb	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d115      	bne.n	8004ee8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	2181      	movs	r1, #129	; 0x81
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f002 fa4a 	bl	800735e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f002 fa40 	bl	800735e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004ee6:	e012      	b.n	8004f0e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ee8:	2340      	movs	r3, #64	; 0x40
 8004eea:	2202      	movs	r2, #2
 8004eec:	2181      	movs	r1, #129	; 0x81
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f002 fa35 	bl	800735e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004efa:	2340      	movs	r3, #64	; 0x40
 8004efc:	2202      	movs	r2, #2
 8004efe:	2101      	movs	r1, #1
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f002 fa2c 	bl	800735e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f0e:	2308      	movs	r3, #8
 8004f10:	2203      	movs	r2, #3
 8004f12:	2182      	movs	r1, #130	; 0x82
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f002 fa22 	bl	800735e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f24:	f002 fb42 	bl	80075ac <USBD_static_malloc>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
 8004f3e:	e026      	b.n	8004f8e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f46:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	7c1b      	ldrb	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f74:	2101      	movs	r1, #1
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f002 fae2 	bl	8007540 <USBD_LL_PrepareReceive>
 8004f7c:	e007      	b.n	8004f8e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f84:	2340      	movs	r3, #64	; 0x40
 8004f86:	2101      	movs	r1, #1
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f002 fad9 	bl	8007540 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004fa8:	2181      	movs	r1, #129	; 0x81
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f002 f9fd 	bl	80073aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f002 f9f6 	bl	80073aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004fc6:	2182      	movs	r1, #130	; 0x82
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f002 f9ee 	bl	80073aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00e      	beq.n	8004ffc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f002 fae8 	bl	80075c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b086      	sub	sp, #24
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005016:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800502c:	2b00      	cmp	r3, #0
 800502e:	d039      	beq.n	80050a4 <USBD_CDC_Setup+0x9e>
 8005030:	2b20      	cmp	r3, #32
 8005032:	d17f      	bne.n	8005134 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	88db      	ldrh	r3, [r3, #6]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d029      	beq.n	8005090 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	b25b      	sxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	da11      	bge.n	800506a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005052:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	88d2      	ldrh	r2, [r2, #6]
 8005058:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800505a:	6939      	ldr	r1, [r7, #16]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	88db      	ldrh	r3, [r3, #6]
 8005060:	461a      	mov	r2, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f001 fa09 	bl	800647a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005068:	e06b      	b.n	8005142 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	785a      	ldrb	r2, [r3, #1]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	88db      	ldrh	r3, [r3, #6]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005080:	6939      	ldr	r1, [r7, #16]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	88db      	ldrh	r3, [r3, #6]
 8005086:	461a      	mov	r2, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 fa24 	bl	80064d6 <USBD_CtlPrepareRx>
      break;
 800508e:	e058      	b.n	8005142 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	7850      	ldrb	r0, [r2, #1]
 800509c:	2200      	movs	r2, #0
 800509e:	6839      	ldr	r1, [r7, #0]
 80050a0:	4798      	blx	r3
      break;
 80050a2:	e04e      	b.n	8005142 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	785b      	ldrb	r3, [r3, #1]
 80050a8:	2b0b      	cmp	r3, #11
 80050aa:	d02e      	beq.n	800510a <USBD_CDC_Setup+0x104>
 80050ac:	2b0b      	cmp	r3, #11
 80050ae:	dc38      	bgt.n	8005122 <USBD_CDC_Setup+0x11c>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <USBD_CDC_Setup+0xb4>
 80050b4:	2b0a      	cmp	r3, #10
 80050b6:	d014      	beq.n	80050e2 <USBD_CDC_Setup+0xdc>
 80050b8:	e033      	b.n	8005122 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d107      	bne.n	80050d4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80050c4:	f107 030c 	add.w	r3, r7, #12
 80050c8:	2202      	movs	r2, #2
 80050ca:	4619      	mov	r1, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f001 f9d4 	bl	800647a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050d2:	e02e      	b.n	8005132 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80050d4:	6839      	ldr	r1, [r7, #0]
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f001 f965 	bl	80063a6 <USBD_CtlError>
            ret = USBD_FAIL;
 80050dc:	2302      	movs	r3, #2
 80050de:	75fb      	strb	r3, [r7, #23]
          break;
 80050e0:	e027      	b.n	8005132 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d107      	bne.n	80050fc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80050ec:	f107 030f 	add.w	r3, r7, #15
 80050f0:	2201      	movs	r2, #1
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f001 f9c0 	bl	800647a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050fa:	e01a      	b.n	8005132 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f001 f951 	bl	80063a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005104:	2302      	movs	r3, #2
 8005106:	75fb      	strb	r3, [r7, #23]
          break;
 8005108:	e013      	b.n	8005132 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005110:	2b03      	cmp	r3, #3
 8005112:	d00d      	beq.n	8005130 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f001 f945 	bl	80063a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800511c:	2302      	movs	r3, #2
 800511e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005120:	e006      	b.n	8005130 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f001 f93e 	bl	80063a6 <USBD_CtlError>
          ret = USBD_FAIL;
 800512a:	2302      	movs	r3, #2
 800512c:	75fb      	strb	r3, [r7, #23]
          break;
 800512e:	e000      	b.n	8005132 <USBD_CDC_Setup+0x12c>
          break;
 8005130:	bf00      	nop
      }
      break;
 8005132:	e006      	b.n	8005142 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005134:	6839      	ldr	r1, [r7, #0]
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f001 f935 	bl	80063a6 <USBD_CtlError>
      ret = USBD_FAIL;
 800513c:	2302      	movs	r3, #2
 800513e:	75fb      	strb	r3, [r7, #23]
      break;
 8005140:	bf00      	nop
  }

  return ret;
 8005142:	7dfb      	ldrb	r3, [r7, #23]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800515e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005166:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d03a      	beq.n	80051e8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005172:	78fa      	ldrb	r2, [r7, #3]
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	331c      	adds	r3, #28
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d029      	beq.n	80051dc <USBD_CDC_DataIn+0x90>
 8005188:	78fa      	ldrb	r2, [r7, #3]
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	331c      	adds	r3, #28
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	78f9      	ldrb	r1, [r7, #3]
 800519c:	68b8      	ldr	r0, [r7, #8]
 800519e:	460b      	mov	r3, r1
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	4403      	add	r3, r0
 80051a8:	3338      	adds	r3, #56	; 0x38
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80051b0:	fb03 f301 	mul.w	r3, r3, r1
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d110      	bne.n	80051dc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	331c      	adds	r3, #28
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80051ce:	78f9      	ldrb	r1, [r7, #3]
 80051d0:	2300      	movs	r3, #0
 80051d2:	2200      	movs	r2, #0
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f002 f990 	bl	80074fa <USBD_LL_Transmit>
 80051da:	e003      	b.n	80051e4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e000      	b.n	80051ea <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80051e8:	2302      	movs	r3, #2
  }
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	460b      	mov	r3, r1
 80051fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005204:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f002 f9bb 	bl	8007586 <USBD_LL_GetRxDataSize>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00d      	beq.n	800523e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005236:	4611      	mov	r1, r2
 8005238:	4798      	blx	r3

    return USBD_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	e000      	b.n	8005240 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800523e:	2302      	movs	r3, #2
  }
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005256:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800525e:	2b00      	cmp	r3, #0
 8005260:	d015      	beq.n	800528e <USBD_CDC_EP0_RxReady+0x46>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005268:	2bff      	cmp	r3, #255	; 0xff
 800526a:	d010      	beq.n	800528e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800527a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005282:	b292      	uxth	r2, r2
 8005284:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	22ff      	movs	r2, #255	; 0xff
 800528a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2243      	movs	r2, #67	; 0x43
 80052a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80052a6:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000094 	.word	0x20000094

080052b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2243      	movs	r2, #67	; 0x43
 80052c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80052c6:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000050 	.word	0x20000050

080052d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2243      	movs	r2, #67	; 0x43
 80052e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80052e6:	4b03      	ldr	r3, [pc, #12]	; (80052f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	200000d8 	.word	0x200000d8

080052f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	220a      	movs	r2, #10
 8005304:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005306:	4b03      	ldr	r3, [pc, #12]	; (8005314 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	2000000c 	.word	0x2000000c

08005318 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005322:	2302      	movs	r3, #2
 8005324:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005338:	7bfb      	ldrb	r3, [r7, #15]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	4613      	mov	r3, r2
 8005350:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005358:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005386:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01c      	beq.n	80053f0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d115      	bne.n	80053ec <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2181      	movs	r1, #129	; 0x81
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f002 f889 	bl	80074fa <USBD_LL_Transmit>

      return USBD_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	e002      	b.n	80053f2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80053f0:	2302      	movs	r3, #2
  }
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005408:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005410:	2b00      	cmp	r3, #0
 8005412:	d017      	beq.n	8005444 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	7c1b      	ldrb	r3, [r3, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005426:	2101      	movs	r1, #1
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f002 f889 	bl	8007540 <USBD_LL_PrepareReceive>
 800542e:	e007      	b.n	8005440 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005436:	2340      	movs	r3, #64	; 0x40
 8005438:	2101      	movs	r1, #1
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f002 f880 	bl	8007540 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	e000      	b.n	8005446 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005444:	2302      	movs	r3, #2
  }
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	4613      	mov	r3, r2
 800545a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005462:	2302      	movs	r3, #2
 8005464:	e01a      	b.n	800549c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	79fa      	ldrb	r2, [r7, #7]
 8005492:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f001 feed 	bl	8007274 <USBD_LL_Init>

  return USBD_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d006      	beq.n	80054c6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	73fb      	strb	r3, [r7, #15]
 80054c4:	e001      	b.n	80054ca <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80054c6:	2302      	movs	r3, #2
 80054c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f001 ff22 	bl	8007328 <USBD_LL_Start>

  return USBD_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr

08005502 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800550e:	2302      	movs	r3, #2
 8005510:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00c      	beq.n	8005536 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	4611      	mov	r1, r2
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005536:	7bfb      	ldrb	r3, [r7, #15]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	78fa      	ldrb	r2, [r7, #3]
 8005556:	4611      	mov	r1, r2
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3

  return USBD_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fed8 	bl	800632e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800558c:	461a      	mov	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800559a:	f003 031f 	and.w	r3, r3, #31
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d016      	beq.n	80055d0 <USBD_LL_SetupStage+0x6a>
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d81c      	bhi.n	80055e0 <USBD_LL_SetupStage+0x7a>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <USBD_LL_SetupStage+0x4a>
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d008      	beq.n	80055c0 <USBD_LL_SetupStage+0x5a>
 80055ae:	e017      	b.n	80055e0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f9cb 	bl	8005954 <USBD_StdDevReq>
      break;
 80055be:	e01a      	b.n	80055f6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fa2d 	bl	8005a28 <USBD_StdItfReq>
      break;
 80055ce:	e012      	b.n	80055f6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fa6d 	bl	8005ab8 <USBD_StdEPReq>
      break;
 80055de:	e00a      	b.n	80055f6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80055e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	4619      	mov	r1, r3
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f001 fefa 	bl	80073e8 <USBD_LL_StallEP>
      break;
 80055f4:	bf00      	nop
  }

  return USBD_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	460b      	mov	r3, r1
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800560e:	7afb      	ldrb	r3, [r7, #11]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d14b      	bne.n	80056ac <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800561a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005622:	2b03      	cmp	r3, #3
 8005624:	d134      	bne.n	8005690 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	429a      	cmp	r2, r3
 8005630:	d919      	bls.n	8005666 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	1ad2      	subs	r2, r2, r3
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005648:	429a      	cmp	r2, r3
 800564a:	d203      	bcs.n	8005654 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005650:	b29b      	uxth	r3, r3
 8005652:	e002      	b.n	800565a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005658:	b29b      	uxth	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 ff57 	bl	8006512 <USBD_CtlContinueRx>
 8005664:	e038      	b.n	80056d8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005678:	2b03      	cmp	r3, #3
 800567a:	d105      	bne.n	8005688 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 ff54 	bl	8006536 <USBD_CtlSendStatus>
 800568e:	e023      	b.n	80056d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005696:	2b05      	cmp	r3, #5
 8005698:	d11e      	bne.n	80056d8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80056a2:	2100      	movs	r1, #0
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f001 fe9f 	bl	80073e8 <USBD_LL_StallEP>
 80056aa:	e015      	b.n	80056d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00d      	beq.n	80056d4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d108      	bne.n	80056d4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	7afa      	ldrb	r2, [r7, #11]
 80056cc:	4611      	mov	r1, r2
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	4798      	blx	r3
 80056d2:	e001      	b.n	80056d8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80056d4:	2302      	movs	r3, #2
 80056d6:	e000      	b.n	80056da <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b086      	sub	sp, #24
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	460b      	mov	r3, r1
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80056f0:	7afb      	ldrb	r3, [r7, #11]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d17f      	bne.n	80057f6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3314      	adds	r3, #20
 80056fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005702:	2b02      	cmp	r3, #2
 8005704:	d15c      	bne.n	80057c0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	429a      	cmp	r2, r3
 8005710:	d915      	bls.n	800573e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	1ad2      	subs	r2, r2, r3
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	b29b      	uxth	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 fec1 	bl	80064b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005730:	2300      	movs	r3, #0
 8005732:	2200      	movs	r2, #0
 8005734:	2100      	movs	r1, #0
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f001 ff02 	bl	8007540 <USBD_LL_PrepareReceive>
 800573c:	e04e      	b.n	80057dc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	6912      	ldr	r2, [r2, #16]
 8005746:	fbb3 f1f2 	udiv	r1, r3, r2
 800574a:	fb02 f201 	mul.w	r2, r2, r1
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d11c      	bne.n	800578e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800575c:	429a      	cmp	r2, r3
 800575e:	d316      	bcc.n	800578e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800576a:	429a      	cmp	r2, r3
 800576c:	d20f      	bcs.n	800578e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800576e:	2200      	movs	r2, #0
 8005770:	2100      	movs	r1, #0
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fe9d 	bl	80064b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005780:	2300      	movs	r3, #0
 8005782:	2200      	movs	r2, #0
 8005784:	2100      	movs	r1, #0
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f001 feda 	bl	8007540 <USBD_LL_PrepareReceive>
 800578c:	e026      	b.n	80057dc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d105      	bne.n	80057b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80057b0:	2180      	movs	r1, #128	; 0x80
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f001 fe18 	bl	80073e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 fecf 	bl	800655c <USBD_CtlReceiveStatus>
 80057be:	e00d      	b.n	80057dc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d004      	beq.n	80057d4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80057d4:	2180      	movs	r1, #128	; 0x80
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f001 fe06 	bl	80073e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d11d      	bne.n	8005822 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f7ff fe81 	bl	80054ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80057f4:	e015      	b.n	8005822 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00d      	beq.n	800581e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005808:	2b03      	cmp	r3, #3
 800580a:	d108      	bne.n	800581e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	7afa      	ldrb	r2, [r7, #11]
 8005816:	4611      	mov	r1, r2
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	4798      	blx	r3
 800581c:	e001      	b.n	8005822 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800581e:	2302      	movs	r3, #2
 8005820:	e000      	b.n	8005824 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005834:	2340      	movs	r3, #64	; 0x40
 8005836:	2200      	movs	r2, #0
 8005838:	2100      	movs	r1, #0
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f001 fd8f 	bl	800735e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2240      	movs	r2, #64	; 0x40
 800584c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005850:	2340      	movs	r3, #64	; 0x40
 8005852:	2200      	movs	r2, #0
 8005854:	2180      	movs	r1, #128	; 0x80
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 fd81 	bl	800735e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2240      	movs	r2, #64	; 0x40
 8005866:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d009      	beq.n	80058a4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6852      	ldr	r2, [r2, #4]
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	4611      	mov	r1, r2
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
  }

  return USBD_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	460b      	mov	r3, r1
 80058b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	78fa      	ldrb	r2, [r7, #3]
 80058be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2204      	movs	r2, #4
 80058e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr

080058f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005902:	2b04      	cmp	r3, #4
 8005904:	d105      	bne.n	8005912 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800592c:	2b03      	cmp	r3, #3
 800592e:	d10b      	bne.n	8005948 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800596a:	2b40      	cmp	r3, #64	; 0x40
 800596c:	d005      	beq.n	800597a <USBD_StdDevReq+0x26>
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d84f      	bhi.n	8005a12 <USBD_StdDevReq+0xbe>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <USBD_StdDevReq+0x36>
 8005976:	2b20      	cmp	r3, #32
 8005978:	d14b      	bne.n	8005a12 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	4798      	blx	r3
      break;
 8005988:	e048      	b.n	8005a1c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	2b09      	cmp	r3, #9
 8005990:	d839      	bhi.n	8005a06 <USBD_StdDevReq+0xb2>
 8005992:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <USBD_StdDevReq+0x44>)
 8005994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005998:	080059e9 	.word	0x080059e9
 800599c:	080059fd 	.word	0x080059fd
 80059a0:	08005a07 	.word	0x08005a07
 80059a4:	080059f3 	.word	0x080059f3
 80059a8:	08005a07 	.word	0x08005a07
 80059ac:	080059cb 	.word	0x080059cb
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	08005a07 	.word	0x08005a07
 80059b8:	080059df 	.word	0x080059df
 80059bc:	080059d5 	.word	0x080059d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f9dc 	bl	8005d80 <USBD_GetDescriptor>
          break;
 80059c8:	e022      	b.n	8005a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fb3f 	bl	8006050 <USBD_SetAddress>
          break;
 80059d2:	e01d      	b.n	8005a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fb7e 	bl	80060d8 <USBD_SetConfig>
          break;
 80059dc:	e018      	b.n	8005a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fc07 	bl	80061f4 <USBD_GetConfig>
          break;
 80059e6:	e013      	b.n	8005a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fc37 	bl	800625e <USBD_GetStatus>
          break;
 80059f0:	e00e      	b.n	8005a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fc65 	bl	80062c4 <USBD_SetFeature>
          break;
 80059fa:	e009      	b.n	8005a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fc74 	bl	80062ec <USBD_ClrFeature>
          break;
 8005a04:	e004      	b.n	8005a10 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fccc 	bl	80063a6 <USBD_CtlError>
          break;
 8005a0e:	bf00      	nop
      }
      break;
 8005a10:	e004      	b.n	8005a1c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fcc6 	bl	80063a6 <USBD_CtlError>
      break;
 8005a1a:	bf00      	nop
  }

  return ret;
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop

08005a28 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a3e:	2b40      	cmp	r3, #64	; 0x40
 8005a40:	d005      	beq.n	8005a4e <USBD_StdItfReq+0x26>
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d82e      	bhi.n	8005aa4 <USBD_StdItfReq+0x7c>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <USBD_StdItfReq+0x26>
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d12a      	bne.n	8005aa4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a54:	3b01      	subs	r3, #1
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d81d      	bhi.n	8005a96 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	889b      	ldrh	r3, [r3, #4]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d813      	bhi.n	8005a8c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	6839      	ldr	r1, [r7, #0]
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	4798      	blx	r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	88db      	ldrh	r3, [r3, #6]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d110      	bne.n	8005aa0 <USBD_StdItfReq+0x78>
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10d      	bne.n	8005aa0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fd56 	bl	8006536 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005a8a:	e009      	b.n	8005aa0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005a8c:	6839      	ldr	r1, [r7, #0]
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fc89 	bl	80063a6 <USBD_CtlError>
          break;
 8005a94:	e004      	b.n	8005aa0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fc84 	bl	80063a6 <USBD_CtlError>
          break;
 8005a9e:	e000      	b.n	8005aa2 <USBD_StdItfReq+0x7a>
          break;
 8005aa0:	bf00      	nop
      }
      break;
 8005aa2:	e004      	b.n	8005aae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fc7d 	bl	80063a6 <USBD_CtlError>
      break;
 8005aac:	bf00      	nop
  }

  return USBD_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	889b      	ldrh	r3, [r3, #4]
 8005aca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d007      	beq.n	8005ae8 <USBD_StdEPReq+0x30>
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	f200 8146 	bhi.w	8005d6a <USBD_StdEPReq+0x2b2>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <USBD_StdEPReq+0x40>
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	f040 8141 	bne.w	8005d6a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	4798      	blx	r3
      break;
 8005af6:	e13d      	b.n	8005d74 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d10a      	bne.n	8005b1a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	4798      	blx	r3
 8005b12:	4603      	mov	r3, r0
 8005b14:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	e12d      	b.n	8005d76 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	785b      	ldrb	r3, [r3, #1]
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d007      	beq.n	8005b32 <USBD_StdEPReq+0x7a>
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	f300 811b 	bgt.w	8005d5e <USBD_StdEPReq+0x2a6>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d072      	beq.n	8005c12 <USBD_StdEPReq+0x15a>
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d03a      	beq.n	8005ba6 <USBD_StdEPReq+0xee>
 8005b30:	e115      	b.n	8005d5e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d002      	beq.n	8005b42 <USBD_StdEPReq+0x8a>
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d015      	beq.n	8005b6c <USBD_StdEPReq+0xb4>
 8005b40:	e02b      	b.n	8005b9a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00c      	beq.n	8005b62 <USBD_StdEPReq+0xaa>
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
 8005b4a:	2b80      	cmp	r3, #128	; 0x80
 8005b4c:	d009      	beq.n	8005b62 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005b4e:	7bbb      	ldrb	r3, [r7, #14]
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f001 fc48 	bl	80073e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005b58:	2180      	movs	r1, #128	; 0x80
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f001 fc44 	bl	80073e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b60:	e020      	b.n	8005ba4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fc1e 	bl	80063a6 <USBD_CtlError>
              break;
 8005b6a:	e01b      	b.n	8005ba4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	885b      	ldrh	r3, [r3, #2]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10e      	bne.n	8005b92 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005b74:	7bbb      	ldrb	r3, [r7, #14]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00b      	beq.n	8005b92 <USBD_StdEPReq+0xda>
 8005b7a:	7bbb      	ldrb	r3, [r7, #14]
 8005b7c:	2b80      	cmp	r3, #128	; 0x80
 8005b7e:	d008      	beq.n	8005b92 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	88db      	ldrh	r3, [r3, #6]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d104      	bne.n	8005b92 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005b88:	7bbb      	ldrb	r3, [r7, #14]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 fc2b 	bl	80073e8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fccf 	bl	8006536 <USBD_CtlSendStatus>

              break;
 8005b98:	e004      	b.n	8005ba4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005b9a:	6839      	ldr	r1, [r7, #0]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fc02 	bl	80063a6 <USBD_CtlError>
              break;
 8005ba2:	bf00      	nop
          }
          break;
 8005ba4:	e0e0      	b.n	8005d68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d002      	beq.n	8005bb6 <USBD_StdEPReq+0xfe>
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d015      	beq.n	8005be0 <USBD_StdEPReq+0x128>
 8005bb4:	e026      	b.n	8005c04 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bb6:	7bbb      	ldrb	r3, [r7, #14]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00c      	beq.n	8005bd6 <USBD_StdEPReq+0x11e>
 8005bbc:	7bbb      	ldrb	r3, [r7, #14]
 8005bbe:	2b80      	cmp	r3, #128	; 0x80
 8005bc0:	d009      	beq.n	8005bd6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005bc2:	7bbb      	ldrb	r3, [r7, #14]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 fc0e 	bl	80073e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005bcc:	2180      	movs	r1, #128	; 0x80
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 fc0a 	bl	80073e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bd4:	e01c      	b.n	8005c10 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fbe4 	bl	80063a6 <USBD_CtlError>
              break;
 8005bde:	e017      	b.n	8005c10 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	885b      	ldrh	r3, [r3, #2]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d112      	bne.n	8005c0e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 fc15 	bl	8007426 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fc9a 	bl	8006536 <USBD_CtlSendStatus>
              }
              break;
 8005c02:	e004      	b.n	8005c0e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fbcd 	bl	80063a6 <USBD_CtlError>
              break;
 8005c0c:	e000      	b.n	8005c10 <USBD_StdEPReq+0x158>
              break;
 8005c0e:	bf00      	nop
          }
          break;
 8005c10:	e0aa      	b.n	8005d68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d002      	beq.n	8005c22 <USBD_StdEPReq+0x16a>
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d032      	beq.n	8005c86 <USBD_StdEPReq+0x1ce>
 8005c20:	e097      	b.n	8005d52 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c22:	7bbb      	ldrb	r3, [r7, #14]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d007      	beq.n	8005c38 <USBD_StdEPReq+0x180>
 8005c28:	7bbb      	ldrb	r3, [r7, #14]
 8005c2a:	2b80      	cmp	r3, #128	; 0x80
 8005c2c:	d004      	beq.n	8005c38 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fbb8 	bl	80063a6 <USBD_CtlError>
                break;
 8005c36:	e091      	b.n	8005d5c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	da0b      	bge.n	8005c58 <USBD_StdEPReq+0x1a0>
 8005c40:	7bbb      	ldrb	r3, [r7, #14]
 8005c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	3310      	adds	r3, #16
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	4413      	add	r3, r2
 8005c54:	3304      	adds	r3, #4
 8005c56:	e00b      	b.n	8005c70 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3304      	adds	r3, #4
 8005c70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fbfb 	bl	800647a <USBD_CtlSendData>
              break;
 8005c84:	e06a      	b.n	8005d5c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005c86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	da11      	bge.n	8005cb2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c8e:	7bbb      	ldrb	r3, [r7, #14]
 8005c90:	f003 020f 	and.w	r2, r3, #15
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3318      	adds	r3, #24
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d117      	bne.n	8005cd8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fb7b 	bl	80063a6 <USBD_CtlError>
                  break;
 8005cb0:	e054      	b.n	8005d5c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005cb2:	7bbb      	ldrb	r3, [r7, #14]
 8005cb4:	f003 020f 	and.w	r2, r3, #15
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fb68 	bl	80063a6 <USBD_CtlError>
                  break;
 8005cd6:	e041      	b.n	8005d5c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	da0b      	bge.n	8005cf8 <USBD_StdEPReq+0x240>
 8005ce0:	7bbb      	ldrb	r3, [r7, #14]
 8005ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	3310      	adds	r3, #16
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	e00b      	b.n	8005d10 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cf8:	7bbb      	ldrb	r3, [r7, #14]
 8005cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	3304      	adds	r3, #4
 8005d10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d12:	7bbb      	ldrb	r3, [r7, #14]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <USBD_StdEPReq+0x266>
 8005d18:	7bbb      	ldrb	r3, [r7, #14]
 8005d1a:	2b80      	cmp	r3, #128	; 0x80
 8005d1c:	d103      	bne.n	8005d26 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e00e      	b.n	8005d44 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f001 fb9a 	bl	8007464 <USBD_LL_IsStallEP>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	e002      	b.n	8005d44 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2202      	movs	r2, #2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fb95 	bl	800647a <USBD_CtlSendData>
              break;
 8005d50:	e004      	b.n	8005d5c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fb26 	bl	80063a6 <USBD_CtlError>
              break;
 8005d5a:	bf00      	nop
          }
          break;
 8005d5c:	e004      	b.n	8005d68 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fb20 	bl	80063a6 <USBD_CtlError>
          break;
 8005d66:	bf00      	nop
      }
      break;
 8005d68:	e004      	b.n	8005d74 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fb1a 	bl	80063a6 <USBD_CtlError>
      break;
 8005d72:	bf00      	nop
  }

  return ret;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	885b      	ldrh	r3, [r3, #2]
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	2b06      	cmp	r3, #6
 8005da2:	f200 8128 	bhi.w	8005ff6 <USBD_GetDescriptor+0x276>
 8005da6:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <USBD_GetDescriptor+0x2c>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dc9 	.word	0x08005dc9
 8005db0:	08005de1 	.word	0x08005de1
 8005db4:	08005e21 	.word	0x08005e21
 8005db8:	08005ff7 	.word	0x08005ff7
 8005dbc:	08005ff7 	.word	0x08005ff7
 8005dc0:	08005f97 	.word	0x08005f97
 8005dc4:	08005fc3 	.word	0x08005fc3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	7c12      	ldrb	r2, [r2, #16]
 8005dd4:	f107 0108 	add.w	r1, r7, #8
 8005dd8:	4610      	mov	r0, r2
 8005dda:	4798      	blx	r3
 8005ddc:	60f8      	str	r0, [r7, #12]
      break;
 8005dde:	e112      	b.n	8006006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	7c1b      	ldrb	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10d      	bne.n	8005e04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	f107 0208 	add.w	r2, r7, #8
 8005df4:	4610      	mov	r0, r2
 8005df6:	4798      	blx	r3
 8005df8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	2202      	movs	r2, #2
 8005e00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e02:	e100      	b.n	8006006 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	f107 0208 	add.w	r2, r7, #8
 8005e10:	4610      	mov	r0, r2
 8005e12:	4798      	blx	r3
 8005e14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	701a      	strb	r2, [r3, #0]
      break;
 8005e1e:	e0f2      	b.n	8006006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	885b      	ldrh	r3, [r3, #2]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b05      	cmp	r3, #5
 8005e28:	f200 80ac 	bhi.w	8005f84 <USBD_GetDescriptor+0x204>
 8005e2c:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <USBD_GetDescriptor+0xb4>)
 8005e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e32:	bf00      	nop
 8005e34:	08005e4d 	.word	0x08005e4d
 8005e38:	08005e81 	.word	0x08005e81
 8005e3c:	08005eb5 	.word	0x08005eb5
 8005e40:	08005ee9 	.word	0x08005ee9
 8005e44:	08005f1d 	.word	0x08005f1d
 8005e48:	08005f51 	.word	0x08005f51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00b      	beq.n	8005e70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	7c12      	ldrb	r2, [r2, #16]
 8005e64:	f107 0108 	add.w	r1, r7, #8
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4798      	blx	r3
 8005e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e6e:	e091      	b.n	8005f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fa97 	bl	80063a6 <USBD_CtlError>
            err++;
 8005e78:	7afb      	ldrb	r3, [r7, #11]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e7e:	e089      	b.n	8005f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00b      	beq.n	8005ea4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	7c12      	ldrb	r2, [r2, #16]
 8005e98:	f107 0108 	add.w	r1, r7, #8
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4798      	blx	r3
 8005ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ea2:	e077      	b.n	8005f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa7d 	bl	80063a6 <USBD_CtlError>
            err++;
 8005eac:	7afb      	ldrb	r3, [r7, #11]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8005eb2:	e06f      	b.n	8005f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00b      	beq.n	8005ed8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	7c12      	ldrb	r2, [r2, #16]
 8005ecc:	f107 0108 	add.w	r1, r7, #8
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4798      	blx	r3
 8005ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ed6:	e05d      	b.n	8005f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa63 	bl	80063a6 <USBD_CtlError>
            err++;
 8005ee0:	7afb      	ldrb	r3, [r7, #11]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ee6:	e055      	b.n	8005f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00b      	beq.n	8005f0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	7c12      	ldrb	r2, [r2, #16]
 8005f00:	f107 0108 	add.w	r1, r7, #8
 8005f04:	4610      	mov	r0, r2
 8005f06:	4798      	blx	r3
 8005f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f0a:	e043      	b.n	8005f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f0c:	6839      	ldr	r1, [r7, #0]
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fa49 	bl	80063a6 <USBD_CtlError>
            err++;
 8005f14:	7afb      	ldrb	r3, [r7, #11]
 8005f16:	3301      	adds	r3, #1
 8005f18:	72fb      	strb	r3, [r7, #11]
          break;
 8005f1a:	e03b      	b.n	8005f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00b      	beq.n	8005f40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	7c12      	ldrb	r2, [r2, #16]
 8005f34:	f107 0108 	add.w	r1, r7, #8
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4798      	blx	r3
 8005f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f3e:	e029      	b.n	8005f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa2f 	bl	80063a6 <USBD_CtlError>
            err++;
 8005f48:	7afb      	ldrb	r3, [r7, #11]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f4e:	e021      	b.n	8005f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	7c12      	ldrb	r2, [r2, #16]
 8005f68:	f107 0108 	add.w	r1, r7, #8
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4798      	blx	r3
 8005f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f72:	e00f      	b.n	8005f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fa15 	bl	80063a6 <USBD_CtlError>
            err++;
 8005f7c:	7afb      	ldrb	r3, [r7, #11]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	72fb      	strb	r3, [r7, #11]
          break;
 8005f82:	e007      	b.n	8005f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fa0d 	bl	80063a6 <USBD_CtlError>
          err++;
 8005f8c:	7afb      	ldrb	r3, [r7, #11]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005f92:	e038      	b.n	8006006 <USBD_GetDescriptor+0x286>
 8005f94:	e037      	b.n	8006006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	7c1b      	ldrb	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa6:	f107 0208 	add.w	r2, r7, #8
 8005faa:	4610      	mov	r0, r2
 8005fac:	4798      	blx	r3
 8005fae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fb0:	e029      	b.n	8006006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f9f6 	bl	80063a6 <USBD_CtlError>
        err++;
 8005fba:	7afb      	ldrb	r3, [r7, #11]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	72fb      	strb	r3, [r7, #11]
      break;
 8005fc0:	e021      	b.n	8006006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7c1b      	ldrb	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10d      	bne.n	8005fe6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	f107 0208 	add.w	r2, r7, #8
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	4798      	blx	r3
 8005fda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fe4:	e00f      	b.n	8006006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f9dc 	bl	80063a6 <USBD_CtlError>
        err++;
 8005fee:	7afb      	ldrb	r3, [r7, #11]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	72fb      	strb	r3, [r7, #11]
      break;
 8005ff4:	e007      	b.n	8006006 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f9d4 	bl	80063a6 <USBD_CtlError>
      err++;
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
 8006000:	3301      	adds	r3, #1
 8006002:	72fb      	strb	r3, [r7, #11]
      break;
 8006004:	bf00      	nop
  }

  if (err != 0U)
 8006006:	7afb      	ldrb	r3, [r7, #11]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d11c      	bne.n	8006046 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800600c:	893b      	ldrh	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d011      	beq.n	8006036 <USBD_GetDescriptor+0x2b6>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	88db      	ldrh	r3, [r3, #6]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00d      	beq.n	8006036 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	88da      	ldrh	r2, [r3, #6]
 800601e:	893b      	ldrh	r3, [r7, #8]
 8006020:	4293      	cmp	r3, r2
 8006022:	bf28      	it	cs
 8006024:	4613      	movcs	r3, r2
 8006026:	b29b      	uxth	r3, r3
 8006028:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800602a:	893b      	ldrh	r3, [r7, #8]
 800602c:	461a      	mov	r2, r3
 800602e:	68f9      	ldr	r1, [r7, #12]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fa22 	bl	800647a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	88db      	ldrh	r3, [r3, #6]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d104      	bne.n	8006048 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fa79 	bl	8006536 <USBD_CtlSendStatus>
 8006044:	e000      	b.n	8006048 <USBD_GetDescriptor+0x2c8>
    return;
 8006046:	bf00      	nop
    }
  }
}
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop

08006050 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	889b      	ldrh	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d130      	bne.n	80060c4 <USBD_SetAddress+0x74>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	88db      	ldrh	r3, [r3, #6]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d12c      	bne.n	80060c4 <USBD_SetAddress+0x74>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	885b      	ldrh	r3, [r3, #2]
 800606e:	2b7f      	cmp	r3, #127	; 0x7f
 8006070:	d828      	bhi.n	80060c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	885b      	ldrh	r3, [r3, #2]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800607c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006084:	2b03      	cmp	r3, #3
 8006086:	d104      	bne.n	8006092 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f98b 	bl	80063a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006090:	e01d      	b.n	80060ce <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	7bfa      	ldrb	r2, [r7, #15]
 8006096:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 fa0c 	bl	80074bc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fa46 	bl	8006536 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d004      	beq.n	80060ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b8:	e009      	b.n	80060ce <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c2:	e004      	b.n	80060ce <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f96d 	bl	80063a6 <USBD_CtlError>
  }
}
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	885b      	ldrh	r3, [r3, #2]
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	4b41      	ldr	r3, [pc, #260]	; (80061f0 <USBD_SetConfig+0x118>)
 80060ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80060ec:	4b40      	ldr	r3, [pc, #256]	; (80061f0 <USBD_SetConfig+0x118>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d904      	bls.n	80060fe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f955 	bl	80063a6 <USBD_CtlError>
 80060fc:	e075      	b.n	80061ea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006104:	2b02      	cmp	r3, #2
 8006106:	d002      	beq.n	800610e <USBD_SetConfig+0x36>
 8006108:	2b03      	cmp	r3, #3
 800610a:	d023      	beq.n	8006154 <USBD_SetConfig+0x7c>
 800610c:	e062      	b.n	80061d4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800610e:	4b38      	ldr	r3, [pc, #224]	; (80061f0 <USBD_SetConfig+0x118>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d01a      	beq.n	800614c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006116:	4b36      	ldr	r3, [pc, #216]	; (80061f0 <USBD_SetConfig+0x118>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2203      	movs	r2, #3
 8006124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006128:	4b31      	ldr	r3, [pc, #196]	; (80061f0 <USBD_SetConfig+0x118>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	4619      	mov	r1, r3
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff f9e7 	bl	8005502 <USBD_SetClassConfig>
 8006134:	4603      	mov	r3, r0
 8006136:	2b02      	cmp	r3, #2
 8006138:	d104      	bne.n	8006144 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f932 	bl	80063a6 <USBD_CtlError>
            return;
 8006142:	e052      	b.n	80061ea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f9f6 	bl	8006536 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800614a:	e04e      	b.n	80061ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f9f2 	bl	8006536 <USBD_CtlSendStatus>
        break;
 8006152:	e04a      	b.n	80061ea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006154:	4b26      	ldr	r3, [pc, #152]	; (80061f0 <USBD_SetConfig+0x118>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d112      	bne.n	8006182 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006164:	4b22      	ldr	r3, [pc, #136]	; (80061f0 <USBD_SetConfig+0x118>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800616e:	4b20      	ldr	r3, [pc, #128]	; (80061f0 <USBD_SetConfig+0x118>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff f9e3 	bl	8005540 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f9db 	bl	8006536 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006180:	e033      	b.n	80061ea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006182:	4b1b      	ldr	r3, [pc, #108]	; (80061f0 <USBD_SetConfig+0x118>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	429a      	cmp	r2, r3
 800618e:	d01d      	beq.n	80061cc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff f9d1 	bl	8005540 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800619e:	4b14      	ldr	r3, [pc, #80]	; (80061f0 <USBD_SetConfig+0x118>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80061a8:	4b11      	ldr	r3, [pc, #68]	; (80061f0 <USBD_SetConfig+0x118>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff f9a7 	bl	8005502 <USBD_SetClassConfig>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d104      	bne.n	80061c4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f8f2 	bl	80063a6 <USBD_CtlError>
            return;
 80061c2:	e012      	b.n	80061ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f9b6 	bl	8006536 <USBD_CtlSendStatus>
        break;
 80061ca:	e00e      	b.n	80061ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f9b2 	bl	8006536 <USBD_CtlSendStatus>
        break;
 80061d2:	e00a      	b.n	80061ea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f8e5 	bl	80063a6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80061dc:	4b04      	ldr	r3, [pc, #16]	; (80061f0 <USBD_SetConfig+0x118>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff f9ac 	bl	8005540 <USBD_ClrClassConfig>
        break;
 80061e8:	bf00      	nop
    }
  }
}
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	20000208 	.word	0x20000208

080061f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	88db      	ldrh	r3, [r3, #6]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d004      	beq.n	8006210 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006206:	6839      	ldr	r1, [r7, #0]
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f8cc 	bl	80063a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800620e:	e022      	b.n	8006256 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006216:	2b02      	cmp	r3, #2
 8006218:	dc02      	bgt.n	8006220 <USBD_GetConfig+0x2c>
 800621a:	2b00      	cmp	r3, #0
 800621c:	dc03      	bgt.n	8006226 <USBD_GetConfig+0x32>
 800621e:	e015      	b.n	800624c <USBD_GetConfig+0x58>
 8006220:	2b03      	cmp	r3, #3
 8006222:	d00b      	beq.n	800623c <USBD_GetConfig+0x48>
 8006224:	e012      	b.n	800624c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3308      	adds	r3, #8
 8006230:	2201      	movs	r2, #1
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f920 	bl	800647a <USBD_CtlSendData>
        break;
 800623a:	e00c      	b.n	8006256 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	2201      	movs	r2, #1
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f918 	bl	800647a <USBD_CtlSendData>
        break;
 800624a:	e004      	b.n	8006256 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f8a9 	bl	80063a6 <USBD_CtlError>
        break;
 8006254:	bf00      	nop
}
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800626e:	3b01      	subs	r3, #1
 8006270:	2b02      	cmp	r3, #2
 8006272:	d81e      	bhi.n	80062b2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	88db      	ldrh	r3, [r3, #6]
 8006278:	2b02      	cmp	r3, #2
 800627a:	d004      	beq.n	8006286 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f891 	bl	80063a6 <USBD_CtlError>
        break;
 8006284:	e01a      	b.n	80062bc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f043 0202 	orr.w	r2, r3, #2
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	330c      	adds	r3, #12
 80062a6:	2202      	movs	r2, #2
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8e5 	bl	800647a <USBD_CtlSendData>
      break;
 80062b0:	e004      	b.n	80062bc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f876 	bl	80063a6 <USBD_CtlError>
      break;
 80062ba:	bf00      	nop
  }
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	885b      	ldrh	r3, [r3, #2]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d106      	bne.n	80062e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f929 	bl	8006536 <USBD_CtlSendStatus>
  }
}
 80062e4:	bf00      	nop
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fc:	3b01      	subs	r3, #1
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d80b      	bhi.n	800631a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	885b      	ldrh	r3, [r3, #2]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d10c      	bne.n	8006324 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f90f 	bl	8006536 <USBD_CtlSendStatus>
      }
      break;
 8006318:	e004      	b.n	8006324 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f842 	bl	80063a6 <USBD_CtlError>
      break;
 8006322:	e000      	b.n	8006326 <USBD_ClrFeature+0x3a>
      break;
 8006324:	bf00      	nop
  }
}
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781a      	ldrb	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	785a      	ldrb	r2, [r3, #1]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	3302      	adds	r3, #2
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	b29a      	uxth	r2, r3
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	3303      	adds	r3, #3
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	021b      	lsls	r3, r3, #8
 800635a:	b29b      	uxth	r3, r3
 800635c:	4413      	add	r3, r2
 800635e:	b29a      	uxth	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	3304      	adds	r3, #4
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	b29a      	uxth	r2, r3
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	3305      	adds	r3, #5
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	b29b      	uxth	r3, r3
 8006378:	4413      	add	r3, r2
 800637a:	b29a      	uxth	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	3306      	adds	r3, #6
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	b29a      	uxth	r2, r3
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	3307      	adds	r3, #7
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	b29b      	uxth	r3, r3
 8006394:	4413      	add	r3, r2
 8006396:	b29a      	uxth	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	80da      	strh	r2, [r3, #6]

}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr

080063a6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80063b0:	2180      	movs	r1, #128	; 0x80
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 f818 	bl	80073e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80063b8:	2100      	movs	r1, #0
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f001 f814 	bl	80073e8 <USBD_LL_StallEP>
}
 80063c0:	bf00      	nop
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d032      	beq.n	8006444 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 f834 	bl	800644c <USBD_GetLen>
 80063e4:	4603      	mov	r3, r0
 80063e6:	3301      	adds	r3, #1
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	75fa      	strb	r2, [r7, #23]
 80063f8:	461a      	mov	r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	4413      	add	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	7812      	ldrb	r2, [r2, #0]
 8006402:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006404:	7dfb      	ldrb	r3, [r7, #23]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	75fa      	strb	r2, [r7, #23]
 800640a:	461a      	mov	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4413      	add	r3, r2
 8006410:	2203      	movs	r2, #3
 8006412:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006414:	e012      	b.n	800643c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	60fa      	str	r2, [r7, #12]
 800641c:	7dfa      	ldrb	r2, [r7, #23]
 800641e:	1c51      	adds	r1, r2, #1
 8006420:	75f9      	strb	r1, [r7, #23]
 8006422:	4611      	mov	r1, r2
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	440a      	add	r2, r1
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	75fa      	strb	r2, [r7, #23]
 8006432:	461a      	mov	r2, r3
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4413      	add	r3, r2
 8006438:	2200      	movs	r2, #0
 800643a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e8      	bne.n	8006416 <USBD_GetString+0x4e>
    }
  }
}
 8006444:	bf00      	nop
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006458:	e005      	b.n	8006466 <USBD_GetLen+0x1a>
  {
    len++;
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	3301      	adds	r3, #1
 800645e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3301      	adds	r3, #1
 8006464:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f5      	bne.n	800645a <USBD_GetLen+0xe>
  }

  return len;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr

0800647a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	4613      	mov	r3, r2
 8006486:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2202      	movs	r2, #2
 800648c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006490:	88fa      	ldrh	r2, [r7, #6]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	2100      	movs	r1, #0
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f001 f829 	bl	80074fa <USBD_LL_Transmit>

  return USBD_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	60f8      	str	r0, [r7, #12]
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	4613      	mov	r3, r2
 80064be:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	2100      	movs	r1, #0
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f001 f817 	bl	80074fa <USBD_LL_Transmit>

  return USBD_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	4613      	mov	r3, r2
 80064e2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2203      	movs	r2, #3
 80064e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80064ec:	88fa      	ldrh	r2, [r7, #6]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80064f4:	88fa      	ldrh	r2, [r7, #6]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	2100      	movs	r1, #0
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f001 f81c 	bl	8007540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	4613      	mov	r3, r2
 800651e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	2100      	movs	r1, #0
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f001 f80a 	bl	8007540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2204      	movs	r2, #4
 8006542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006546:	2300      	movs	r3, #0
 8006548:	2200      	movs	r2, #0
 800654a:	2100      	movs	r1, #0
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 ffd4 	bl	80074fa <USBD_LL_Transmit>

  return USBD_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2205      	movs	r2, #5
 8006568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800656c:	2300      	movs	r3, #0
 800656e:	2200      	movs	r2, #0
 8006570:	2100      	movs	r1, #0
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 ffe4 	bl	8007540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <Evt_EnQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is full
 */
bool Evt_EnQueue(uint8_t *event)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	unsigned i;
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 800658c:	4b1a      	ldr	r3, [pc, #104]	; (80065f8 <Evt_EnQueue+0x74>)
 800658e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006592:	3301      	adds	r3, #1
 8006594:	425a      	negs	r2, r3
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	f002 0207 	and.w	r2, r2, #7
 800659e:	bf58      	it	pl
 80065a0:	4253      	negpl	r3, r2
 80065a2:	72fb      	strb	r3, [r7, #11]

	// queue is full
	if(next == evt_queue.tail)
 80065a4:	4b14      	ldr	r3, [pc, #80]	; (80065f8 <Evt_EnQueue+0x74>)
 80065a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80065aa:	7afa      	ldrb	r2, [r7, #11]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d101      	bne.n	80065b4 <Evt_EnQueue+0x30>
	{
		// event will be lost
		return false;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e01c      	b.n	80065ee <Evt_EnQueue+0x6a>
	}

	// copy event bytes into the buffer
	for(i = 0; i < EVT_QWIDTH; i++)
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	e011      	b.n	80065de <Evt_EnQueue+0x5a>
	{
		evt_queue.buff[evt_queue.head][i] = event[i];
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	4a0d      	ldr	r2, [pc, #52]	; (80065f8 <Evt_EnQueue+0x74>)
 80065c2:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 80065c6:	4610      	mov	r0, r2
 80065c8:	7819      	ldrb	r1, [r3, #0]
 80065ca:	4a0b      	ldr	r2, [pc, #44]	; (80065f8 <Evt_EnQueue+0x74>)
 80065cc:	0103      	lsls	r3, r0, #4
 80065ce:	441a      	add	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	460a      	mov	r2, r1
 80065d6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < EVT_QWIDTH; i++)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3301      	adds	r3, #1
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b0f      	cmp	r3, #15
 80065e2:	d9ea      	bls.n	80065ba <Evt_EnQueue+0x36>
	}
	// move to the next positition
	evt_queue.head = next;
 80065e4:	4a04      	ldr	r2, [pc, #16]	; (80065f8 <Evt_EnQueue+0x74>)
 80065e6:	7afb      	ldrb	r3, [r7, #11]
 80065e8:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80

	return true;
 80065ec:	2301      	movs	r3, #1
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr
 80065f8:	2000020c 	.word	0x2000020c

080065fc <Evt_DeQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is empty
 */
bool Evt_DeQueue(uint8_t *event)
{
 80065fc:	b590      	push	{r4, r7, lr}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	uint8_t i;
	bool flag = false;
 8006604:	2300      	movs	r3, #0
 8006606:	73bb      	strb	r3, [r7, #14]

	// disable all timers
	UsrTimer_Enable(false);
 8006608:	2000      	movs	r0, #0
 800660a:	f000 f9e3 	bl	80069d4 <UsrTimer_Enable>

	// queue is not empty
	if(evt_queue.tail != evt_queue.head)
 800660e:	4b1c      	ldr	r3, [pc, #112]	; (8006680 <Evt_DeQueue+0x84>)
 8006610:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8006614:	4b1a      	ldr	r3, [pc, #104]	; (8006680 <Evt_DeQueue+0x84>)
 8006616:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800661a:	429a      	cmp	r2, r3
 800661c:	d027      	beq.n	800666e <Evt_DeQueue+0x72>
	{
		// copy event bytes into the buffer
		for(i = 0; i < EVT_QWIDTH; i++)
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]
 8006622:	e010      	b.n	8006646 <Evt_DeQueue+0x4a>
		{
			event[i] = evt_queue.buff[evt_queue.tail][i];
 8006624:	4b16      	ldr	r3, [pc, #88]	; (8006680 <Evt_DeQueue+0x84>)
 8006626:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800662a:	461c      	mov	r4, r3
 800662c:	7bfa      	ldrb	r2, [r7, #15]
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	440b      	add	r3, r1
 8006634:	4812      	ldr	r0, [pc, #72]	; (8006680 <Evt_DeQueue+0x84>)
 8006636:	0121      	lsls	r1, r4, #4
 8006638:	4401      	add	r1, r0
 800663a:	440a      	add	r2, r1
 800663c:	7812      	ldrb	r2, [r2, #0]
 800663e:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < EVT_QWIDTH; i++)
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	3301      	adds	r3, #1
 8006644:	73fb      	strb	r3, [r7, #15]
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	2b0f      	cmp	r3, #15
 800664a:	d9eb      	bls.n	8006624 <Evt_DeQueue+0x28>
		}
		// move to the next position
		evt_queue.tail = ADVANCE_QPTR(evt_queue.tail);
 800664c:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <Evt_DeQueue+0x84>)
 800664e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006652:	3301      	adds	r3, #1
 8006654:	425a      	negs	r2, r3
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	f002 0207 	and.w	r2, r2, #7
 800665e:	bf58      	it	pl
 8006660:	4253      	negpl	r3, r2
 8006662:	b2da      	uxtb	r2, r3
 8006664:	4b06      	ldr	r3, [pc, #24]	; (8006680 <Evt_DeQueue+0x84>)
 8006666:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		// set flag
		flag = true;
 800666a:	2301      	movs	r3, #1
 800666c:	73bb      	strb	r3, [r7, #14]
	}

	// enable all timers
	UsrTimer_Enable(true);
 800666e:	2001      	movs	r0, #1
 8006670:	f000 f9b0 	bl	80069d4 <UsrTimer_Enable>

	// return with the flag
	return flag;
 8006674:	7bbb      	ldrb	r3, [r7, #14]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	bd90      	pop	{r4, r7, pc}
 800667e:	bf00      	nop
 8006680:	2000020c 	.word	0x2000020c

08006684 <PushButton_Init>:
 * \param	mask the mask byte that denotes which bit of the uint8_t data
 * supplied by PushButton_Read() function are assigned to the actual push
 * button.
 */
void PushButton_Init(uint8_t mask)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	71fb      	strb	r3, [r7, #7]
	int i ;

	// clear data
	pp.old_state = pp.new_state = 0;
 800668e:	4b13      	ldr	r3, [pc, #76]	; (80066dc <PushButton_Init+0x58>)
 8006690:	2200      	movs	r2, #0
 8006692:	705a      	strb	r2, [r3, #1]
 8006694:	4b11      	ldr	r3, [pc, #68]	; (80066dc <PushButton_Init+0x58>)
 8006696:	785a      	ldrb	r2, [r3, #1]
 8006698:	4b10      	ldr	r3, [pc, #64]	; (80066dc <PushButton_Init+0x58>)
 800669a:	701a      	strb	r2, [r3, #0]
	pp.mask = mask;
 800669c:	4a0f      	ldr	r2, [pc, #60]	; (80066dc <PushButton_Init+0x58>)
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	7493      	strb	r3, [r2, #18]
	pp.mode = 0;
 80066a2:	4b0e      	ldr	r3, [pc, #56]	; (80066dc <PushButton_Init+0x58>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	74da      	strb	r2, [r3, #19]
	pp.flag = false;
 80066a8:	4b0c      	ldr	r3, [pc, #48]	; (80066dc <PushButton_Init+0x58>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	751a      	strb	r2, [r3, #20]

	// clear log
	for(i = 0; i < 8; i++)
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	e007      	b.n	80066c4 <PushButton_Init+0x40>
	{
		PushButton_ClearLog(i);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 f847 	bl	800674c <PushButton_ClearLog>
	for(i = 0; i < 8; i++)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b07      	cmp	r3, #7
 80066c8:	ddf4      	ble.n	80066b4 <PushButton_Init+0x30>
	}

	// register pushbutton main routine
	UsrTimer_Set(PUSHBTN_TMR_PERIOD, 0, PushButton_Routine);
 80066ca:	4a05      	ldr	r2, [pc, #20]	; (80066e0 <PushButton_Init+0x5c>)
 80066cc:	2100      	movs	r1, #0
 80066ce:	2050      	movs	r0, #80	; 0x50
 80066d0:	f000 f990 	bl	80069f4 <UsrTimer_Set>
}
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	2000064c 	.word	0x2000064c
 80066e0:	08006785 	.word	0x08006785

080066e4 <PushButton_SetMode>:
 * \param mode either PUSHBTN_MODE_CLICK or PUSHBTN_MODE_UDOWN
 * \param flag true if the button whose mode is changes is currently being
 *			pressed.
 */
void PushButton_SetMode(uint8_t mode, bool flag)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	460a      	mov	r2, r1
 80066ee:	71fb      	strb	r3, [r7, #7]
 80066f0:	4613      	mov	r3, r2
 80066f2:	71bb      	strb	r3, [r7, #6]
	int i;

	// clear data
	pp.old_state = pp.new_state = 0;
 80066f4:	4b14      	ldr	r3, [pc, #80]	; (8006748 <PushButton_SetMode+0x64>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	705a      	strb	r2, [r3, #1]
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <PushButton_SetMode+0x64>)
 80066fc:	785a      	ldrb	r2, [r3, #1]
 80066fe:	4b12      	ldr	r3, [pc, #72]	; (8006748 <PushButton_SetMode+0x64>)
 8006700:	701a      	strb	r2, [r3, #0]
	// this looks weird but correct
	pp.flag = !flag;
 8006702:	79bb      	ldrb	r3, [r7, #6]
 8006704:	2b00      	cmp	r3, #0
 8006706:	bf14      	ite	ne
 8006708:	2301      	movne	r3, #1
 800670a:	2300      	moveq	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	f083 0301 	eor.w	r3, r3, #1
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	b2da      	uxtb	r2, r3
 800671a:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <PushButton_SetMode+0x64>)
 800671c:	751a      	strb	r2, [r3, #20]

	// clear log
	for(i = 0; i < 8; i++)
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	e007      	b.n	8006734 <PushButton_SetMode+0x50>
	{
		PushButton_ClearLog(i);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	4618      	mov	r0, r3
 800672a:	f000 f80f 	bl	800674c <PushButton_ClearLog>
	for(i = 0; i < 8; i++)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	3301      	adds	r3, #1
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b07      	cmp	r3, #7
 8006738:	ddf4      	ble.n	8006724 <PushButton_SetMode+0x40>
	}

	// change mode
	pp.mode = mode;
 800673a:	4a03      	ldr	r2, [pc, #12]	; (8006748 <PushButton_SetMode+0x64>)
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	74d3      	strb	r3, [r2, #19]
}
 8006740:	bf00      	nop
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	2000064c 	.word	0x2000064c

0800674c <PushButton_ClearLog>:

/** Clear the duration parameter and the click count parameter of the button.
 */
void PushButton_ClearLog(uint8_t index)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	71fb      	strb	r3, [r7, #7]
	if(index < 8)
 8006756:	79fb      	ldrb	r3, [r7, #7]
 8006758:	2b07      	cmp	r3, #7
 800675a:	d80c      	bhi.n	8006776 <PushButton_ClearLog+0x2a>
	{
		pp.click[index] = pp.duration[index] = 0;
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	4a08      	ldr	r2, [pc, #32]	; (8006780 <PushButton_ClearLog+0x34>)
 8006760:	441a      	add	r2, r3
 8006762:	2100      	movs	r1, #0
 8006764:	7291      	strb	r1, [r2, #10]
 8006766:	79fa      	ldrb	r2, [r7, #7]
 8006768:	4905      	ldr	r1, [pc, #20]	; (8006780 <PushButton_ClearLog+0x34>)
 800676a:	440b      	add	r3, r1
 800676c:	7a99      	ldrb	r1, [r3, #10]
 800676e:	4b04      	ldr	r3, [pc, #16]	; (8006780 <PushButton_ClearLog+0x34>)
 8006770:	4413      	add	r3, r2
 8006772:	460a      	mov	r2, r1
 8006774:	709a      	strb	r2, [r3, #2]
	}
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr
 8006780:	2000064c 	.word	0x2000064c

08006784 <PushButton_Routine>:

/** Main routine
 */
void PushButton_Routine()
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
	int i;
	uint8_t diff_state;
	uint8_t event[EVT_QWIDTH];

	pp.new_state = PushButton_Read();
 800678a:	f7f9 fe3d 	bl	8000408 <PushButton_Read>
 800678e:	4603      	mov	r3, r0
 8006790:	461a      	mov	r2, r3
 8006792:	4b8f      	ldr	r3, [pc, #572]	; (80069d0 <PushButton_Routine+0x24c>)
 8006794:	705a      	strb	r2, [r3, #1]

	// difference in the button state
	diff_state = pp.old_state ^ pp.new_state;
 8006796:	4b8e      	ldr	r3, [pc, #568]	; (80069d0 <PushButton_Routine+0x24c>)
 8006798:	781a      	ldrb	r2, [r3, #0]
 800679a:	4b8d      	ldr	r3, [pc, #564]	; (80069d0 <PushButton_Routine+0x24c>)
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	4053      	eors	r3, r2
 80067a0:	74fb      	strb	r3, [r7, #19]

	for(i = 0; i < 8; i++)
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	e107      	b.n	80069b8 <PushButton_Routine+0x234>
	{
		// skip if no button is assigned
		if(((pp.mask >> i) & 0x01) == 0x00)
 80067a8:	4b89      	ldr	r3, [pc, #548]	; (80069d0 <PushButton_Routine+0x24c>)
 80067aa:	7c9b      	ldrb	r3, [r3, #18]
 80067ac:	461a      	mov	r2, r3
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	fa42 f303 	asr.w	r3, r2, r3
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80f9 	beq.w	80069b0 <PushButton_Routine+0x22c>
		{
			continue;
		}

		// up-down mode
		if(((pp.mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN)
 80067be:	4b84      	ldr	r3, [pc, #528]	; (80069d0 <PushButton_Routine+0x24c>)
 80067c0:	7cdb      	ldrb	r3, [r3, #19]
 80067c2:	461a      	mov	r2, r3
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	fa42 f303 	asr.w	r3, r2, r3
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d030      	beq.n	8006834 <PushButton_Routine+0xb0>
		{
			// the button pressed
			if(((pp.new_state >> i) & 0x01) == 0x01)
 80067d2:	4b7f      	ldr	r3, [pc, #508]	; (80069d0 <PushButton_Routine+0x24c>)
 80067d4:	785b      	ldrb	r3, [r3, #1]
 80067d6:	461a      	mov	r2, r3
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	fa42 f303 	asr.w	r3, r2, r3
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00d      	beq.n	8006802 <PushButton_Routine+0x7e>
			{
				event[0] = EVT_PBTN_INPUT;
 80067e6:	2310      	movs	r3, #16
 80067e8:	703b      	strb	r3, [r7, #0]
				event[1] = (uint8_t)(i+1);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	3301      	adds	r3, #1
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	707b      	strb	r3, [r7, #1]
				event[2] = PBTN_DOWN;
 80067f4:	2305      	movs	r3, #5
 80067f6:	70bb      	strb	r3, [r7, #2]

				// post the event as long as the button is pressed down
				Evt_EnQueue(event);
 80067f8:	463b      	mov	r3, r7
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff fec2 	bl	8006584 <Evt_EnQueue>
 8006800:	e0d7      	b.n	80069b2 <PushButton_Routine+0x22e>
			}
			// button released
			else
			{
				// actually it has just risen
				if(((pp.old_state >> i) & 0x01) == 0x01)
 8006802:	4b73      	ldr	r3, [pc, #460]	; (80069d0 <PushButton_Routine+0x24c>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	fa42 f303 	asr.w	r3, r2, r3
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 80cd 	beq.w	80069b2 <PushButton_Routine+0x22e>
				{
					event[0] = EVT_PBTN_INPUT;
 8006818:	2310      	movs	r3, #16
 800681a:	703b      	strb	r3, [r7, #0]
					event[1] = (uint8_t)(i+1);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	b2db      	uxtb	r3, r3
 8006820:	3301      	adds	r3, #1
 8006822:	b2db      	uxtb	r3, r3
 8006824:	707b      	strb	r3, [r7, #1]
					event[2] = PBTN_ENDN;
 8006826:	2306      	movs	r3, #6
 8006828:	70bb      	strb	r3, [r7, #2]

					// post the event to indicate the end of the down state
					Evt_EnQueue(event);
 800682a:	463b      	mov	r3, r7
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff fea9 	bl	8006584 <Evt_EnQueue>
 8006832:	e0be      	b.n	80069b2 <PushButton_Routine+0x22e>
		}
		// click mode
		else
		{
			// the button state changed
			if((diff_state >> i) & 0x01)
 8006834:	7cfa      	ldrb	r2, [r7, #19]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	fa42 f303 	asr.w	r3, r2, r3
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d02b      	beq.n	800689c <PushButton_Routine+0x118>
			{
				// (re)start duration count
				pp.duration[i] = 1;
 8006844:	4a62      	ldr	r2, [pc, #392]	; (80069d0 <PushButton_Routine+0x24c>)
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	4413      	add	r3, r2
 800684a:	330a      	adds	r3, #10
 800684c:	2201      	movs	r2, #1
 800684e:	701a      	strb	r2, [r3, #0]

				// the button released
				if(((pp.new_state >> i) & 0x01) == 0x00)
 8006850:	4b5f      	ldr	r3, [pc, #380]	; (80069d0 <PushButton_Routine+0x24c>)
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	461a      	mov	r2, r3
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	fa42 f303 	asr.w	r3, r2, r3
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d136      	bne.n	80068d2 <PushButton_Routine+0x14e>
				{
					if(pp.flag)
 8006864:	4b5a      	ldr	r3, [pc, #360]	; (80069d0 <PushButton_Routine+0x24c>)
 8006866:	7d1b      	ldrb	r3, [r3, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d009      	beq.n	8006880 <PushButton_Routine+0xfc>
					{
						pp.flag = false;
 800686c:	4b58      	ldr	r3, [pc, #352]	; (80069d0 <PushButton_Routine+0x24c>)
 800686e:	2200      	movs	r2, #0
 8006870:	751a      	strb	r2, [r3, #20]
						//
						pp.duration[i] = 0;
 8006872:	4a57      	ldr	r2, [pc, #348]	; (80069d0 <PushButton_Routine+0x24c>)
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	4413      	add	r3, r2
 8006878:	330a      	adds	r3, #10
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	e028      	b.n	80068d2 <PushButton_Routine+0x14e>
					}
					else
					{
						// increase click count
						pp.click[i]++;
 8006880:	4a53      	ldr	r2, [pc, #332]	; (80069d0 <PushButton_Routine+0x24c>)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	4413      	add	r3, r2
 8006886:	3302      	adds	r3, #2
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	3301      	adds	r3, #1
 800688c:	b2d9      	uxtb	r1, r3
 800688e:	4a50      	ldr	r2, [pc, #320]	; (80069d0 <PushButton_Routine+0x24c>)
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	4413      	add	r3, r2
 8006894:	3302      	adds	r3, #2
 8006896:	460a      	mov	r2, r1
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	e01a      	b.n	80068d2 <PushButton_Routine+0x14e>
			}
			// button state not changed
			else
			{
				// increase duration count
				if((pp.duration[i] > 0) &&
 800689c:	4a4c      	ldr	r2, [pc, #304]	; (80069d0 <PushButton_Routine+0x24c>)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	4413      	add	r3, r2
 80068a2:	330a      	adds	r3, #10
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d013      	beq.n	80068d2 <PushButton_Routine+0x14e>
						(pp.duration[i] < PUSHBTN_TO_MAX))
 80068aa:	4a49      	ldr	r2, [pc, #292]	; (80069d0 <PushButton_Routine+0x24c>)
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	4413      	add	r3, r2
 80068b0:	330a      	adds	r3, #10
 80068b2:	781b      	ldrb	r3, [r3, #0]
				if((pp.duration[i] > 0) &&
 80068b4:	2bff      	cmp	r3, #255	; 0xff
 80068b6:	d00c      	beq.n	80068d2 <PushButton_Routine+0x14e>
				{
					pp.duration[i]++;
 80068b8:	4a45      	ldr	r2, [pc, #276]	; (80069d0 <PushButton_Routine+0x24c>)
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	4413      	add	r3, r2
 80068be:	330a      	adds	r3, #10
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	3301      	adds	r3, #1
 80068c4:	b2d9      	uxtb	r1, r3
 80068c6:	4a42      	ldr	r2, [pc, #264]	; (80069d0 <PushButton_Routine+0x24c>)
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	4413      	add	r3, r2
 80068cc:	330a      	adds	r3, #10
 80068ce:	460a      	mov	r2, r1
 80068d0:	701a      	strb	r2, [r3, #0]
				}
			}

			// triple click
			if(pp.click[i] >= 3)
 80068d2:	4a3f      	ldr	r2, [pc, #252]	; (80069d0 <PushButton_Routine+0x24c>)
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	4413      	add	r3, r2
 80068d8:	3302      	adds	r3, #2
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d912      	bls.n	8006906 <PushButton_Routine+0x182>
			{
				// triple click event
				event[0] = EVT_PBTN_INPUT;
 80068e0:	2310      	movs	r3, #16
 80068e2:	703b      	strb	r3, [r7, #0]
				event[1] = (uint8_t)(i+1);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	3301      	adds	r3, #1
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	707b      	strb	r3, [r7, #1]
				event[2] = PBTN_TCLK;
 80068ee:	2304      	movs	r3, #4
 80068f0:	70bb      	strb	r3, [r7, #2]
				// post event
				Evt_EnQueue(event);
 80068f2:	463b      	mov	r3, r7
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff fe45 	bl	8006584 <Evt_EnQueue>

				// clear log
				PushButton_ClearLog(i);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	4618      	mov	r0, r3
 8006900:	f7ff ff24 	bl	800674c <PushButton_ClearLog>
 8006904:	e055      	b.n	80069b2 <PushButton_Routine+0x22e>
			}
			// button relased and short timeout passed
			else if((pp.duration[i] > PUSHBTN_TO_SHORT) &&
 8006906:	4a32      	ldr	r2, [pc, #200]	; (80069d0 <PushButton_Routine+0x24c>)
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	4413      	add	r3, r2
 800690c:	330a      	adds	r3, #10
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b03      	cmp	r3, #3
 8006912:	d926      	bls.n	8006962 <PushButton_Routine+0x1de>
					(((pp.new_state >> i) & 0x01) == 0x00))
 8006914:	4b2e      	ldr	r3, [pc, #184]	; (80069d0 <PushButton_Routine+0x24c>)
 8006916:	785b      	ldrb	r3, [r3, #1]
 8006918:	461a      	mov	r2, r3
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	fa42 f303 	asr.w	r3, r2, r3
 8006920:	f003 0301 	and.w	r3, r3, #1
			else if((pp.duration[i] > PUSHBTN_TO_SHORT) &&
 8006924:	2b00      	cmp	r3, #0
 8006926:	d11c      	bne.n	8006962 <PushButton_Routine+0x1de>
			{
				event[0] = EVT_PBTN_INPUT;
 8006928:	2310      	movs	r3, #16
 800692a:	703b      	strb	r3, [r7, #0]
				event[1] = (uint8_t)(i+1);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	3301      	adds	r3, #1
 8006932:	b2db      	uxtb	r3, r3
 8006934:	707b      	strb	r3, [r7, #1]

				// double click
				if(pp.click[i] == 2)
 8006936:	4a26      	ldr	r2, [pc, #152]	; (80069d0 <PushButton_Routine+0x24c>)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	4413      	add	r3, r2
 800693c:	3302      	adds	r3, #2
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2b02      	cmp	r3, #2
 8006942:	d102      	bne.n	800694a <PushButton_Routine+0x1c6>
				{
					// double click event
					event[2] = PBTN_DCLK;
 8006944:	2303      	movs	r3, #3
 8006946:	70bb      	strb	r3, [r7, #2]
 8006948:	e001      	b.n	800694e <PushButton_Routine+0x1ca>
				}
				// single click
				else
				{
					// single click event
					event[2] = PBTN_SCLK;
 800694a:	2301      	movs	r3, #1
 800694c:	70bb      	strb	r3, [r7, #2]
				}
				// post the event
				Evt_EnQueue(event);
 800694e:	463b      	mov	r3, r7
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff fe17 	bl	8006584 <Evt_EnQueue>

				// clear log
				PushButton_ClearLog(i);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff fef6 	bl	800674c <PushButton_ClearLog>
 8006960:	e027      	b.n	80069b2 <PushButton_Routine+0x22e>
			}
			// button pressed and long timeout passed
			else if((pp.duration[i] > PUSHBTN_TO_LONG) &&
 8006962:	4a1b      	ldr	r2, [pc, #108]	; (80069d0 <PushButton_Routine+0x24c>)
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	4413      	add	r3, r2
 8006968:	330a      	adds	r3, #10
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b0a      	cmp	r3, #10
 800696e:	d920      	bls.n	80069b2 <PushButton_Routine+0x22e>
					(((pp.new_state >> i) & 0x01) == 0x01))
 8006970:	4b17      	ldr	r3, [pc, #92]	; (80069d0 <PushButton_Routine+0x24c>)
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	461a      	mov	r2, r3
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	fa42 f303 	asr.w	r3, r2, r3
 800697c:	f003 0301 	and.w	r3, r3, #1
			else if((pp.duration[i] > PUSHBTN_TO_LONG) &&
 8006980:	2b00      	cmp	r3, #0
 8006982:	d016      	beq.n	80069b2 <PushButton_Routine+0x22e>
			{
				// long click event
				event[0] = EVT_PBTN_INPUT;
 8006984:	2310      	movs	r3, #16
 8006986:	703b      	strb	r3, [r7, #0]
				event[1] = (uint8_t)(i+1);
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	3301      	adds	r3, #1
 800698e:	b2db      	uxtb	r3, r3
 8006990:	707b      	strb	r3, [r7, #1]
				event[2] = PBTN_LCLK;
 8006992:	2302      	movs	r3, #2
 8006994:	70bb      	strb	r3, [r7, #2]

				// post the event
				Evt_EnQueue(event);
 8006996:	463b      	mov	r3, r7
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fdf3 	bl	8006584 <Evt_EnQueue>

				// clear log
				PushButton_ClearLog(i);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff fed2 	bl	800674c <PushButton_ClearLog>

				// raise flag: this will prevent false detect after long click
				pp.flag = true;
 80069a8:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <PushButton_Routine+0x24c>)
 80069aa:	2201      	movs	r2, #1
 80069ac:	751a      	strb	r2, [r3, #20]
 80069ae:	e000      	b.n	80069b2 <PushButton_Routine+0x22e>
			continue;
 80069b0:	bf00      	nop
	for(i = 0; i < 8; i++)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	3301      	adds	r3, #1
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2b07      	cmp	r3, #7
 80069bc:	f77f aef4 	ble.w	80067a8 <PushButton_Routine+0x24>
			}
		}
	}
	// update pin state
	pp.old_state = pp.new_state;
 80069c0:	4b03      	ldr	r3, [pc, #12]	; (80069d0 <PushButton_Routine+0x24c>)
 80069c2:	785a      	ldrb	r2, [r3, #1]
 80069c4:	4b02      	ldr	r3, [pc, #8]	; (80069d0 <PushButton_Routine+0x24c>)
 80069c6:	701a      	strb	r2, [r3, #0]
}
 80069c8:	bf00      	nop
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	2000064c 	.word	0x2000064c

080069d4 <UsrTimer_Enable>:
}

/** Call this function to pause or to resume all timers at once.
 */
void UsrTimer_Enable(bool flag)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	4603      	mov	r3, r0
 80069dc:	71fb      	strb	r3, [r7, #7]
	usrtimer_enable = flag;
 80069de:	4a04      	ldr	r2, [pc, #16]	; (80069f0 <UsrTimer_Enable+0x1c>)
 80069e0:	79fb      	ldrb	r3, [r7, #7]
 80069e2:	7013      	strb	r3, [r2, #0]
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	2000011b 	.word	0x2000011b

080069f4 <UsrTimer_Set>:
 * \param   duration number of repetition. 0 for perpetual timer.
 * \param   usrtimer_callback callback function
 * \return	the index of the timer created. if failed, -1 will be returned.
 */
int UsrTimer_Set(uint32_t period, uint32_t duration, usrtimer_callback f)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
	int i;

	// check unoccupied spot
	for(i = 0; i < MAX_USRTIMER; i++)
 8006a00:	2300      	movs	r3, #0
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	e04e      	b.n	8006aa4 <UsrTimer_Set+0xb0>
	{
		if(USRTimers[i].mode == USRTIMER_UNASGN)
 8006a06:	492c      	ldr	r1, [pc, #176]	; (8006ab8 <UsrTimer_Set+0xc4>)
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	440b      	add	r3, r1
 8006a14:	330c      	adds	r3, #12
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d140      	bne.n	8006a9e <UsrTimer_Set+0xaa>
		{
			// finite duration timer
			if(duration > 0)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <UsrTimer_Set+0x44>
			{
				USRTimers[i].mode = USRTIMER_FINITE;
 8006a22:	4925      	ldr	r1, [pc, #148]	; (8006ab8 <UsrTimer_Set+0xc4>)
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	440b      	add	r3, r1
 8006a30:	330c      	adds	r3, #12
 8006a32:	2202      	movs	r2, #2
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	e009      	b.n	8006a4c <UsrTimer_Set+0x58>
			}
			// perpetual timer
			else
			{
				USRTimers[i].mode = USRTIMER_FOREVR;
 8006a38:	491f      	ldr	r1, [pc, #124]	; (8006ab8 <UsrTimer_Set+0xc4>)
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	440b      	add	r3, r1
 8006a46:	330c      	adds	r3, #12
 8006a48:	2203      	movs	r2, #3
 8006a4a:	701a      	strb	r2, [r3, #0]
			}

			USRTimers[i].period = (int32_t)period;
 8006a4c:	68f9      	ldr	r1, [r7, #12]
 8006a4e:	481a      	ldr	r0, [pc, #104]	; (8006ab8 <UsrTimer_Set+0xc4>)
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4403      	add	r3, r0
 8006a5c:	6019      	str	r1, [r3, #0]
			USRTimers[i].duration = (int32_t)duration;
 8006a5e:	68b9      	ldr	r1, [r7, #8]
 8006a60:	4815      	ldr	r0, [pc, #84]	; (8006ab8 <UsrTimer_Set+0xc4>)
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4403      	add	r3, r0
 8006a6e:	3304      	adds	r3, #4
 8006a70:	6019      	str	r1, [r3, #0]
			USRTimers[i].count = 0;
 8006a72:	4911      	ldr	r1, [pc, #68]	; (8006ab8 <UsrTimer_Set+0xc4>)
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	440b      	add	r3, r1
 8006a80:	3308      	adds	r3, #8
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
			USRTimers[i].callback = f;
 8006a86:	490c      	ldr	r1, [pc, #48]	; (8006ab8 <UsrTimer_Set+0xc4>)
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	3310      	adds	r3, #16
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	601a      	str	r2, [r3, #0]
			// return with the timer index
			return i;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	e007      	b.n	8006aae <UsrTimer_Set+0xba>
	for(i = 0; i < MAX_USRTIMER; i++)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b13      	cmp	r3, #19
 8006aa8:	ddad      	ble.n	8006a06 <UsrTimer_Set+0x12>
		}
	}

	// no empty slot
	return -1;
 8006aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bc80      	pop	{r7}
 8006ab6:	4770      	bx	lr
 8006ab8:	20000290 	.word	0x20000290

08006abc <UsrTimer_Clear>:
 * information from the timer struct array.
 *
 * \param index timer id
 */
void UsrTimer_Clear(uint32_t index)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
	if(index >= MAX_USRTIMER)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b13      	cmp	r3, #19
 8006ac8:	d831      	bhi.n	8006b2e <UsrTimer_Clear+0x72>
	{
		return;
	}

	USRTimers[index].period = 0;
 8006aca:	491b      	ldr	r1, [pc, #108]	; (8006b38 <UsrTimer_Clear+0x7c>)
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
	USRTimers[index].duration = 0;
 8006adc:	4916      	ldr	r1, [pc, #88]	; (8006b38 <UsrTimer_Clear+0x7c>)
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	3304      	adds	r3, #4
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]
	USRTimers[index].count = 0;
 8006af0:	4911      	ldr	r1, [pc, #68]	; (8006b38 <UsrTimer_Clear+0x7c>)
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	440b      	add	r3, r1
 8006afe:	3308      	adds	r3, #8
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]
	USRTimers[index].mode = USRTIMER_UNASGN;
 8006b04:	490c      	ldr	r1, [pc, #48]	; (8006b38 <UsrTimer_Clear+0x7c>)
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	330c      	adds	r3, #12
 8006b14:	2200      	movs	r2, #0
 8006b16:	701a      	strb	r2, [r3, #0]
	USRTimers[index].callback = NULL;
 8006b18:	4907      	ldr	r1, [pc, #28]	; (8006b38 <UsrTimer_Clear+0x7c>)
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	3310      	adds	r3, #16
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	e000      	b.n	8006b30 <UsrTimer_Clear+0x74>
		return;
 8006b2e:	bf00      	nop
}
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr
 8006b38:	20000290 	.word	0x20000290

08006b3c <UsrTimer_Routine>:
 *  It is highly recommended to protect the function by disabling the
 *  timer interrupt during the execution so that only one instance of this
 *  function is excuted at any moment of time.
 */
void UsrTimer_Routine(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
	int i;

	if(!usrtimer_enable)
 8006b42:	4b5e      	ldr	r3, [pc, #376]	; (8006cbc <UsrTimer_Routine+0x180>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f083 0301 	eor.w	r3, r3, #1
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f040 80ad 	bne.w	8006cae <UsrTimer_Routine+0x172>
	{
		return;
	}

	// increase the counter value of each timer
	for(i = 0; i < MAX_USRTIMER; i++)
 8006b54:	2300      	movs	r3, #0
 8006b56:	607b      	str	r3, [r7, #4]
 8006b58:	e02b      	b.n	8006bb2 <UsrTimer_Routine+0x76>
	{
		// skip unassigned or stopped timers
		if( (USRTimers[i].mode != USRTIMER_UNASGN) &&
 8006b5a:	4959      	ldr	r1, [pc, #356]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	330c      	adds	r3, #12
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01d      	beq.n	8006bac <UsrTimer_Routine+0x70>
		        (USRTimers[i].mode != USRTIMER_PAUSED) )
 8006b70:	4953      	ldr	r1, [pc, #332]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	330c      	adds	r3, #12
 8006b80:	781b      	ldrb	r3, [r3, #0]
		if( (USRTimers[i].mode != USRTIMER_UNASGN) &&
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d012      	beq.n	8006bac <UsrTimer_Routine+0x70>
		{
			USRTimers[i].count++;
 8006b86:	494e      	ldr	r1, [pc, #312]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	440b      	add	r3, r1
 8006b94:	3308      	adds	r3, #8
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	1c59      	adds	r1, r3, #1
 8006b9a:	4849      	ldr	r0, [pc, #292]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4403      	add	r3, r0
 8006ba8:	3308      	adds	r3, #8
 8006baa:	6019      	str	r1, [r3, #0]
	for(i = 0; i < MAX_USRTIMER; i++)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	607b      	str	r3, [r7, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b13      	cmp	r3, #19
 8006bb6:	ddd0      	ble.n	8006b5a <UsrTimer_Routine+0x1e>
		}
	}

	// check the count value for the timeout
	for(i = 0; i < MAX_USRTIMER; i++)
 8006bb8:	2300      	movs	r3, #0
 8006bba:	607b      	str	r3, [r7, #4]
 8006bbc:	e073      	b.n	8006ca6 <UsrTimer_Routine+0x16a>
	{
		// timeout occurred
		if(USRTimers[i].count >= USRTimers[i].period)
 8006bbe:	4940      	ldr	r1, [pc, #256]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	3308      	adds	r3, #8
 8006bce:	6819      	ldr	r1, [r3, #0]
 8006bd0:	483b      	ldr	r0, [pc, #236]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4403      	add	r3, r0
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4299      	cmp	r1, r3
 8006be2:	db5d      	blt.n	8006ca0 <UsrTimer_Routine+0x164>
		{
			// the timer should have valid callback
			if(USRTimers[i].callback)
 8006be4:	4936      	ldr	r1, [pc, #216]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	4613      	mov	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	440b      	add	r3, r1
 8006bf2:	3310      	adds	r3, #16
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d052      	beq.n	8006ca0 <UsrTimer_Routine+0x164>
			{
				// run callback
				USRTimers[i].callback();
 8006bfa:	4931      	ldr	r1, [pc, #196]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	440b      	add	r3, r1
 8006c08:	3310      	adds	r3, #16
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4798      	blx	r3
				// decrease the count value
				USRTimers[i].count -= USRTimers[i].period;
 8006c0e:	492c      	ldr	r1, [pc, #176]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	6819      	ldr	r1, [r3, #0]
 8006c20:	4827      	ldr	r0, [pc, #156]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4403      	add	r3, r0
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	1ac9      	subs	r1, r1, r3
 8006c32:	4823      	ldr	r0, [pc, #140]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4403      	add	r3, r0
 8006c40:	3308      	adds	r3, #8
 8006c42:	6019      	str	r1, [r3, #0]
				// handle finite duration timer
				if(USRTimers[i].mode == USRTIMER_FINITE)
 8006c44:	491e      	ldr	r1, [pc, #120]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	440b      	add	r3, r1
 8006c52:	330c      	adds	r3, #12
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d12b      	bne.n	8006cb2 <UsrTimer_Routine+0x176>
				{
					// decrease the duration
					if(--USRTimers[i].duration == 0)
 8006c5a:	4919      	ldr	r1, [pc, #100]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	440b      	add	r3, r1
 8006c68:	3304      	adds	r3, #4
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	1e59      	subs	r1, r3, #1
 8006c6e:	4814      	ldr	r0, [pc, #80]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4403      	add	r3, r0
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	6019      	str	r1, [r3, #0]
 8006c80:	490f      	ldr	r1, [pc, #60]	; (8006cc0 <UsrTimer_Routine+0x184>)
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	440b      	add	r3, r1
 8006c8e:	3304      	adds	r3, #4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10d      	bne.n	8006cb2 <UsrTimer_Routine+0x176>
					{
						UsrTimer_Clear(i);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff ff0f 	bl	8006abc <UsrTimer_Clear>
					}
				}

				// we only handle one task at a time
				break;
 8006c9e:	e008      	b.n	8006cb2 <UsrTimer_Routine+0x176>
	for(i = 0; i < MAX_USRTIMER; i++)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	607b      	str	r3, [r7, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b13      	cmp	r3, #19
 8006caa:	dd88      	ble.n	8006bbe <UsrTimer_Routine+0x82>
 8006cac:	e002      	b.n	8006cb4 <UsrTimer_Routine+0x178>
		return;
 8006cae:	bf00      	nop
 8006cb0:	e000      	b.n	8006cb4 <UsrTimer_Routine+0x178>
				break;
 8006cb2:	bf00      	nop
			}
		}
	}
}
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	2000011b 	.word	0x2000011b
 8006cc0:	20000290 	.word	0x20000290

08006cc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	4912      	ldr	r1, [pc, #72]	; (8006d14 <MX_USB_DEVICE_Init+0x50>)
 8006ccc:	4812      	ldr	r0, [pc, #72]	; (8006d18 <MX_USB_DEVICE_Init+0x54>)
 8006cce:	f7fe fbbe 	bl	800544e <USBD_Init>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006cd8:	f7f9 fbc4 	bl	8000464 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006cdc:	490f      	ldr	r1, [pc, #60]	; (8006d1c <MX_USB_DEVICE_Init+0x58>)
 8006cde:	480e      	ldr	r0, [pc, #56]	; (8006d18 <MX_USB_DEVICE_Init+0x54>)
 8006ce0:	f7fe fbe0 	bl	80054a4 <USBD_RegisterClass>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006cea:	f7f9 fbbb 	bl	8000464 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006cee:	490c      	ldr	r1, [pc, #48]	; (8006d20 <MX_USB_DEVICE_Init+0x5c>)
 8006cf0:	4809      	ldr	r0, [pc, #36]	; (8006d18 <MX_USB_DEVICE_Init+0x54>)
 8006cf2:	f7fe fb11 	bl	8005318 <USBD_CDC_RegisterInterface>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006cfc:	f7f9 fbb2 	bl	8000464 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d00:	4805      	ldr	r0, [pc, #20]	; (8006d18 <MX_USB_DEVICE_Init+0x54>)
 8006d02:	f7fe fbe8 	bl	80054d6 <USBD_Start>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d0c:	f7f9 fbaa 	bl	8000464 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d10:	bf00      	nop
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	2000012c 	.word	0x2000012c
 8006d18:	20000664 	.word	0x20000664
 8006d1c:	20000018 	.word	0x20000018
 8006d20:	2000011c 	.word	0x2000011c

08006d24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006d28:	2200      	movs	r2, #0
 8006d2a:	4905      	ldr	r1, [pc, #20]	; (8006d40 <CDC_Init_FS+0x1c>)
 8006d2c:	4805      	ldr	r0, [pc, #20]	; (8006d44 <CDC_Init_FS+0x20>)
 8006d2e:	f7fe fb09 	bl	8005344 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006d32:	4905      	ldr	r1, [pc, #20]	; (8006d48 <CDC_Init_FS+0x24>)
 8006d34:	4803      	ldr	r0, [pc, #12]	; (8006d44 <CDC_Init_FS+0x20>)
 8006d36:	f7fe fb1e 	bl	8005376 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006d3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000d10 	.word	0x20000d10
 8006d44:	20000664 	.word	0x20000664
 8006d48:	20000928 	.word	0x20000928

08006d4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc80      	pop	{r7}
 8006d58:	4770      	bx	lr
	...

08006d5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	4603      	mov	r3, r0
 8006d64:	6039      	str	r1, [r7, #0]
 8006d66:	71fb      	strb	r3, [r7, #7]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
 8006d6e:	2b23      	cmp	r3, #35	; 0x23
 8006d70:	d84a      	bhi.n	8006e08 <CDC_Control_FS+0xac>
 8006d72:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <CDC_Control_FS+0x1c>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006e09 	.word	0x08006e09
 8006d7c:	08006e09 	.word	0x08006e09
 8006d80:	08006e09 	.word	0x08006e09
 8006d84:	08006e09 	.word	0x08006e09
 8006d88:	08006e09 	.word	0x08006e09
 8006d8c:	08006e09 	.word	0x08006e09
 8006d90:	08006e09 	.word	0x08006e09
 8006d94:	08006e09 	.word	0x08006e09
 8006d98:	08006e09 	.word	0x08006e09
 8006d9c:	08006e09 	.word	0x08006e09
 8006da0:	08006e09 	.word	0x08006e09
 8006da4:	08006e09 	.word	0x08006e09
 8006da8:	08006e09 	.word	0x08006e09
 8006dac:	08006e09 	.word	0x08006e09
 8006db0:	08006e09 	.word	0x08006e09
 8006db4:	08006e09 	.word	0x08006e09
 8006db8:	08006e09 	.word	0x08006e09
 8006dbc:	08006e09 	.word	0x08006e09
 8006dc0:	08006e09 	.word	0x08006e09
 8006dc4:	08006e09 	.word	0x08006e09
 8006dc8:	08006e09 	.word	0x08006e09
 8006dcc:	08006e09 	.word	0x08006e09
 8006dd0:	08006e09 	.word	0x08006e09
 8006dd4:	08006e09 	.word	0x08006e09
 8006dd8:	08006e09 	.word	0x08006e09
 8006ddc:	08006e09 	.word	0x08006e09
 8006de0:	08006e09 	.word	0x08006e09
 8006de4:	08006e09 	.word	0x08006e09
 8006de8:	08006e09 	.word	0x08006e09
 8006dec:	08006e09 	.word	0x08006e09
 8006df0:	08006e09 	.word	0x08006e09
 8006df4:	08006e09 	.word	0x08006e09
 8006df8:	08006e09 	.word	0x08006e09
 8006dfc:	08006e09 	.word	0x08006e09
 8006e00:	08006e09 	.word	0x08006e09
 8006e04:	08006e09 	.word	0x08006e09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006e08:	bf00      	nop
  }

  return (USBD_OK);
 8006e0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop

08006e18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e22:	6879      	ldr	r1, [r7, #4]
 8006e24:	4817      	ldr	r0, [pc, #92]	; (8006e84 <CDC_Receive_FS+0x6c>)
 8006e26:	f7fe faa6 	bl	8005376 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e2a:	4816      	ldr	r0, [pc, #88]	; (8006e84 <CDC_Receive_FS+0x6c>)
 8006e2c:	f7fe fae5 	bl	80053fa <USBD_CDC_ReceivePacket>
  uint16_t my_len;
  uint16_t orig_len = *Len;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	81fb      	strh	r3, [r7, #14]
  my_len = *Len;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	82fb      	strh	r3, [r7, #22]
  uint8_t* chr = Buf;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	613b      	str	r3, [r7, #16]
  while(my_len--) {
 8006e40:	e011      	b.n	8006e66 <CDC_Receive_FS+0x4e>
	  if (*chr >= 'a' && *chr <= 'z')
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b60      	cmp	r3, #96	; 0x60
 8006e48:	d90a      	bls.n	8006e60 <CDC_Receive_FS+0x48>
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b7a      	cmp	r3, #122	; 0x7a
 8006e50:	d806      	bhi.n	8006e60 <CDC_Receive_FS+0x48>
		  *chr = *chr & 0xDF;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	f023 0320 	bic.w	r3, r3, #32
 8006e5a:	b2da      	uxtb	r2, r3
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	701a      	strb	r2, [r3, #0]
	  chr++;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	3301      	adds	r3, #1
 8006e64:	613b      	str	r3, [r7, #16]
  while(my_len--) {
 8006e66:	8afb      	ldrh	r3, [r7, #22]
 8006e68:	1e5a      	subs	r2, r3, #1
 8006e6a:	82fa      	strh	r2, [r7, #22]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e8      	bne.n	8006e42 <CDC_Receive_FS+0x2a>
  }
  CDC_Transmit_FS(Buf, orig_len); // Echo
 8006e70:	89fb      	ldrh	r3, [r7, #14]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f807 	bl	8006e88 <CDC_Transmit_FS>
  return (USBD_OK);
 8006e7a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000664 	.word	0x20000664

08006e88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006e98:	4b0d      	ldr	r3, [pc, #52]	; (8006ed0 <CDC_Transmit_FS+0x48>)
 8006e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e00b      	b.n	8006ec6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006eae:	887b      	ldrh	r3, [r7, #2]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	6879      	ldr	r1, [r7, #4]
 8006eb4:	4806      	ldr	r0, [pc, #24]	; (8006ed0 <CDC_Transmit_FS+0x48>)
 8006eb6:	f7fe fa45 	bl	8005344 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006eba:	4805      	ldr	r0, [pc, #20]	; (8006ed0 <CDC_Transmit_FS+0x48>)
 8006ebc:	f7fe fa6e 	bl	800539c <USBD_CDC_TransmitPacket>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000664 	.word	0x20000664

08006ed4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	6039      	str	r1, [r7, #0]
 8006ede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2212      	movs	r2, #18
 8006ee4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ee6:	4b03      	ldr	r3, [pc, #12]	; (8006ef4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	20000148 	.word	0x20000148

08006ef8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	4603      	mov	r3, r0
 8006f00:	6039      	str	r1, [r7, #0]
 8006f02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2204      	movs	r2, #4
 8006f08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f0a:	4b03      	ldr	r3, [pc, #12]	; (8006f18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bc80      	pop	{r7}
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	2000015c 	.word	0x2000015c

08006f1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	6039      	str	r1, [r7, #0]
 8006f26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d105      	bne.n	8006f3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	4907      	ldr	r1, [pc, #28]	; (8006f50 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f32:	4808      	ldr	r0, [pc, #32]	; (8006f54 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f34:	f7ff fa48 	bl	80063c8 <USBD_GetString>
 8006f38:	e004      	b.n	8006f44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	4904      	ldr	r1, [pc, #16]	; (8006f50 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f3e:	4805      	ldr	r0, [pc, #20]	; (8006f54 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f40:	f7ff fa42 	bl	80063c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f44:	4b02      	ldr	r3, [pc, #8]	; (8006f50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	200010f8 	.word	0x200010f8
 8006f54:	08008050 	.word	0x08008050

08006f58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	6039      	str	r1, [r7, #0]
 8006f62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	4904      	ldr	r1, [pc, #16]	; (8006f78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f68:	4804      	ldr	r0, [pc, #16]	; (8006f7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f6a:	f7ff fa2d 	bl	80063c8 <USBD_GetString>
  return USBD_StrDesc;
 8006f6e:	4b02      	ldr	r3, [pc, #8]	; (8006f78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	200010f8 	.word	0x200010f8
 8006f7c:	08008068 	.word	0x08008068

08006f80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	6039      	str	r1, [r7, #0]
 8006f8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	221a      	movs	r2, #26
 8006f90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f92:	f000 f843 	bl	800701c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f96:	4b02      	ldr	r3, [pc, #8]	; (8006fa0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20000160 	.word	0x20000160

08006fa4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	6039      	str	r1, [r7, #0]
 8006fae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d105      	bne.n	8006fc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	4907      	ldr	r1, [pc, #28]	; (8006fd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fba:	4808      	ldr	r0, [pc, #32]	; (8006fdc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fbc:	f7ff fa04 	bl	80063c8 <USBD_GetString>
 8006fc0:	e004      	b.n	8006fcc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	4904      	ldr	r1, [pc, #16]	; (8006fd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fc6:	4805      	ldr	r0, [pc, #20]	; (8006fdc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fc8:	f7ff f9fe 	bl	80063c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fcc:	4b02      	ldr	r3, [pc, #8]	; (8006fd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	200010f8 	.word	0x200010f8
 8006fdc:	0800807c 	.word	0x0800807c

08006fe0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	6039      	str	r1, [r7, #0]
 8006fea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d105      	bne.n	8006ffe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	4907      	ldr	r1, [pc, #28]	; (8007014 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ff6:	4808      	ldr	r0, [pc, #32]	; (8007018 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ff8:	f7ff f9e6 	bl	80063c8 <USBD_GetString>
 8006ffc:	e004      	b.n	8007008 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	4904      	ldr	r1, [pc, #16]	; (8007014 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007002:	4805      	ldr	r0, [pc, #20]	; (8007018 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007004:	f7ff f9e0 	bl	80063c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007008:	4b02      	ldr	r3, [pc, #8]	; (8007014 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	200010f8 	.word	0x200010f8
 8007018:	08008088 	.word	0x08008088

0800701c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007022:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <Get_SerialNum+0x44>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007028:	4b0e      	ldr	r3, [pc, #56]	; (8007064 <Get_SerialNum+0x48>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800702e:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <Get_SerialNum+0x4c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4413      	add	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d009      	beq.n	8007056 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007042:	2208      	movs	r2, #8
 8007044:	4909      	ldr	r1, [pc, #36]	; (800706c <Get_SerialNum+0x50>)
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f814 	bl	8007074 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800704c:	2204      	movs	r2, #4
 800704e:	4908      	ldr	r1, [pc, #32]	; (8007070 <Get_SerialNum+0x54>)
 8007050:	68b8      	ldr	r0, [r7, #8]
 8007052:	f000 f80f 	bl	8007074 <IntToUnicode>
  }
}
 8007056:	bf00      	nop
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	1ffff7e8 	.word	0x1ffff7e8
 8007064:	1ffff7ec 	.word	0x1ffff7ec
 8007068:	1ffff7f0 	.word	0x1ffff7f0
 800706c:	20000162 	.word	0x20000162
 8007070:	20000172 	.word	0x20000172

08007074 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	4613      	mov	r3, r2
 8007080:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007086:	2300      	movs	r3, #0
 8007088:	75fb      	strb	r3, [r7, #23]
 800708a:	e027      	b.n	80070dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	0f1b      	lsrs	r3, r3, #28
 8007090:	2b09      	cmp	r3, #9
 8007092:	d80b      	bhi.n	80070ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	0f1b      	lsrs	r3, r3, #28
 8007098:	b2da      	uxtb	r2, r3
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	4619      	mov	r1, r3
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	440b      	add	r3, r1
 80070a4:	3230      	adds	r2, #48	; 0x30
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	e00a      	b.n	80070c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	0f1b      	lsrs	r3, r3, #28
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	4619      	mov	r1, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	440b      	add	r3, r1
 80070bc:	3237      	adds	r2, #55	; 0x37
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	3301      	adds	r3, #1
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	4413      	add	r3, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	3301      	adds	r3, #1
 80070da:	75fb      	strb	r3, [r7, #23]
 80070dc:	7dfa      	ldrb	r2, [r7, #23]
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d3d3      	bcc.n	800708c <IntToUnicode+0x18>
  }
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	371c      	adds	r7, #28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr

080070f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a0d      	ldr	r2, [pc, #52]	; (8007134 <HAL_PCD_MspInit+0x44>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d113      	bne.n	800712a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007102:	4b0d      	ldr	r3, [pc, #52]	; (8007138 <HAL_PCD_MspInit+0x48>)
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	4a0c      	ldr	r2, [pc, #48]	; (8007138 <HAL_PCD_MspInit+0x48>)
 8007108:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800710c:	61d3      	str	r3, [r2, #28]
 800710e:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <HAL_PCD_MspInit+0x48>)
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800711a:	2200      	movs	r2, #0
 800711c:	2100      	movs	r1, #0
 800711e:	2014      	movs	r0, #20
 8007120:	f7f9 fbd9 	bl	80008d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007124:	2014      	movs	r0, #20
 8007126:	f7f9 fbf2 	bl	800090e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800712a:	bf00      	nop
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	40005c00 	.word	0x40005c00
 8007138:	40021000 	.word	0x40021000

0800713c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f7fe fa07 	bl	8005566 <USBD_LL_SetupStage>
}
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007172:	78fa      	ldrb	r2, [r7, #3]
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	440b      	add	r3, r1
 8007180:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	78fb      	ldrb	r3, [r7, #3]
 8007188:	4619      	mov	r1, r3
 800718a:	f7fe fa39 	bl	8005600 <USBD_LL_DataOutStage>
}
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	460b      	mov	r3, r1
 80071a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80071a8:	78fa      	ldrb	r2, [r7, #3]
 80071aa:	6879      	ldr	r1, [r7, #4]
 80071ac:	4613      	mov	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	440b      	add	r3, r1
 80071b6:	333c      	adds	r3, #60	; 0x3c
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	78fb      	ldrb	r3, [r7, #3]
 80071bc:	4619      	mov	r1, r3
 80071be:	f7fe fa90 	bl	80056e2 <USBD_LL_DataInStage>
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fba0 	bl	800591e <USBD_LL_SOF>
}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80071ee:	2301      	movs	r3, #1
 80071f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d001      	beq.n	80071fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80071fa:	f7f9 f933 	bl	8000464 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007204:	7bfa      	ldrb	r2, [r7, #15]
 8007206:	4611      	mov	r1, r2
 8007208:	4618      	mov	r0, r3
 800720a:	f7fe fb50 	bl	80058ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007214:	4618      	mov	r0, r3
 8007216:	f7fe fb09 	bl	800582c <USBD_LL_Reset>
}
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fb4a 	bl	80058cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007240:	4b04      	ldr	r3, [pc, #16]	; (8007254 <HAL_PCD_SuspendCallback+0x30>)
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	4a03      	ldr	r2, [pc, #12]	; (8007254 <HAL_PCD_SuspendCallback+0x30>)
 8007246:	f043 0306 	orr.w	r3, r3, #6
 800724a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	e000ed00 	.word	0xe000ed00

08007258 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fb44 	bl	80058f4 <USBD_LL_Resume>
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800727c:	4a28      	ldr	r2, [pc, #160]	; (8007320 <USBD_LL_Init+0xac>)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a26      	ldr	r2, [pc, #152]	; (8007320 <USBD_LL_Init+0xac>)
 8007288:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800728c:	4b24      	ldr	r3, [pc, #144]	; (8007320 <USBD_LL_Init+0xac>)
 800728e:	4a25      	ldr	r2, [pc, #148]	; (8007324 <USBD_LL_Init+0xb0>)
 8007290:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007292:	4b23      	ldr	r3, [pc, #140]	; (8007320 <USBD_LL_Init+0xac>)
 8007294:	2208      	movs	r2, #8
 8007296:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007298:	4b21      	ldr	r3, [pc, #132]	; (8007320 <USBD_LL_Init+0xac>)
 800729a:	2202      	movs	r2, #2
 800729c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800729e:	4b20      	ldr	r3, [pc, #128]	; (8007320 <USBD_LL_Init+0xac>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80072a4:	4b1e      	ldr	r3, [pc, #120]	; (8007320 <USBD_LL_Init+0xac>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80072aa:	4b1d      	ldr	r3, [pc, #116]	; (8007320 <USBD_LL_Init+0xac>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80072b0:	481b      	ldr	r0, [pc, #108]	; (8007320 <USBD_LL_Init+0xac>)
 80072b2:	f7f9 fd13 	bl	8000cdc <HAL_PCD_Init>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80072bc:	f7f9 f8d2 	bl	8000464 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072c6:	2318      	movs	r3, #24
 80072c8:	2200      	movs	r2, #0
 80072ca:	2100      	movs	r1, #0
 80072cc:	f7fb f855 	bl	800237a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072d6:	2358      	movs	r3, #88	; 0x58
 80072d8:	2200      	movs	r2, #0
 80072da:	2180      	movs	r1, #128	; 0x80
 80072dc:	f7fb f84d 	bl	800237a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072e6:	23c0      	movs	r3, #192	; 0xc0
 80072e8:	2200      	movs	r2, #0
 80072ea:	2181      	movs	r1, #129	; 0x81
 80072ec:	f7fb f845 	bl	800237a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80072fa:	2200      	movs	r2, #0
 80072fc:	2101      	movs	r1, #1
 80072fe:	f7fb f83c 	bl	800237a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800730c:	2200      	movs	r2, #0
 800730e:	2182      	movs	r1, #130	; 0x82
 8007310:	f7fb f833 	bl	800237a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	200012f8 	.word	0x200012f8
 8007324:	40005c00 	.word	0x40005c00

08007328 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800733e:	4618      	mov	r0, r3
 8007340:	f7f9 fdd7 	bl	8000ef2 <HAL_PCD_Start>
 8007344:	4603      	mov	r3, r0
 8007346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 f94e 	bl	80075ec <USBD_Get_USB_Status>
 8007350:	4603      	mov	r3, r0
 8007352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007354:	7bbb      	ldrb	r3, [r7, #14]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	4608      	mov	r0, r1
 8007368:	4611      	mov	r1, r2
 800736a:	461a      	mov	r2, r3
 800736c:	4603      	mov	r3, r0
 800736e:	70fb      	strb	r3, [r7, #3]
 8007370:	460b      	mov	r3, r1
 8007372:	70bb      	strb	r3, [r7, #2]
 8007374:	4613      	mov	r3, r2
 8007376:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007386:	78bb      	ldrb	r3, [r7, #2]
 8007388:	883a      	ldrh	r2, [r7, #0]
 800738a:	78f9      	ldrb	r1, [r7, #3]
 800738c:	f7f9 ff51 	bl	8001232 <HAL_PCD_EP_Open>
 8007390:	4603      	mov	r3, r0
 8007392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 f928 	bl	80075ec <USBD_Get_USB_Status>
 800739c:	4603      	mov	r3, r0
 800739e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	460b      	mov	r3, r1
 80073b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073c4:	78fa      	ldrb	r2, [r7, #3]
 80073c6:	4611      	mov	r1, r2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7f9 ff98 	bl	80012fe <HAL_PCD_EP_Close>
 80073ce:	4603      	mov	r3, r0
 80073d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f000 f909 	bl	80075ec <USBD_Get_USB_Status>
 80073da:	4603      	mov	r3, r0
 80073dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073de:	7bbb      	ldrb	r3, [r7, #14]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	4611      	mov	r1, r2
 8007406:	4618      	mov	r0, r3
 8007408:	f7fa f858 	bl	80014bc <HAL_PCD_EP_SetStall>
 800740c:	4603      	mov	r3, r0
 800740e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 f8ea 	bl	80075ec <USBD_Get_USB_Status>
 8007418:	4603      	mov	r3, r0
 800741a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800741c:	7bbb      	ldrb	r3, [r7, #14]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007440:	78fa      	ldrb	r2, [r7, #3]
 8007442:	4611      	mov	r1, r2
 8007444:	4618      	mov	r0, r3
 8007446:	f7fa f899 	bl	800157c <HAL_PCD_EP_ClrStall>
 800744a:	4603      	mov	r3, r0
 800744c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	4618      	mov	r0, r3
 8007452:	f000 f8cb 	bl	80075ec <USBD_Get_USB_Status>
 8007456:	4603      	mov	r3, r0
 8007458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800745a:	7bbb      	ldrb	r3, [r7, #14]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007476:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800747c:	2b00      	cmp	r3, #0
 800747e:	da0c      	bge.n	800749a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007486:	68f9      	ldr	r1, [r7, #12]
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	440b      	add	r3, r1
 8007494:	3302      	adds	r3, #2
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	e00b      	b.n	80074b2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800749a:	78fb      	ldrb	r3, [r7, #3]
 800749c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074a0:	68f9      	ldr	r1, [r7, #12]
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	00db      	lsls	r3, r3, #3
 80074aa:	440b      	add	r3, r1
 80074ac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80074b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bc80      	pop	{r7}
 80074ba:	4770      	bx	lr

080074bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074d6:	78fa      	ldrb	r2, [r7, #3]
 80074d8:	4611      	mov	r1, r2
 80074da:	4618      	mov	r0, r3
 80074dc:	f7f9 fe84 	bl	80011e8 <HAL_PCD_SetAddress>
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f880 	bl	80075ec <USBD_Get_USB_Status>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b086      	sub	sp, #24
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	461a      	mov	r2, r3
 8007506:	460b      	mov	r3, r1
 8007508:	72fb      	strb	r3, [r7, #11]
 800750a:	4613      	mov	r3, r2
 800750c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800751c:	893b      	ldrh	r3, [r7, #8]
 800751e:	7af9      	ldrb	r1, [r7, #11]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	f7f9 ff88 	bl	8001436 <HAL_PCD_EP_Transmit>
 8007526:	4603      	mov	r3, r0
 8007528:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	4618      	mov	r0, r3
 800752e:	f000 f85d 	bl	80075ec <USBD_Get_USB_Status>
 8007532:	4603      	mov	r3, r0
 8007534:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007536:	7dbb      	ldrb	r3, [r7, #22]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	607a      	str	r2, [r7, #4]
 800754a:	461a      	mov	r2, r3
 800754c:	460b      	mov	r3, r1
 800754e:	72fb      	strb	r3, [r7, #11]
 8007550:	4613      	mov	r3, r2
 8007552:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007562:	893b      	ldrh	r3, [r7, #8]
 8007564:	7af9      	ldrb	r1, [r7, #11]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	f7f9 ff11 	bl	800138e <HAL_PCD_EP_Receive>
 800756c:	4603      	mov	r3, r0
 800756e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	4618      	mov	r0, r3
 8007574:	f000 f83a 	bl	80075ec <USBD_Get_USB_Status>
 8007578:	4603      	mov	r3, r0
 800757a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800757c:	7dbb      	ldrb	r3, [r7, #22]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	460b      	mov	r3, r1
 8007590:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	4611      	mov	r1, r2
 800759c:	4618      	mov	r0, r3
 800759e:	f7f9 ff33 	bl	8001408 <HAL_PCD_EP_GetRxCount>
 80075a2:	4603      	mov	r3, r0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80075b4:	4b02      	ldr	r3, [pc, #8]	; (80075c0 <USBD_static_malloc+0x14>)
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bc80      	pop	{r7}
 80075be:	4770      	bx	lr
 80075c0:	20000420 	.word	0x20000420

080075c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]

}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bc80      	pop	{r7}
 80075d4:	4770      	bx	lr

080075d6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr

080075ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d817      	bhi.n	8007630 <USBD_Get_USB_Status+0x44>
 8007600:	a201      	add	r2, pc, #4	; (adr r2, 8007608 <USBD_Get_USB_Status+0x1c>)
 8007602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007606:	bf00      	nop
 8007608:	08007619 	.word	0x08007619
 800760c:	0800761f 	.word	0x0800761f
 8007610:	08007625 	.word	0x08007625
 8007614:	0800762b 	.word	0x0800762b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73fb      	strb	r3, [r7, #15]
    break;
 800761c:	e00b      	b.n	8007636 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800761e:	2302      	movs	r3, #2
 8007620:	73fb      	strb	r3, [r7, #15]
    break;
 8007622:	e008      	b.n	8007636 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007624:	2301      	movs	r3, #1
 8007626:	73fb      	strb	r3, [r7, #15]
    break;
 8007628:	e005      	b.n	8007636 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800762a:	2302      	movs	r3, #2
 800762c:	73fb      	strb	r3, [r7, #15]
    break;
 800762e:	e002      	b.n	8007636 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007630:	2302      	movs	r3, #2
 8007632:	73fb      	strb	r3, [r7, #15]
    break;
 8007634:	bf00      	nop
  }
  return usb_status;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop

08007644 <__errno>:
 8007644:	4b01      	ldr	r3, [pc, #4]	; (800764c <__errno+0x8>)
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	2000017c 	.word	0x2000017c

08007650 <__libc_init_array>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	2600      	movs	r6, #0
 8007654:	4d0c      	ldr	r5, [pc, #48]	; (8007688 <__libc_init_array+0x38>)
 8007656:	4c0d      	ldr	r4, [pc, #52]	; (800768c <__libc_init_array+0x3c>)
 8007658:	1b64      	subs	r4, r4, r5
 800765a:	10a4      	asrs	r4, r4, #2
 800765c:	42a6      	cmp	r6, r4
 800765e:	d109      	bne.n	8007674 <__libc_init_array+0x24>
 8007660:	f000 fc5c 	bl	8007f1c <_init>
 8007664:	2600      	movs	r6, #0
 8007666:	4d0a      	ldr	r5, [pc, #40]	; (8007690 <__libc_init_array+0x40>)
 8007668:	4c0a      	ldr	r4, [pc, #40]	; (8007694 <__libc_init_array+0x44>)
 800766a:	1b64      	subs	r4, r4, r5
 800766c:	10a4      	asrs	r4, r4, #2
 800766e:	42a6      	cmp	r6, r4
 8007670:	d105      	bne.n	800767e <__libc_init_array+0x2e>
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	f855 3b04 	ldr.w	r3, [r5], #4
 8007678:	4798      	blx	r3
 800767a:	3601      	adds	r6, #1
 800767c:	e7ee      	b.n	800765c <__libc_init_array+0xc>
 800767e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007682:	4798      	blx	r3
 8007684:	3601      	adds	r6, #1
 8007686:	e7f2      	b.n	800766e <__libc_init_array+0x1e>
 8007688:	080080dc 	.word	0x080080dc
 800768c:	080080dc 	.word	0x080080dc
 8007690:	080080dc 	.word	0x080080dc
 8007694:	080080e0 	.word	0x080080e0

08007698 <memset>:
 8007698:	4603      	mov	r3, r0
 800769a:	4402      	add	r2, r0
 800769c:	4293      	cmp	r3, r2
 800769e:	d100      	bne.n	80076a2 <memset+0xa>
 80076a0:	4770      	bx	lr
 80076a2:	f803 1b01 	strb.w	r1, [r3], #1
 80076a6:	e7f9      	b.n	800769c <memset+0x4>

080076a8 <_vsiprintf_r>:
 80076a8:	b500      	push	{lr}
 80076aa:	b09b      	sub	sp, #108	; 0x6c
 80076ac:	9100      	str	r1, [sp, #0]
 80076ae:	9104      	str	r1, [sp, #16]
 80076b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076b4:	9105      	str	r1, [sp, #20]
 80076b6:	9102      	str	r1, [sp, #8]
 80076b8:	4905      	ldr	r1, [pc, #20]	; (80076d0 <_vsiprintf_r+0x28>)
 80076ba:	9103      	str	r1, [sp, #12]
 80076bc:	4669      	mov	r1, sp
 80076be:	f000 f86f 	bl	80077a0 <_svfiprintf_r>
 80076c2:	2200      	movs	r2, #0
 80076c4:	9b00      	ldr	r3, [sp, #0]
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	b01b      	add	sp, #108	; 0x6c
 80076ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80076ce:	bf00      	nop
 80076d0:	ffff0208 	.word	0xffff0208

080076d4 <vsiprintf>:
 80076d4:	4613      	mov	r3, r2
 80076d6:	460a      	mov	r2, r1
 80076d8:	4601      	mov	r1, r0
 80076da:	4802      	ldr	r0, [pc, #8]	; (80076e4 <vsiprintf+0x10>)
 80076dc:	6800      	ldr	r0, [r0, #0]
 80076de:	f7ff bfe3 	b.w	80076a8 <_vsiprintf_r>
 80076e2:	bf00      	nop
 80076e4:	2000017c 	.word	0x2000017c

080076e8 <__ssputs_r>:
 80076e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ec:	688e      	ldr	r6, [r1, #8]
 80076ee:	4682      	mov	sl, r0
 80076f0:	429e      	cmp	r6, r3
 80076f2:	460c      	mov	r4, r1
 80076f4:	4690      	mov	r8, r2
 80076f6:	461f      	mov	r7, r3
 80076f8:	d838      	bhi.n	800776c <__ssputs_r+0x84>
 80076fa:	898a      	ldrh	r2, [r1, #12]
 80076fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007700:	d032      	beq.n	8007768 <__ssputs_r+0x80>
 8007702:	6825      	ldr	r5, [r4, #0]
 8007704:	6909      	ldr	r1, [r1, #16]
 8007706:	3301      	adds	r3, #1
 8007708:	eba5 0901 	sub.w	r9, r5, r1
 800770c:	6965      	ldr	r5, [r4, #20]
 800770e:	444b      	add	r3, r9
 8007710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007714:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007718:	106d      	asrs	r5, r5, #1
 800771a:	429d      	cmp	r5, r3
 800771c:	bf38      	it	cc
 800771e:	461d      	movcc	r5, r3
 8007720:	0553      	lsls	r3, r2, #21
 8007722:	d531      	bpl.n	8007788 <__ssputs_r+0xa0>
 8007724:	4629      	mov	r1, r5
 8007726:	f000 fb53 	bl	8007dd0 <_malloc_r>
 800772a:	4606      	mov	r6, r0
 800772c:	b950      	cbnz	r0, 8007744 <__ssputs_r+0x5c>
 800772e:	230c      	movs	r3, #12
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	f8ca 3000 	str.w	r3, [sl]
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800773e:	81a3      	strh	r3, [r4, #12]
 8007740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007744:	464a      	mov	r2, r9
 8007746:	6921      	ldr	r1, [r4, #16]
 8007748:	f000 face 	bl	8007ce8 <memcpy>
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007756:	81a3      	strh	r3, [r4, #12]
 8007758:	6126      	str	r6, [r4, #16]
 800775a:	444e      	add	r6, r9
 800775c:	6026      	str	r6, [r4, #0]
 800775e:	463e      	mov	r6, r7
 8007760:	6165      	str	r5, [r4, #20]
 8007762:	eba5 0509 	sub.w	r5, r5, r9
 8007766:	60a5      	str	r5, [r4, #8]
 8007768:	42be      	cmp	r6, r7
 800776a:	d900      	bls.n	800776e <__ssputs_r+0x86>
 800776c:	463e      	mov	r6, r7
 800776e:	4632      	mov	r2, r6
 8007770:	4641      	mov	r1, r8
 8007772:	6820      	ldr	r0, [r4, #0]
 8007774:	f000 fac6 	bl	8007d04 <memmove>
 8007778:	68a3      	ldr	r3, [r4, #8]
 800777a:	6822      	ldr	r2, [r4, #0]
 800777c:	1b9b      	subs	r3, r3, r6
 800777e:	4432      	add	r2, r6
 8007780:	2000      	movs	r0, #0
 8007782:	60a3      	str	r3, [r4, #8]
 8007784:	6022      	str	r2, [r4, #0]
 8007786:	e7db      	b.n	8007740 <__ssputs_r+0x58>
 8007788:	462a      	mov	r2, r5
 800778a:	f000 fb7b 	bl	8007e84 <_realloc_r>
 800778e:	4606      	mov	r6, r0
 8007790:	2800      	cmp	r0, #0
 8007792:	d1e1      	bne.n	8007758 <__ssputs_r+0x70>
 8007794:	4650      	mov	r0, sl
 8007796:	6921      	ldr	r1, [r4, #16]
 8007798:	f000 face 	bl	8007d38 <_free_r>
 800779c:	e7c7      	b.n	800772e <__ssputs_r+0x46>
	...

080077a0 <_svfiprintf_r>:
 80077a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	4698      	mov	r8, r3
 80077a6:	898b      	ldrh	r3, [r1, #12]
 80077a8:	4607      	mov	r7, r0
 80077aa:	061b      	lsls	r3, r3, #24
 80077ac:	460d      	mov	r5, r1
 80077ae:	4614      	mov	r4, r2
 80077b0:	b09d      	sub	sp, #116	; 0x74
 80077b2:	d50e      	bpl.n	80077d2 <_svfiprintf_r+0x32>
 80077b4:	690b      	ldr	r3, [r1, #16]
 80077b6:	b963      	cbnz	r3, 80077d2 <_svfiprintf_r+0x32>
 80077b8:	2140      	movs	r1, #64	; 0x40
 80077ba:	f000 fb09 	bl	8007dd0 <_malloc_r>
 80077be:	6028      	str	r0, [r5, #0]
 80077c0:	6128      	str	r0, [r5, #16]
 80077c2:	b920      	cbnz	r0, 80077ce <_svfiprintf_r+0x2e>
 80077c4:	230c      	movs	r3, #12
 80077c6:	603b      	str	r3, [r7, #0]
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	e0d1      	b.n	8007972 <_svfiprintf_r+0x1d2>
 80077ce:	2340      	movs	r3, #64	; 0x40
 80077d0:	616b      	str	r3, [r5, #20]
 80077d2:	2300      	movs	r3, #0
 80077d4:	9309      	str	r3, [sp, #36]	; 0x24
 80077d6:	2320      	movs	r3, #32
 80077d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077dc:	2330      	movs	r3, #48	; 0x30
 80077de:	f04f 0901 	mov.w	r9, #1
 80077e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80077e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800798c <_svfiprintf_r+0x1ec>
 80077ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077ee:	4623      	mov	r3, r4
 80077f0:	469a      	mov	sl, r3
 80077f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077f6:	b10a      	cbz	r2, 80077fc <_svfiprintf_r+0x5c>
 80077f8:	2a25      	cmp	r2, #37	; 0x25
 80077fa:	d1f9      	bne.n	80077f0 <_svfiprintf_r+0x50>
 80077fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007800:	d00b      	beq.n	800781a <_svfiprintf_r+0x7a>
 8007802:	465b      	mov	r3, fp
 8007804:	4622      	mov	r2, r4
 8007806:	4629      	mov	r1, r5
 8007808:	4638      	mov	r0, r7
 800780a:	f7ff ff6d 	bl	80076e8 <__ssputs_r>
 800780e:	3001      	adds	r0, #1
 8007810:	f000 80aa 	beq.w	8007968 <_svfiprintf_r+0x1c8>
 8007814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007816:	445a      	add	r2, fp
 8007818:	9209      	str	r2, [sp, #36]	; 0x24
 800781a:	f89a 3000 	ldrb.w	r3, [sl]
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 80a2 	beq.w	8007968 <_svfiprintf_r+0x1c8>
 8007824:	2300      	movs	r3, #0
 8007826:	f04f 32ff 	mov.w	r2, #4294967295
 800782a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800782e:	f10a 0a01 	add.w	sl, sl, #1
 8007832:	9304      	str	r3, [sp, #16]
 8007834:	9307      	str	r3, [sp, #28]
 8007836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800783a:	931a      	str	r3, [sp, #104]	; 0x68
 800783c:	4654      	mov	r4, sl
 800783e:	2205      	movs	r2, #5
 8007840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007844:	4851      	ldr	r0, [pc, #324]	; (800798c <_svfiprintf_r+0x1ec>)
 8007846:	f000 fa41 	bl	8007ccc <memchr>
 800784a:	9a04      	ldr	r2, [sp, #16]
 800784c:	b9d8      	cbnz	r0, 8007886 <_svfiprintf_r+0xe6>
 800784e:	06d0      	lsls	r0, r2, #27
 8007850:	bf44      	itt	mi
 8007852:	2320      	movmi	r3, #32
 8007854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007858:	0711      	lsls	r1, r2, #28
 800785a:	bf44      	itt	mi
 800785c:	232b      	movmi	r3, #43	; 0x2b
 800785e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007862:	f89a 3000 	ldrb.w	r3, [sl]
 8007866:	2b2a      	cmp	r3, #42	; 0x2a
 8007868:	d015      	beq.n	8007896 <_svfiprintf_r+0xf6>
 800786a:	4654      	mov	r4, sl
 800786c:	2000      	movs	r0, #0
 800786e:	f04f 0c0a 	mov.w	ip, #10
 8007872:	9a07      	ldr	r2, [sp, #28]
 8007874:	4621      	mov	r1, r4
 8007876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800787a:	3b30      	subs	r3, #48	; 0x30
 800787c:	2b09      	cmp	r3, #9
 800787e:	d94e      	bls.n	800791e <_svfiprintf_r+0x17e>
 8007880:	b1b0      	cbz	r0, 80078b0 <_svfiprintf_r+0x110>
 8007882:	9207      	str	r2, [sp, #28]
 8007884:	e014      	b.n	80078b0 <_svfiprintf_r+0x110>
 8007886:	eba0 0308 	sub.w	r3, r0, r8
 800788a:	fa09 f303 	lsl.w	r3, r9, r3
 800788e:	4313      	orrs	r3, r2
 8007890:	46a2      	mov	sl, r4
 8007892:	9304      	str	r3, [sp, #16]
 8007894:	e7d2      	b.n	800783c <_svfiprintf_r+0x9c>
 8007896:	9b03      	ldr	r3, [sp, #12]
 8007898:	1d19      	adds	r1, r3, #4
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	9103      	str	r1, [sp, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bfbb      	ittet	lt
 80078a2:	425b      	neglt	r3, r3
 80078a4:	f042 0202 	orrlt.w	r2, r2, #2
 80078a8:	9307      	strge	r3, [sp, #28]
 80078aa:	9307      	strlt	r3, [sp, #28]
 80078ac:	bfb8      	it	lt
 80078ae:	9204      	strlt	r2, [sp, #16]
 80078b0:	7823      	ldrb	r3, [r4, #0]
 80078b2:	2b2e      	cmp	r3, #46	; 0x2e
 80078b4:	d10c      	bne.n	80078d0 <_svfiprintf_r+0x130>
 80078b6:	7863      	ldrb	r3, [r4, #1]
 80078b8:	2b2a      	cmp	r3, #42	; 0x2a
 80078ba:	d135      	bne.n	8007928 <_svfiprintf_r+0x188>
 80078bc:	9b03      	ldr	r3, [sp, #12]
 80078be:	3402      	adds	r4, #2
 80078c0:	1d1a      	adds	r2, r3, #4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	9203      	str	r2, [sp, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	bfb8      	it	lt
 80078ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80078ce:	9305      	str	r3, [sp, #20]
 80078d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800799c <_svfiprintf_r+0x1fc>
 80078d4:	2203      	movs	r2, #3
 80078d6:	4650      	mov	r0, sl
 80078d8:	7821      	ldrb	r1, [r4, #0]
 80078da:	f000 f9f7 	bl	8007ccc <memchr>
 80078de:	b140      	cbz	r0, 80078f2 <_svfiprintf_r+0x152>
 80078e0:	2340      	movs	r3, #64	; 0x40
 80078e2:	eba0 000a 	sub.w	r0, r0, sl
 80078e6:	fa03 f000 	lsl.w	r0, r3, r0
 80078ea:	9b04      	ldr	r3, [sp, #16]
 80078ec:	3401      	adds	r4, #1
 80078ee:	4303      	orrs	r3, r0
 80078f0:	9304      	str	r3, [sp, #16]
 80078f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f6:	2206      	movs	r2, #6
 80078f8:	4825      	ldr	r0, [pc, #148]	; (8007990 <_svfiprintf_r+0x1f0>)
 80078fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078fe:	f000 f9e5 	bl	8007ccc <memchr>
 8007902:	2800      	cmp	r0, #0
 8007904:	d038      	beq.n	8007978 <_svfiprintf_r+0x1d8>
 8007906:	4b23      	ldr	r3, [pc, #140]	; (8007994 <_svfiprintf_r+0x1f4>)
 8007908:	bb1b      	cbnz	r3, 8007952 <_svfiprintf_r+0x1b2>
 800790a:	9b03      	ldr	r3, [sp, #12]
 800790c:	3307      	adds	r3, #7
 800790e:	f023 0307 	bic.w	r3, r3, #7
 8007912:	3308      	adds	r3, #8
 8007914:	9303      	str	r3, [sp, #12]
 8007916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007918:	4433      	add	r3, r6
 800791a:	9309      	str	r3, [sp, #36]	; 0x24
 800791c:	e767      	b.n	80077ee <_svfiprintf_r+0x4e>
 800791e:	460c      	mov	r4, r1
 8007920:	2001      	movs	r0, #1
 8007922:	fb0c 3202 	mla	r2, ip, r2, r3
 8007926:	e7a5      	b.n	8007874 <_svfiprintf_r+0xd4>
 8007928:	2300      	movs	r3, #0
 800792a:	f04f 0c0a 	mov.w	ip, #10
 800792e:	4619      	mov	r1, r3
 8007930:	3401      	adds	r4, #1
 8007932:	9305      	str	r3, [sp, #20]
 8007934:	4620      	mov	r0, r4
 8007936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800793a:	3a30      	subs	r2, #48	; 0x30
 800793c:	2a09      	cmp	r2, #9
 800793e:	d903      	bls.n	8007948 <_svfiprintf_r+0x1a8>
 8007940:	2b00      	cmp	r3, #0
 8007942:	d0c5      	beq.n	80078d0 <_svfiprintf_r+0x130>
 8007944:	9105      	str	r1, [sp, #20]
 8007946:	e7c3      	b.n	80078d0 <_svfiprintf_r+0x130>
 8007948:	4604      	mov	r4, r0
 800794a:	2301      	movs	r3, #1
 800794c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007950:	e7f0      	b.n	8007934 <_svfiprintf_r+0x194>
 8007952:	ab03      	add	r3, sp, #12
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	462a      	mov	r2, r5
 8007958:	4638      	mov	r0, r7
 800795a:	4b0f      	ldr	r3, [pc, #60]	; (8007998 <_svfiprintf_r+0x1f8>)
 800795c:	a904      	add	r1, sp, #16
 800795e:	f3af 8000 	nop.w
 8007962:	1c42      	adds	r2, r0, #1
 8007964:	4606      	mov	r6, r0
 8007966:	d1d6      	bne.n	8007916 <_svfiprintf_r+0x176>
 8007968:	89ab      	ldrh	r3, [r5, #12]
 800796a:	065b      	lsls	r3, r3, #25
 800796c:	f53f af2c 	bmi.w	80077c8 <_svfiprintf_r+0x28>
 8007970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007972:	b01d      	add	sp, #116	; 0x74
 8007974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007978:	ab03      	add	r3, sp, #12
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	462a      	mov	r2, r5
 800797e:	4638      	mov	r0, r7
 8007980:	4b05      	ldr	r3, [pc, #20]	; (8007998 <_svfiprintf_r+0x1f8>)
 8007982:	a904      	add	r1, sp, #16
 8007984:	f000 f87c 	bl	8007a80 <_printf_i>
 8007988:	e7eb      	b.n	8007962 <_svfiprintf_r+0x1c2>
 800798a:	bf00      	nop
 800798c:	080080a8 	.word	0x080080a8
 8007990:	080080b2 	.word	0x080080b2
 8007994:	00000000 	.word	0x00000000
 8007998:	080076e9 	.word	0x080076e9
 800799c:	080080ae 	.word	0x080080ae

080079a0 <_printf_common>:
 80079a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a4:	4616      	mov	r6, r2
 80079a6:	4699      	mov	r9, r3
 80079a8:	688a      	ldr	r2, [r1, #8]
 80079aa:	690b      	ldr	r3, [r1, #16]
 80079ac:	4607      	mov	r7, r0
 80079ae:	4293      	cmp	r3, r2
 80079b0:	bfb8      	it	lt
 80079b2:	4613      	movlt	r3, r2
 80079b4:	6033      	str	r3, [r6, #0]
 80079b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079ba:	460c      	mov	r4, r1
 80079bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079c0:	b10a      	cbz	r2, 80079c6 <_printf_common+0x26>
 80079c2:	3301      	adds	r3, #1
 80079c4:	6033      	str	r3, [r6, #0]
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	0699      	lsls	r1, r3, #26
 80079ca:	bf42      	ittt	mi
 80079cc:	6833      	ldrmi	r3, [r6, #0]
 80079ce:	3302      	addmi	r3, #2
 80079d0:	6033      	strmi	r3, [r6, #0]
 80079d2:	6825      	ldr	r5, [r4, #0]
 80079d4:	f015 0506 	ands.w	r5, r5, #6
 80079d8:	d106      	bne.n	80079e8 <_printf_common+0x48>
 80079da:	f104 0a19 	add.w	sl, r4, #25
 80079de:	68e3      	ldr	r3, [r4, #12]
 80079e0:	6832      	ldr	r2, [r6, #0]
 80079e2:	1a9b      	subs	r3, r3, r2
 80079e4:	42ab      	cmp	r3, r5
 80079e6:	dc28      	bgt.n	8007a3a <_printf_common+0x9a>
 80079e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079ec:	1e13      	subs	r3, r2, #0
 80079ee:	6822      	ldr	r2, [r4, #0]
 80079f0:	bf18      	it	ne
 80079f2:	2301      	movne	r3, #1
 80079f4:	0692      	lsls	r2, r2, #26
 80079f6:	d42d      	bmi.n	8007a54 <_printf_common+0xb4>
 80079f8:	4649      	mov	r1, r9
 80079fa:	4638      	mov	r0, r7
 80079fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a00:	47c0      	blx	r8
 8007a02:	3001      	adds	r0, #1
 8007a04:	d020      	beq.n	8007a48 <_printf_common+0xa8>
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	68e5      	ldr	r5, [r4, #12]
 8007a0a:	f003 0306 	and.w	r3, r3, #6
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	bf18      	it	ne
 8007a12:	2500      	movne	r5, #0
 8007a14:	6832      	ldr	r2, [r6, #0]
 8007a16:	f04f 0600 	mov.w	r6, #0
 8007a1a:	68a3      	ldr	r3, [r4, #8]
 8007a1c:	bf08      	it	eq
 8007a1e:	1aad      	subeq	r5, r5, r2
 8007a20:	6922      	ldr	r2, [r4, #16]
 8007a22:	bf08      	it	eq
 8007a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	bfc4      	itt	gt
 8007a2c:	1a9b      	subgt	r3, r3, r2
 8007a2e:	18ed      	addgt	r5, r5, r3
 8007a30:	341a      	adds	r4, #26
 8007a32:	42b5      	cmp	r5, r6
 8007a34:	d11a      	bne.n	8007a6c <_printf_common+0xcc>
 8007a36:	2000      	movs	r0, #0
 8007a38:	e008      	b.n	8007a4c <_printf_common+0xac>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	4652      	mov	r2, sl
 8007a3e:	4649      	mov	r1, r9
 8007a40:	4638      	mov	r0, r7
 8007a42:	47c0      	blx	r8
 8007a44:	3001      	adds	r0, #1
 8007a46:	d103      	bne.n	8007a50 <_printf_common+0xb0>
 8007a48:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a50:	3501      	adds	r5, #1
 8007a52:	e7c4      	b.n	80079de <_printf_common+0x3e>
 8007a54:	2030      	movs	r0, #48	; 0x30
 8007a56:	18e1      	adds	r1, r4, r3
 8007a58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a62:	4422      	add	r2, r4
 8007a64:	3302      	adds	r3, #2
 8007a66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a6a:	e7c5      	b.n	80079f8 <_printf_common+0x58>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	4622      	mov	r2, r4
 8007a70:	4649      	mov	r1, r9
 8007a72:	4638      	mov	r0, r7
 8007a74:	47c0      	blx	r8
 8007a76:	3001      	adds	r0, #1
 8007a78:	d0e6      	beq.n	8007a48 <_printf_common+0xa8>
 8007a7a:	3601      	adds	r6, #1
 8007a7c:	e7d9      	b.n	8007a32 <_printf_common+0x92>
	...

08007a80 <_printf_i>:
 8007a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a84:	460c      	mov	r4, r1
 8007a86:	7e27      	ldrb	r7, [r4, #24]
 8007a88:	4691      	mov	r9, r2
 8007a8a:	2f78      	cmp	r7, #120	; 0x78
 8007a8c:	4680      	mov	r8, r0
 8007a8e:	469a      	mov	sl, r3
 8007a90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a96:	d807      	bhi.n	8007aa8 <_printf_i+0x28>
 8007a98:	2f62      	cmp	r7, #98	; 0x62
 8007a9a:	d80a      	bhi.n	8007ab2 <_printf_i+0x32>
 8007a9c:	2f00      	cmp	r7, #0
 8007a9e:	f000 80d9 	beq.w	8007c54 <_printf_i+0x1d4>
 8007aa2:	2f58      	cmp	r7, #88	; 0x58
 8007aa4:	f000 80a4 	beq.w	8007bf0 <_printf_i+0x170>
 8007aa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007aac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ab0:	e03a      	b.n	8007b28 <_printf_i+0xa8>
 8007ab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ab6:	2b15      	cmp	r3, #21
 8007ab8:	d8f6      	bhi.n	8007aa8 <_printf_i+0x28>
 8007aba:	a001      	add	r0, pc, #4	; (adr r0, 8007ac0 <_printf_i+0x40>)
 8007abc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ac0:	08007b19 	.word	0x08007b19
 8007ac4:	08007b2d 	.word	0x08007b2d
 8007ac8:	08007aa9 	.word	0x08007aa9
 8007acc:	08007aa9 	.word	0x08007aa9
 8007ad0:	08007aa9 	.word	0x08007aa9
 8007ad4:	08007aa9 	.word	0x08007aa9
 8007ad8:	08007b2d 	.word	0x08007b2d
 8007adc:	08007aa9 	.word	0x08007aa9
 8007ae0:	08007aa9 	.word	0x08007aa9
 8007ae4:	08007aa9 	.word	0x08007aa9
 8007ae8:	08007aa9 	.word	0x08007aa9
 8007aec:	08007c3b 	.word	0x08007c3b
 8007af0:	08007b5d 	.word	0x08007b5d
 8007af4:	08007c1d 	.word	0x08007c1d
 8007af8:	08007aa9 	.word	0x08007aa9
 8007afc:	08007aa9 	.word	0x08007aa9
 8007b00:	08007c5d 	.word	0x08007c5d
 8007b04:	08007aa9 	.word	0x08007aa9
 8007b08:	08007b5d 	.word	0x08007b5d
 8007b0c:	08007aa9 	.word	0x08007aa9
 8007b10:	08007aa9 	.word	0x08007aa9
 8007b14:	08007c25 	.word	0x08007c25
 8007b18:	680b      	ldr	r3, [r1, #0]
 8007b1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b1e:	1d1a      	adds	r2, r3, #4
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	600a      	str	r2, [r1, #0]
 8007b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e0a4      	b.n	8007c76 <_printf_i+0x1f6>
 8007b2c:	6825      	ldr	r5, [r4, #0]
 8007b2e:	6808      	ldr	r0, [r1, #0]
 8007b30:	062e      	lsls	r6, r5, #24
 8007b32:	f100 0304 	add.w	r3, r0, #4
 8007b36:	d50a      	bpl.n	8007b4e <_printf_i+0xce>
 8007b38:	6805      	ldr	r5, [r0, #0]
 8007b3a:	600b      	str	r3, [r1, #0]
 8007b3c:	2d00      	cmp	r5, #0
 8007b3e:	da03      	bge.n	8007b48 <_printf_i+0xc8>
 8007b40:	232d      	movs	r3, #45	; 0x2d
 8007b42:	426d      	negs	r5, r5
 8007b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b48:	230a      	movs	r3, #10
 8007b4a:	485e      	ldr	r0, [pc, #376]	; (8007cc4 <_printf_i+0x244>)
 8007b4c:	e019      	b.n	8007b82 <_printf_i+0x102>
 8007b4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b52:	6805      	ldr	r5, [r0, #0]
 8007b54:	600b      	str	r3, [r1, #0]
 8007b56:	bf18      	it	ne
 8007b58:	b22d      	sxthne	r5, r5
 8007b5a:	e7ef      	b.n	8007b3c <_printf_i+0xbc>
 8007b5c:	680b      	ldr	r3, [r1, #0]
 8007b5e:	6825      	ldr	r5, [r4, #0]
 8007b60:	1d18      	adds	r0, r3, #4
 8007b62:	6008      	str	r0, [r1, #0]
 8007b64:	0628      	lsls	r0, r5, #24
 8007b66:	d501      	bpl.n	8007b6c <_printf_i+0xec>
 8007b68:	681d      	ldr	r5, [r3, #0]
 8007b6a:	e002      	b.n	8007b72 <_printf_i+0xf2>
 8007b6c:	0669      	lsls	r1, r5, #25
 8007b6e:	d5fb      	bpl.n	8007b68 <_printf_i+0xe8>
 8007b70:	881d      	ldrh	r5, [r3, #0]
 8007b72:	2f6f      	cmp	r7, #111	; 0x6f
 8007b74:	bf0c      	ite	eq
 8007b76:	2308      	moveq	r3, #8
 8007b78:	230a      	movne	r3, #10
 8007b7a:	4852      	ldr	r0, [pc, #328]	; (8007cc4 <_printf_i+0x244>)
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b82:	6866      	ldr	r6, [r4, #4]
 8007b84:	2e00      	cmp	r6, #0
 8007b86:	bfa8      	it	ge
 8007b88:	6821      	ldrge	r1, [r4, #0]
 8007b8a:	60a6      	str	r6, [r4, #8]
 8007b8c:	bfa4      	itt	ge
 8007b8e:	f021 0104 	bicge.w	r1, r1, #4
 8007b92:	6021      	strge	r1, [r4, #0]
 8007b94:	b90d      	cbnz	r5, 8007b9a <_printf_i+0x11a>
 8007b96:	2e00      	cmp	r6, #0
 8007b98:	d04d      	beq.n	8007c36 <_printf_i+0x1b6>
 8007b9a:	4616      	mov	r6, r2
 8007b9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ba0:	fb03 5711 	mls	r7, r3, r1, r5
 8007ba4:	5dc7      	ldrb	r7, [r0, r7]
 8007ba6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007baa:	462f      	mov	r7, r5
 8007bac:	42bb      	cmp	r3, r7
 8007bae:	460d      	mov	r5, r1
 8007bb0:	d9f4      	bls.n	8007b9c <_printf_i+0x11c>
 8007bb2:	2b08      	cmp	r3, #8
 8007bb4:	d10b      	bne.n	8007bce <_printf_i+0x14e>
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	07df      	lsls	r7, r3, #31
 8007bba:	d508      	bpl.n	8007bce <_printf_i+0x14e>
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	6861      	ldr	r1, [r4, #4]
 8007bc0:	4299      	cmp	r1, r3
 8007bc2:	bfde      	ittt	le
 8007bc4:	2330      	movle	r3, #48	; 0x30
 8007bc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bce:	1b92      	subs	r2, r2, r6
 8007bd0:	6122      	str	r2, [r4, #16]
 8007bd2:	464b      	mov	r3, r9
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	f8cd a000 	str.w	sl, [sp]
 8007bdc:	aa03      	add	r2, sp, #12
 8007bde:	f7ff fedf 	bl	80079a0 <_printf_common>
 8007be2:	3001      	adds	r0, #1
 8007be4:	d14c      	bne.n	8007c80 <_printf_i+0x200>
 8007be6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bea:	b004      	add	sp, #16
 8007bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf0:	4834      	ldr	r0, [pc, #208]	; (8007cc4 <_printf_i+0x244>)
 8007bf2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bf6:	680e      	ldr	r6, [r1, #0]
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	f856 5b04 	ldr.w	r5, [r6], #4
 8007bfe:	061f      	lsls	r7, r3, #24
 8007c00:	600e      	str	r6, [r1, #0]
 8007c02:	d514      	bpl.n	8007c2e <_printf_i+0x1ae>
 8007c04:	07d9      	lsls	r1, r3, #31
 8007c06:	bf44      	itt	mi
 8007c08:	f043 0320 	orrmi.w	r3, r3, #32
 8007c0c:	6023      	strmi	r3, [r4, #0]
 8007c0e:	b91d      	cbnz	r5, 8007c18 <_printf_i+0x198>
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	f023 0320 	bic.w	r3, r3, #32
 8007c16:	6023      	str	r3, [r4, #0]
 8007c18:	2310      	movs	r3, #16
 8007c1a:	e7af      	b.n	8007b7c <_printf_i+0xfc>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	f043 0320 	orr.w	r3, r3, #32
 8007c22:	6023      	str	r3, [r4, #0]
 8007c24:	2378      	movs	r3, #120	; 0x78
 8007c26:	4828      	ldr	r0, [pc, #160]	; (8007cc8 <_printf_i+0x248>)
 8007c28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c2c:	e7e3      	b.n	8007bf6 <_printf_i+0x176>
 8007c2e:	065e      	lsls	r6, r3, #25
 8007c30:	bf48      	it	mi
 8007c32:	b2ad      	uxthmi	r5, r5
 8007c34:	e7e6      	b.n	8007c04 <_printf_i+0x184>
 8007c36:	4616      	mov	r6, r2
 8007c38:	e7bb      	b.n	8007bb2 <_printf_i+0x132>
 8007c3a:	680b      	ldr	r3, [r1, #0]
 8007c3c:	6826      	ldr	r6, [r4, #0]
 8007c3e:	1d1d      	adds	r5, r3, #4
 8007c40:	6960      	ldr	r0, [r4, #20]
 8007c42:	600d      	str	r5, [r1, #0]
 8007c44:	0635      	lsls	r5, r6, #24
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	d501      	bpl.n	8007c4e <_printf_i+0x1ce>
 8007c4a:	6018      	str	r0, [r3, #0]
 8007c4c:	e002      	b.n	8007c54 <_printf_i+0x1d4>
 8007c4e:	0671      	lsls	r1, r6, #25
 8007c50:	d5fb      	bpl.n	8007c4a <_printf_i+0x1ca>
 8007c52:	8018      	strh	r0, [r3, #0]
 8007c54:	2300      	movs	r3, #0
 8007c56:	4616      	mov	r6, r2
 8007c58:	6123      	str	r3, [r4, #16]
 8007c5a:	e7ba      	b.n	8007bd2 <_printf_i+0x152>
 8007c5c:	680b      	ldr	r3, [r1, #0]
 8007c5e:	1d1a      	adds	r2, r3, #4
 8007c60:	600a      	str	r2, [r1, #0]
 8007c62:	681e      	ldr	r6, [r3, #0]
 8007c64:	2100      	movs	r1, #0
 8007c66:	4630      	mov	r0, r6
 8007c68:	6862      	ldr	r2, [r4, #4]
 8007c6a:	f000 f82f 	bl	8007ccc <memchr>
 8007c6e:	b108      	cbz	r0, 8007c74 <_printf_i+0x1f4>
 8007c70:	1b80      	subs	r0, r0, r6
 8007c72:	6060      	str	r0, [r4, #4]
 8007c74:	6863      	ldr	r3, [r4, #4]
 8007c76:	6123      	str	r3, [r4, #16]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c7e:	e7a8      	b.n	8007bd2 <_printf_i+0x152>
 8007c80:	4632      	mov	r2, r6
 8007c82:	4649      	mov	r1, r9
 8007c84:	4640      	mov	r0, r8
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	47d0      	blx	sl
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d0ab      	beq.n	8007be6 <_printf_i+0x166>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	079b      	lsls	r3, r3, #30
 8007c92:	d413      	bmi.n	8007cbc <_printf_i+0x23c>
 8007c94:	68e0      	ldr	r0, [r4, #12]
 8007c96:	9b03      	ldr	r3, [sp, #12]
 8007c98:	4298      	cmp	r0, r3
 8007c9a:	bfb8      	it	lt
 8007c9c:	4618      	movlt	r0, r3
 8007c9e:	e7a4      	b.n	8007bea <_printf_i+0x16a>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	4632      	mov	r2, r6
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	4640      	mov	r0, r8
 8007ca8:	47d0      	blx	sl
 8007caa:	3001      	adds	r0, #1
 8007cac:	d09b      	beq.n	8007be6 <_printf_i+0x166>
 8007cae:	3501      	adds	r5, #1
 8007cb0:	68e3      	ldr	r3, [r4, #12]
 8007cb2:	9903      	ldr	r1, [sp, #12]
 8007cb4:	1a5b      	subs	r3, r3, r1
 8007cb6:	42ab      	cmp	r3, r5
 8007cb8:	dcf2      	bgt.n	8007ca0 <_printf_i+0x220>
 8007cba:	e7eb      	b.n	8007c94 <_printf_i+0x214>
 8007cbc:	2500      	movs	r5, #0
 8007cbe:	f104 0619 	add.w	r6, r4, #25
 8007cc2:	e7f5      	b.n	8007cb0 <_printf_i+0x230>
 8007cc4:	080080b9 	.word	0x080080b9
 8007cc8:	080080ca 	.word	0x080080ca

08007ccc <memchr>:
 8007ccc:	4603      	mov	r3, r0
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	b2c9      	uxtb	r1, r1
 8007cd2:	4402      	add	r2, r0
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	d101      	bne.n	8007cde <memchr+0x12>
 8007cda:	2000      	movs	r0, #0
 8007cdc:	e003      	b.n	8007ce6 <memchr+0x1a>
 8007cde:	7804      	ldrb	r4, [r0, #0]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	428c      	cmp	r4, r1
 8007ce4:	d1f6      	bne.n	8007cd4 <memchr+0x8>
 8007ce6:	bd10      	pop	{r4, pc}

08007ce8 <memcpy>:
 8007ce8:	440a      	add	r2, r1
 8007cea:	4291      	cmp	r1, r2
 8007cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cf0:	d100      	bne.n	8007cf4 <memcpy+0xc>
 8007cf2:	4770      	bx	lr
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cfa:	4291      	cmp	r1, r2
 8007cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d00:	d1f9      	bne.n	8007cf6 <memcpy+0xe>
 8007d02:	bd10      	pop	{r4, pc}

08007d04 <memmove>:
 8007d04:	4288      	cmp	r0, r1
 8007d06:	b510      	push	{r4, lr}
 8007d08:	eb01 0402 	add.w	r4, r1, r2
 8007d0c:	d902      	bls.n	8007d14 <memmove+0x10>
 8007d0e:	4284      	cmp	r4, r0
 8007d10:	4623      	mov	r3, r4
 8007d12:	d807      	bhi.n	8007d24 <memmove+0x20>
 8007d14:	1e43      	subs	r3, r0, #1
 8007d16:	42a1      	cmp	r1, r4
 8007d18:	d008      	beq.n	8007d2c <memmove+0x28>
 8007d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d22:	e7f8      	b.n	8007d16 <memmove+0x12>
 8007d24:	4601      	mov	r1, r0
 8007d26:	4402      	add	r2, r0
 8007d28:	428a      	cmp	r2, r1
 8007d2a:	d100      	bne.n	8007d2e <memmove+0x2a>
 8007d2c:	bd10      	pop	{r4, pc}
 8007d2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d36:	e7f7      	b.n	8007d28 <memmove+0x24>

08007d38 <_free_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4605      	mov	r5, r0
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	d043      	beq.n	8007dc8 <_free_r+0x90>
 8007d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d44:	1f0c      	subs	r4, r1, #4
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	bfb8      	it	lt
 8007d4a:	18e4      	addlt	r4, r4, r3
 8007d4c:	f000 f8d0 	bl	8007ef0 <__malloc_lock>
 8007d50:	4a1e      	ldr	r2, [pc, #120]	; (8007dcc <_free_r+0x94>)
 8007d52:	6813      	ldr	r3, [r2, #0]
 8007d54:	4610      	mov	r0, r2
 8007d56:	b933      	cbnz	r3, 8007d66 <_free_r+0x2e>
 8007d58:	6063      	str	r3, [r4, #4]
 8007d5a:	6014      	str	r4, [r2, #0]
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d62:	f000 b8cb 	b.w	8007efc <__malloc_unlock>
 8007d66:	42a3      	cmp	r3, r4
 8007d68:	d90a      	bls.n	8007d80 <_free_r+0x48>
 8007d6a:	6821      	ldr	r1, [r4, #0]
 8007d6c:	1862      	adds	r2, r4, r1
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	bf01      	itttt	eq
 8007d72:	681a      	ldreq	r2, [r3, #0]
 8007d74:	685b      	ldreq	r3, [r3, #4]
 8007d76:	1852      	addeq	r2, r2, r1
 8007d78:	6022      	streq	r2, [r4, #0]
 8007d7a:	6063      	str	r3, [r4, #4]
 8007d7c:	6004      	str	r4, [r0, #0]
 8007d7e:	e7ed      	b.n	8007d5c <_free_r+0x24>
 8007d80:	461a      	mov	r2, r3
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	b10b      	cbz	r3, 8007d8a <_free_r+0x52>
 8007d86:	42a3      	cmp	r3, r4
 8007d88:	d9fa      	bls.n	8007d80 <_free_r+0x48>
 8007d8a:	6811      	ldr	r1, [r2, #0]
 8007d8c:	1850      	adds	r0, r2, r1
 8007d8e:	42a0      	cmp	r0, r4
 8007d90:	d10b      	bne.n	8007daa <_free_r+0x72>
 8007d92:	6820      	ldr	r0, [r4, #0]
 8007d94:	4401      	add	r1, r0
 8007d96:	1850      	adds	r0, r2, r1
 8007d98:	4283      	cmp	r3, r0
 8007d9a:	6011      	str	r1, [r2, #0]
 8007d9c:	d1de      	bne.n	8007d5c <_free_r+0x24>
 8007d9e:	6818      	ldr	r0, [r3, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	4401      	add	r1, r0
 8007da4:	6011      	str	r1, [r2, #0]
 8007da6:	6053      	str	r3, [r2, #4]
 8007da8:	e7d8      	b.n	8007d5c <_free_r+0x24>
 8007daa:	d902      	bls.n	8007db2 <_free_r+0x7a>
 8007dac:	230c      	movs	r3, #12
 8007dae:	602b      	str	r3, [r5, #0]
 8007db0:	e7d4      	b.n	8007d5c <_free_r+0x24>
 8007db2:	6820      	ldr	r0, [r4, #0]
 8007db4:	1821      	adds	r1, r4, r0
 8007db6:	428b      	cmp	r3, r1
 8007db8:	bf01      	itttt	eq
 8007dba:	6819      	ldreq	r1, [r3, #0]
 8007dbc:	685b      	ldreq	r3, [r3, #4]
 8007dbe:	1809      	addeq	r1, r1, r0
 8007dc0:	6021      	streq	r1, [r4, #0]
 8007dc2:	6063      	str	r3, [r4, #4]
 8007dc4:	6054      	str	r4, [r2, #4]
 8007dc6:	e7c9      	b.n	8007d5c <_free_r+0x24>
 8007dc8:	bd38      	pop	{r3, r4, r5, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000640 	.word	0x20000640

08007dd0 <_malloc_r>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	1ccd      	adds	r5, r1, #3
 8007dd4:	f025 0503 	bic.w	r5, r5, #3
 8007dd8:	3508      	adds	r5, #8
 8007dda:	2d0c      	cmp	r5, #12
 8007ddc:	bf38      	it	cc
 8007dde:	250c      	movcc	r5, #12
 8007de0:	2d00      	cmp	r5, #0
 8007de2:	4606      	mov	r6, r0
 8007de4:	db01      	blt.n	8007dea <_malloc_r+0x1a>
 8007de6:	42a9      	cmp	r1, r5
 8007de8:	d903      	bls.n	8007df2 <_malloc_r+0x22>
 8007dea:	230c      	movs	r3, #12
 8007dec:	6033      	str	r3, [r6, #0]
 8007dee:	2000      	movs	r0, #0
 8007df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007df2:	f000 f87d 	bl	8007ef0 <__malloc_lock>
 8007df6:	4921      	ldr	r1, [pc, #132]	; (8007e7c <_malloc_r+0xac>)
 8007df8:	680a      	ldr	r2, [r1, #0]
 8007dfa:	4614      	mov	r4, r2
 8007dfc:	b99c      	cbnz	r4, 8007e26 <_malloc_r+0x56>
 8007dfe:	4f20      	ldr	r7, [pc, #128]	; (8007e80 <_malloc_r+0xb0>)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	b923      	cbnz	r3, 8007e0e <_malloc_r+0x3e>
 8007e04:	4621      	mov	r1, r4
 8007e06:	4630      	mov	r0, r6
 8007e08:	f000 f862 	bl	8007ed0 <_sbrk_r>
 8007e0c:	6038      	str	r0, [r7, #0]
 8007e0e:	4629      	mov	r1, r5
 8007e10:	4630      	mov	r0, r6
 8007e12:	f000 f85d 	bl	8007ed0 <_sbrk_r>
 8007e16:	1c43      	adds	r3, r0, #1
 8007e18:	d123      	bne.n	8007e62 <_malloc_r+0x92>
 8007e1a:	230c      	movs	r3, #12
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	6033      	str	r3, [r6, #0]
 8007e20:	f000 f86c 	bl	8007efc <__malloc_unlock>
 8007e24:	e7e3      	b.n	8007dee <_malloc_r+0x1e>
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	1b5b      	subs	r3, r3, r5
 8007e2a:	d417      	bmi.n	8007e5c <_malloc_r+0x8c>
 8007e2c:	2b0b      	cmp	r3, #11
 8007e2e:	d903      	bls.n	8007e38 <_malloc_r+0x68>
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	441c      	add	r4, r3
 8007e34:	6025      	str	r5, [r4, #0]
 8007e36:	e004      	b.n	8007e42 <_malloc_r+0x72>
 8007e38:	6863      	ldr	r3, [r4, #4]
 8007e3a:	42a2      	cmp	r2, r4
 8007e3c:	bf0c      	ite	eq
 8007e3e:	600b      	streq	r3, [r1, #0]
 8007e40:	6053      	strne	r3, [r2, #4]
 8007e42:	4630      	mov	r0, r6
 8007e44:	f000 f85a 	bl	8007efc <__malloc_unlock>
 8007e48:	f104 000b 	add.w	r0, r4, #11
 8007e4c:	1d23      	adds	r3, r4, #4
 8007e4e:	f020 0007 	bic.w	r0, r0, #7
 8007e52:	1ac2      	subs	r2, r0, r3
 8007e54:	d0cc      	beq.n	8007df0 <_malloc_r+0x20>
 8007e56:	1a1b      	subs	r3, r3, r0
 8007e58:	50a3      	str	r3, [r4, r2]
 8007e5a:	e7c9      	b.n	8007df0 <_malloc_r+0x20>
 8007e5c:	4622      	mov	r2, r4
 8007e5e:	6864      	ldr	r4, [r4, #4]
 8007e60:	e7cc      	b.n	8007dfc <_malloc_r+0x2c>
 8007e62:	1cc4      	adds	r4, r0, #3
 8007e64:	f024 0403 	bic.w	r4, r4, #3
 8007e68:	42a0      	cmp	r0, r4
 8007e6a:	d0e3      	beq.n	8007e34 <_malloc_r+0x64>
 8007e6c:	1a21      	subs	r1, r4, r0
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f000 f82e 	bl	8007ed0 <_sbrk_r>
 8007e74:	3001      	adds	r0, #1
 8007e76:	d1dd      	bne.n	8007e34 <_malloc_r+0x64>
 8007e78:	e7cf      	b.n	8007e1a <_malloc_r+0x4a>
 8007e7a:	bf00      	nop
 8007e7c:	20000640 	.word	0x20000640
 8007e80:	20000644 	.word	0x20000644

08007e84 <_realloc_r>:
 8007e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e86:	4607      	mov	r7, r0
 8007e88:	4614      	mov	r4, r2
 8007e8a:	460e      	mov	r6, r1
 8007e8c:	b921      	cbnz	r1, 8007e98 <_realloc_r+0x14>
 8007e8e:	4611      	mov	r1, r2
 8007e90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e94:	f7ff bf9c 	b.w	8007dd0 <_malloc_r>
 8007e98:	b922      	cbnz	r2, 8007ea4 <_realloc_r+0x20>
 8007e9a:	f7ff ff4d 	bl	8007d38 <_free_r>
 8007e9e:	4625      	mov	r5, r4
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ea4:	f000 f830 	bl	8007f08 <_malloc_usable_size_r>
 8007ea8:	42a0      	cmp	r0, r4
 8007eaa:	d20f      	bcs.n	8007ecc <_realloc_r+0x48>
 8007eac:	4621      	mov	r1, r4
 8007eae:	4638      	mov	r0, r7
 8007eb0:	f7ff ff8e 	bl	8007dd0 <_malloc_r>
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d0f2      	beq.n	8007ea0 <_realloc_r+0x1c>
 8007eba:	4631      	mov	r1, r6
 8007ebc:	4622      	mov	r2, r4
 8007ebe:	f7ff ff13 	bl	8007ce8 <memcpy>
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	f7ff ff37 	bl	8007d38 <_free_r>
 8007eca:	e7e9      	b.n	8007ea0 <_realloc_r+0x1c>
 8007ecc:	4635      	mov	r5, r6
 8007ece:	e7e7      	b.n	8007ea0 <_realloc_r+0x1c>

08007ed0 <_sbrk_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	4d05      	ldr	r5, [pc, #20]	; (8007eec <_sbrk_r+0x1c>)
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	4608      	mov	r0, r1
 8007eda:	602b      	str	r3, [r5, #0]
 8007edc:	f7f8 fb3c 	bl	8000558 <_sbrk>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	d102      	bne.n	8007eea <_sbrk_r+0x1a>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	b103      	cbz	r3, 8007eea <_sbrk_r+0x1a>
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	200015e4 	.word	0x200015e4

08007ef0 <__malloc_lock>:
 8007ef0:	4801      	ldr	r0, [pc, #4]	; (8007ef8 <__malloc_lock+0x8>)
 8007ef2:	f000 b811 	b.w	8007f18 <__retarget_lock_acquire_recursive>
 8007ef6:	bf00      	nop
 8007ef8:	200015ec 	.word	0x200015ec

08007efc <__malloc_unlock>:
 8007efc:	4801      	ldr	r0, [pc, #4]	; (8007f04 <__malloc_unlock+0x8>)
 8007efe:	f000 b80c 	b.w	8007f1a <__retarget_lock_release_recursive>
 8007f02:	bf00      	nop
 8007f04:	200015ec 	.word	0x200015ec

08007f08 <_malloc_usable_size_r>:
 8007f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f0c:	1f18      	subs	r0, r3, #4
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	bfbc      	itt	lt
 8007f12:	580b      	ldrlt	r3, [r1, r0]
 8007f14:	18c0      	addlt	r0, r0, r3
 8007f16:	4770      	bx	lr

08007f18 <__retarget_lock_acquire_recursive>:
 8007f18:	4770      	bx	lr

08007f1a <__retarget_lock_release_recursive>:
 8007f1a:	4770      	bx	lr

08007f1c <_init>:
 8007f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1e:	bf00      	nop
 8007f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f22:	bc08      	pop	{r3}
 8007f24:	469e      	mov	lr, r3
 8007f26:	4770      	bx	lr

08007f28 <_fini>:
 8007f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2a:	bf00      	nop
 8007f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2e:	bc08      	pop	{r3}
 8007f30:	469e      	mov	lr, r3
 8007f32:	4770      	bx	lr
